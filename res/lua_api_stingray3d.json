{
  "members":{
    "stingray":{
      "type":"namespace",
      "members":{
        "GwNavCostMap":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject"],
                  "rets":["nil"],
                  "args":["costmap"]
                }],
              "desc":"Destroys a [NavCostMapObject]."
            },
            "get_debug_triangle_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject"],
                  "rets":["integer"],
                  "args":["costmap"]
                }],
              "desc":"Returns the number of debug triangles touched by [NavCostMapObject]."
            },
            "remove_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject","stingray.NavCostMapVolumeObject"],
                  "rets":["nil"],
                  "args":["costmap","volume"]
                }],
              "desc":"Removes a [NavCostMapVolumeObject] from a [NavCostMapObject]."
            },
            "get_debug_triangle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject","integer"],
                  "rets":["stingray.Vector3?","stingray.Vector3?","stingray.Vector3?"],
                  "args":["costmap","triangle_index"]
                }],
              "desc":""
            },
            "create_box_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["stingray.NavCostMapVolumeObject"],
                  "args":["transform","scale"]
                }],
              "desc":"Creates a box [NavCostMapVolumeObject]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","integer"],
                  "rets":["stingray.NavCostMapObject"],
                  "args":["nav_world","tag_index"]
                }],
              "desc":"Creates a [NavCostMapObject]."
            },
            "set_volume_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapVolumeObject","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["volume","scale"]
                }],
              "desc":"Sets a new scale to a [NavCostMapVolumeObject]."
            },
            "destroy_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapVolumeObject"],
                  "rets":["nil"],
                  "args":["volume"]
                }],
              "desc":"Destroys a [NavCostMapVolumeObject]."
            },
            "add_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject","stingray.NavCostMapVolumeObject"],
                  "rets":["nil"],
                  "args":["costmap","volume"]
                }],
              "desc":"Adds a [NavCostMapVolumeObject] to a [NavCostMapObject]."
            },
            "destroy_tag_cost_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapTagCostTableObject"],
                  "rets":["nil"],
                  "args":["cost_table"]
                }],
              "desc":""
            },
            "set_volume_transform":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapVolumeObject","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["volume","transform"]
                }],
              "desc":"Sets a new transform to a [NavCostMapVolumeObject]."
            },
            "create_tag_cost_table":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.NavCostMapTagCostTableObject"],
                  "args":[]
                }],
              "desc":"It's necessary to use this [NavCostMapTagCostTableObject] to initialize bots with different cost map traversal multipliers."
            },
            "create_sphere_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["stingray.NavCostMapVolumeObject"],
                  "args":["position","radius"]
                }],
              "desc":"Creates a sphere [NavCostMapVolumeObject]."
            },
            "recompute":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapObject"],
                  "rets":["nil"],
                  "args":["costmap"]
                }],
              "desc":"Recomputes the cost of the triangles contained within all [NavCostMapVolumeObject] in a [NavCostMapObject]."
            },
            "cost_table_set_cost":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavCostMapTagCostTableObject","integer","number"],
                  "rets":["nil"],
                  "args":["cost_table","tag_index","cost"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "SimulatedTouchPanel1":{
          "desc":"",
          "type":"object"
        },
        "Profiler":{
          "type":"object",
          "members":{
            "start":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["name"]
                }],
              "desc":"Starts a profiling scope with the specified name, which allows you to measure the performance of script functions or code\n\t\tblocks in the in-game profiler."
            },
            "profile_event":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Sends an event to profiler."
            },
            "stop":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Stops the last profile scope started by [stingray."
            },
            "record_statistics":{
              "type":"function",
              "signatures":[{
                  "types":["string","any(number,stingray.Vector3)"],
                  "rets":["nil"],
                  "args":["name","value"]
                }],
              "desc":"Records statistics data (a float or vector3) for the in-game graph drawer."
            }
          },
          "desc":""
        },
        "Unit":{
          "type":"object",
          "members":{
            "animation_root_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the current animation root mode."
            },
            "destroy_cloth":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["nil"],
                  "args":["unit","id"]
                }],
              "desc":"Destroys an Apex cloth with the specified name or index, if it has been created previously in the unit."
            },
            "crossfade_animation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","integer?","number?","boolean?"],
                  "rets":["integer"],
                  "args":["unit","animation","layer","blend_time","loop"]
                }],
              "desc":"Crossfades in the animation on the specified unit in the specified animation layer over the specified blend time."
            },
            "enable_proximity_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Re-enables the proximity system for the unit, if it has been previously disabled."
            },
            "has_mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","mesh"]
                }],
              "desc":"Indicates whether or not the unit contains a mesh with the specified name."
            },
            "animation_event_by_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","any?"],
                  "rets":["integer"],
                  "args":["unit","event_index","parameters"]
                }],
              "desc":"Triggers the specified event in the unit's animation state machine, which may cause a\n\t\ttransition to a different animation state."
            },
            "num_actors":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of actors owned by the unit."
            },
            "index_by_animation_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer"],
                  "args":["unit","event"]
                }],
              "desc":""
            },
            "set_unit_and_children_visibility":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","visibility"]
                }],
              "desc":"Sets the visibility of all meshes in the unit and the units children."
            },
            "delta_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the delta world position and orientation of a node in the unit since the last frame."
            },
            "num_lights":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of lights in the unit."
            },
            "set_simple_animation_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","number","string?"],
                  "rets":["nil"],
                  "args":["unit","speed","group"]
                }],
              "desc":"Changes speed of a simple animation playing for the unit."
            },
            "lod_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.LODObject"],
                  "args":["unit","lod"]
                }],
              "desc":"Retrieves the specified LOD Object owned by the unit."
            },
            "project_decal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","stingray.Matrix4x4","stingray.Vector3","string","table"],
                  "rets":["integer"],
                  "args":["unit","tm","size","context_or_drawer","material_drawer_mapping"]
                }],
              "desc":"Projects a decal on the specified unit."
            },
            "remove_decal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["nil"],
                  "args":["unit","id"]
                }],
              "desc":"Removes the decal with the specified ID from the unit."
            },
            "has_visibility_group":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","group"]
                }],
              "desc":"Indicates whether or not the specified visibility group is declared in the unit's data resource file."
            },
            "id_string":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "assign_reference":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Assigns the unit's reference to the unit reference parameter."
            },
            "animation_set_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","any(stingray.Matrix4x4,stingray.Quaternion,stingray.Vector3)"],
                  "rets":["nil"],
                  "args":["unit","index","value"]
                }],
              "desc":"Sets the value of a constraint target in the unit's animation state machine."
            },
            "set_scalar_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","number"],
                  "rets":["nil"],
                  "args":["unit","variable","value"]
                }],
              "desc":"Sets a scalar variable in all mesh materials in unit."
            },
            "set_vector2_for_material_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string[]","string","vector2"],
                  "rets":["nil"],
                  "args":["unit","materials","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "delta_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the delta world position of a node in the unit since the last frame."
            },
            "set_local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","i","scale"]
                }],
              "desc":"Sets the local scale of a node in the unit."
            },
            "local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the local position and orientation of a node in the unit."
            },
            "animation_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","any?"],
                  "rets":["integer"],
                  "args":["unit","event","parameters"]
                }],
              "desc":"Triggers the specified event in the unit's animation state machine, which may cause a\n\t\ttransition to a different animation state."
            },
            "data_table_size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(integer,string)+"],
                  "rets":["integer"],
                  "args":["unit","indices"]
                }],
              "desc":""
            },
            "create_custom_joint":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","any(string,stingray.Vector3)+"],
                  "rets":["userdata"],
                  "args":["unit","name","params"]
                }],
              "desc":"Creates a physics joint in the unit based on a joint description."
            },
            "teleport_local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","i","scale"]
                }],
              "desc":"Teleports the scale of a node in the unit."
            },
            "animation_wanted_root_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["unit"]
                }],
              "desc":"In the `ignore` root mode, this function returns the position and rotation that the animation would have moved\n\t\tthe root node to."
            },
            "num_lod_objects":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of LOD Objects in the unit."
            },
            "set_color_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","variable","color"]
                }],
              "desc":"Sets a color variable in all mesh materials in unit."
            },
            "set_bones_lod":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["nil"],
                  "args":["unit","lod_level"]
                }],
              "desc":"Sets the LOD level for animation bones."
            },
            "has_camera":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","camera"]
                }],
              "desc":"Indicates whether or not the unit contains a camera with the specified name."
            },
            "set_color_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","variable","color"]
                }],
              "desc":""
            },
            "has_terrain":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","terrain"]
                }],
              "desc":"Indicates whether or not the unit contains a terrain with the specified name."
            },
            "set_scalar_for_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","number"],
                  "rets":["nil"],
                  "args":["unit","material","material_variable","scalar"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(integer,string)+"],
                  "rets":["boolean"],
                  "args":["unit","indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the unit's\n\t\tscript data object."
            },
            "destroy_actor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["nil"],
                  "args":["unit","actor"]
                }],
              "desc":"Destroys the actor with the specified name or index, if it has been created previously in the unit."
            },
            "is_valid":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["boolean"],
                  "args":["unit"]
                }],
              "desc":"Indicates whether the unit exists, or whether it has been deleted."
            },
            "set_matrix4x4_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","variable","value"]
                }],
              "desc":"Sets a matrix variable in all mesh materials in unit."
            },
            "actor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Actor"],
                  "args":["unit","actor"]
                }],
              "desc":"Retrieves the specified actor owned by the unit."
            },
            "delta_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the delta world rotation of a node in the unit since the last frame."
            },
            "bones":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string[]"],
                  "args":["unit"]
                }],
              "desc":"Retrieves a list of all bones in the unit's state machine."
            },
            "set_matrix4x4_for_material_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string[]","string","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","materials","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "crossfade_animation_set_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","number"],
                  "rets":["nil"],
                  "args":["unit","id","speed"]
                }],
              "desc":"Sets the speed at which the crossfaded animation will play with respect to the blender."
            },
            "remove_reference":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "set_all_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "id32":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["number?"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "find_actor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer?"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the index of the actor with the specified name."
            },
            "animation_find_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the index of a constraint target in the unit's animation state machine."
            },
            "teleport_local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","i","rotation"]
                }],
              "desc":"Teleports the rotation of a node in the unit."
            },
            "world_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the world position and orientation of a node in the unit."
            },
            "set_cloth_visibilty":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)","boolean","string?"],
                  "rets":["nil"],
                  "args":["unit","id","visibility","context"]
                }],
              "desc":"Sets the visibility of the Apex cloth with the specified name or index."
            },
            "alive":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["boolean"],
                  "args":["unit"]
                }],
              "desc":"Indicates whether the unit exists, or whether it has been deleted."
            },
            "set_scalar_for_material_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string[]","string","number"],
                  "rets":["nil"],
                  "args":["unit","materials","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "set_unit_culling":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","enabled"]
                }],
              "desc":"Sets the culling enabled of all meshes and lod objects included in the specified unit."
            },
            "vehicle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Vehicle?"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the [Vehicle] from the unit."
            },
            "world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.World"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the [World] that the [Unit] lives in."
            },
            "create_actor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)","number?"],
                  "rets":["stingray.Actor"],
                  "args":["unit","id","inherit_velocity"]
                }],
              "desc":"Creates an [Actor] with the specified name or index in the unit, if it has not been created already."
            },
            "animation_set_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","number"],
                  "rets":["nil"],
                  "args":["unit","index","value"]
                }],
              "desc":"Sets the value of a specified variable in the unit's animation state machine."
            },
            "num_terrains":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of terrains in the unit."
            },
            "teleport_local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","i","pose"]
                }],
              "desc":"Teleports the position and orientation of a node in the unit."
            },
            "set_flow_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string"],
                  "rets":["nil"],
                  "args":["unit","name","value"]
                }],
              "desc":"Sets the value of the specified external flow variable."
            },
            "mover_fits_at":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)","stingray.Vector3","number?"],
                  "rets":["boolean","stingray.Vector3?"],
                  "args":["unit","id","position","allow_move"]
                }],
              "desc":"Indicates whether or not the mover fits at the specified position without colliding with\n\t\t\tany world geometry."
            },
            "local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the local rotation of a node in the unit."
            },
            "camera":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(integer,string)"],
                  "rets":["stingray.Camera"],
                  "args":["unit","camera"]
                }],
              "desc":"Retrieves the specified camera owned by the unit."
            },
            "find_cloth":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer?"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the index of the Apex cloth with the specified name in the unit."
            },
            "scene_graph_link":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","integer?"],
                  "rets":["nil"],
                  "args":["unit","i","parent"]
                }],
              "desc":"Links the scene graph node *i* to the scene graph node *parent*."
            },
            "animation_layer_info":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["number","number"],
                  "args":["unit","layer"]
                }],
              "desc":"Retrieves information about the animation playing in the specified layer."
            },
            "set_local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","i","pose"]
                }],
              "desc":"Sets the local position and orientation of a node in the unit."
            },
            "level_string":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "animation_find_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer?"],
                  "args":["unit","name"]
                }],
              "desc":"Finds the index of a specified variable in the unit's animation state machine."
            },
            "box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean?"],
                  "rets":["stingray.Matrix4x4","stingray.Vector3"],
                  "args":["self","ignore_invisble_meshes"]
                }],
              "desc":"Retrieves an oriented bounding box that encloses all the meshes in the unit."
            },
            "set_light_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":""
            },
            "set_animation_state_machine":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","machine"]
                }],
              "desc":"Sets the animation state machine of the unit to something other than the default."
            },
            "level":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Level?"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the [Level] that spawned the [Unit]."
            },
            "create_new_reference":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Unit"],
                  "args":["unit"]
                }],
              "desc":"Creates a new UnitReference for the unit that doesn't match the \"same\" old unit when compared in Lua."
            },
            "set_scalar_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","number"],
                  "rets":["nil"],
                  "args":["unit","variable","value"]
                }],
              "desc":""
            },
            "create_cloth":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Cloth"],
                  "args":["unit","id"]
                }],
              "desc":"Creates an Apex cloth with the specified name or index in the unit, if it has not been created already."
            },
            "animation_has_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","name"]
                }],
              "desc":"Returns *true* if the constraint target is defined for the unit, or *false* otherwise."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["unit","indices","indices","indices","value"]
                },{
                  "types":["stingray.Unit","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["unit","indices","indices","value"]
                },{
                  "types":["stingray.Unit","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["unit","indices","value"]
                }],
              "desc":"Stores the specified value in the unit's script data object, at a location determined\n\t\tby the specified indices."
            },
            "set_material_variation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","material_variation"]
                }],
              "desc":"Assigns all meshes to use the materials declared in the specified material resource."
            },
            "name_hash":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":"Retrieves a hashed representation of the unit name."
            },
            "world_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the world position of a node in the unit."
            },
            "stop_simple_animation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string?"],
                  "rets":["nil"],
                  "args":["unit","group"]
                }],
              "desc":"Stops a simple animation playing for the unit."
            },
            "crossfade_animation_set_time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","number"],
                  "rets":["nil"],
                  "args":["unit","id","time"]
                }],
              "desc":"Explicitly sets the time of the crossfaded animation to the specified time."
            },
            "cloth":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Cloth"],
                  "args":["unit","cloth"]
                }],
              "desc":"Retrieves the Apex cloth with the specified name or index from the unit."
            },
            "enable_animation_state_machine":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Enables the animation state machine for the unit, if it has been previously disabled."
            },
            "ANIMATION_OVERRIDE_PERCENT_SYNC":{
              "desc":"integer = <internal>\nOverrides the percent value for percent sync transitions in calls to [animation_event()].",
              "type":"constant"
            },
            "trigger_flow_unit_spawned":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Re-triggers the \"Unit Spawned\" flow event."
            },
            "set_matrix4x4_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","variable","value"]
                }],
              "desc":""
            },
            "animation_set_seeds":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer+"],
                  "rets":["nil"],
                  "args":["unit","seeds"]
                }],
              "desc":"set seeds to Layers random number generator in the animation controller of the unit."
            },
            "set_vector4_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","variable","vector4"]
                }],
              "desc":""
            },
            "teleport_local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","i","position"]
                }],
              "desc":"Similar to [set_local_position()], but the node is teleported rather than moved to the specified location."
            },
            "has_node":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","name"]
                }],
              "desc":"Indicates whether or not the unit has an object node that matches the specified name."
            },
            "set_vector3_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","variable","vector3"]
                }],
              "desc":""
            },
            "terrain":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Terrain"],
                  "args":["unit","terrain"]
                }],
              "desc":"Retrieves the specified terrain owned by the unit."
            },
            "set_shader_pass_flag_for_meshes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","boolean"],
                  "rets":["nil"],
                  "args":["unit","flag","enabled"]
                }],
              "desc":"Determines whether or not the specified shader pass is enabled for all meshes in the unit."
            },
            "play_simple_animation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","number?","number?","boolean?","number?","string?"],
                  "rets":["nil"],
                  "args":["unit","from","to","loop","speed","group"]
                }],
              "desc":"Plays the simple animation track stored in the unit (exported from your digital content creation tool such\n\t\tas Maya or 3ds Max)."
            },
            "mover":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Mover?"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the unit's current physics mover, if any."
            },
            "set_vector4_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","variable","vector4"]
                }],
              "desc":"Sets a four-dimensional vector variable in all mesh materials in unit."
            },
            "set_vector3_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","variable","vector3"]
                }],
              "desc":"Sets a three-dimensional vector variable in all mesh materials in unit."
            },
            "set_vector2_for_materials_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","variable","vector2"]
                }],
              "desc":""
            },
            "world_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the world rotation of a node in the unit."
            },
            "set_vector3_for_material_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string[]","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","materials","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "set_matrix4x4_for_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["unit","material","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "animation_get_seeds":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["any(integer)+"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the current seeds of the layers random number generators of the unit animation state machine as a tuple of data."
            },
            "animation_set_state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer+"],
                  "rets":["nil"],
                  "args":["unit","state"]
                }],
              "desc":"Restores a state fetched with [animation_get_state()]."
            },
            "set_vector4_for_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","material","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "set_vector3_for_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","material","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "disable_proximity_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Disables the proximity system for the unit, if it is enabled."
            },
            "has_lod_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","lod"]
                }],
              "desc":"Indicates whether or not the unit contains an LOD Object with the specified name."
            },
            "local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the local position of a node in the unit."
            },
            "animation_variable_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Returns the number of variables in a statemachine."
            },
            "material_id":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["name"]
                }],
              "desc":"Retrieves the ID for the material with the specified name, to be used in conjunction with [query_material()]."
            },
            "set_local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","i","position"]
                }],
              "desc":"Sets the local position of a node in the unit."
            },
            "query_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","stingray.Vector3","stingray.Vector3","string[]"],
                  "rets":["integer[]"],
                  "args":["unit","start","end","contexts"]
                }],
              "desc":"Finds the closest intersection by doing a raycast from *start* to *end*, and returns a list\n\t\twith one material ID per context."
            },
            "debug_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the name of the unit."
            },
            "animation_bone_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["string"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the current animation bone mode for the entire unit."
            },
            "num_meshes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of meshes in the unit."
            },
            "set_decal_custom_params":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","id","params"]
                }],
              "desc":"Stores a custom [Vector3] in the W-component of the instance transform matrix."
            },
            "set_local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","i","rotation"]
                }],
              "desc":"Sets the local rotation of a node in the unit."
            },
            "is_a":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","name"]
                }],
              "desc":"Indicates whether or not the unit is a resource of type *name*."
            },
            "set_animation_merge_options":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,number)+"],
                  "rets":["nil"],
                  "args":["unit","parameters"]
                }],
              "desc":"Controls the settings used to merge evaluations of the same animation that are playing close in time."
            },
            "set_visibility":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","boolean"],
                  "rets":["nil"],
                  "args":["unit","group","visibility"]
                }],
              "desc":"Sets the visibility of all objects included in the specified visibility group."
            },
            "set_animation_root_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","mode"]
                }],
              "desc":"Sets the way in which animations can update the root node of a unit."
            },
            "copy_scene_graph_local_from":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","stingray.Unit"],
                  "rets":["nil"],
                  "args":["dest_unit","src_unit"]
                }],
              "desc":"Copies all local matrices from the source unit *src_unit* to the destination unit *dest_unit*,\n\t\texcept for the root node."
            },
            "reload_flow":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Reloads the unit's flow."
            },
            "set_shader_pass_flag_for_meshes_in_unit_and_childs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","boolean"],
                  "rets":["nil"],
                  "args":["unit","flag","enabled"]
                }],
              "desc":""
            },
            "flow_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["string"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the value of the flow variable with the specified name."
            },
            "destroy_vehicle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Destroys the unit's [Vehicle], if one exists."
            },
            "scene_graph_parent":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["integer"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the parent of a node in the unit's scene graph."
            },
            "num_scene_graph_items":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of nodes in the unit's scene graph."
            },
            "has_light":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","light"]
                }],
              "desc":"Indicates whether or not the unit contains a light with the specified name."
            },
            "set_vector4_for_material_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string[]","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["unit","materials","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "set_mover":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)?"],
                  "rets":["stingray.Mover?"],
                  "args":["unit","mover"]
                }],
              "desc":"Sets the unit to use the mover with the specified name or index."
            },
            "set_frozen":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","freeze"]
                }],
              "desc":"Makes the unit \"frozen\" or \"unfrozen\"."
            },
            "enable_physics":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Re-enables the physics system for the unit, if it has been previously disabled."
            },
            "set_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string?","string?"],
                  "rets":["nil"],
                  "args":["unit","slot_name","material_name","suppress_warning"]
                }],
              "desc":"Set a material for a material slot for the specified unit."
            },
            "disable_physics":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Disables all physics for the unit."
            },
            "set_moving":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["nil"],
                  "args":["unit","frames"]
                }],
              "desc":"Marks the unit as moving for the specified number of frames, meaning that the world will update the unit's\n\t\tposition automatically."
            },
            "create_joint":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["userdata"],
                  "args":["unit","name"]
                }],
              "desc":"Creates a physics joint with the specified name, if it has not been created already in the unit."
            },
            "set_unit_visibility":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","visibility"]
                }],
              "desc":"Sets the visibility of all meshes in the unit."
            },
            "destroy_joint":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","name"]
                }],
              "desc":"Destroys a joint with the specified name, if it has been created previously in the unit."
            },
            "num_movers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of movers in the unit."
            },
            "set_mesh_visibility":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)","string?"],
                  "rets":["nil"],
                  "args":["unit","mesh","context"]
                }],
              "desc":"Sets the visibility of the specified [Mesh]."
            },
            "set_animation_bone_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","mode"]
                }],
              "desc":"Sets the way animations can update the bone nodes of a unit."
            },
            "set_vector2_for_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","vector2"],
                  "rets":["nil"],
                  "args":["unit","material","material_variable","value"]
                }],
              "desc":"Sets a scalar value in all of the meshes materials."
            },
            "node":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the index of the object node that matches the specified name."
            },
            "set_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","string","string","number"],
                  "rets":["nil"],
                  "args":["unit","properties","properties","properties","value"]
                },{
                  "types":["stingray.Unit","string","string","number"],
                  "rets":["nil"],
                  "args":["unit","properties","properties","value"]
                },{
                  "types":["stingray.Unit","string","number"],
                  "rets":["nil"],
                  "args":["unit","properties","value"]
                }],
              "desc":"Sets the value of a property on a unit, or on any object owned by the unit, such as a material,\n\t\tmesh or light."
            },
            "find_mover":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["integer?"],
                  "args":["unit","name"]
                }],
              "desc":"Retrieves the index of the [Mover] with the specified name."
            },
            "is_frozen":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["boolean"],
                  "args":["unit"]
                }],
              "desc":"Returns false for units unless you've called Unit."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(integer,string)+"],
                  "rets":["any"],
                  "args":["unit","indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the unit's script data object from the unit."
            },
            "local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["unit","i"]
                }],
              "desc":"Retrieves the local scale of a node in the unit."
            },
            "apply_initial_actor_velocities":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","wake_sleeping_actors"]
                }],
              "desc":"Applies any initial velocities that have been defined for actors inside this unit."
            },
            "num_cameras":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of cameras in the unit."
            },
            "light":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Light"],
                  "args":["unit","light"]
                }],
              "desc":"Retrieves the specified light owned by the unit."
            },
            "is_crossfading_animation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["boolean"],
                  "args":["unit"]
                }],
              "desc":"Indicates whether or not the unit is currently crossfading any animation."
            },
            "animation_get_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["unit","index"]
                }],
              "desc":"Retrieves the value of a constraint target from the unit's animation state machine."
            },
            "disable_animation_state_machine":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit"]
                }],
              "desc":"Disables the unit's animation state machine, so that you can control its blender directly\n\t\twith [crossfade_animation()] and its related functions."
            },
            "has_animation_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","event"]
                }],
              "desc":"Indicates whether or not the specified unit has the named animation event."
            },
            "set_animation_logging":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["unit","enabled"]
                }],
              "desc":"Determines whether or not animation state machine events will be logged to the command console."
            },
            "id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["number?"],
                  "args":["unit"]
                }],
              "desc":"Deprecated; Retrieves a unique ID for the unit within its level."
            },
            "animation_has_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["boolean"],
                  "args":["unit","name"]
                }],
              "desc":"Finds the index of a specified variable in the unit's animation state machine."
            },
            "animation_get_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","integer"],
                  "rets":["number"],
                  "args":["unit","index"]
                }],
              "desc":"Retrieves the value of a specified variable from the unit's animation state machine."
            },
            "animation_event_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Return the number of animation event names."
            },
            "num_cloths":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the number of Apex cloths in the unit."
            },
            "create_vehicle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["stingray.Vehicle"],
                  "args":["unit"]
                }],
              "desc":"Creates a [Vehicle] in the unit, if it has not been created already."
            },
            "has_animation_state_machine":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["boolean"],
                  "args":["unit"]
                }],
              "desc":"Indicates whether or not the specified unit has an animation state machine."
            },
            "get_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string)"],
                  "rets":["number"],
                  "args":["unit","properties"]
                }],
              "desc":"Retrieves the value of a property on a unit, or on any object owned by the unit, such as a material,\n\t\tmesh or light."
            },
            "flow_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","name"]
                }],
              "desc":"Triggers the external event with the specified name in the unit's flow graph."
            },
            "mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","any(string,integer)"],
                  "rets":["stingray.Mesh"],
                  "args":["unit","mesh"]
                }],
              "desc":"Retrieves the specified mesh owned by the unit."
            },
            "set_vector2_for_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["unit","variable","vector2"]
                }],
              "desc":"Sets a two-dimensional vector variable in all mesh materials in unit."
            },
            "animation_get_state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["any(integer,nil)+"],
                  "args":["unit"]
                }],
              "desc":"Retrieves the current animation state of the unit as a tuple of data."
            }
          },
          "desc":""
        },
        "GwNavWorld":{
          "type":"object",
          "members":{
            "kick_async_update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","delta_time"]
                }],
              "desc":"causes the World to be updated on a worker thread."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","delta_time"]
                }],
              "desc":"Updates the specified [GwNavWorld]."
            },
            "register_tagvolume_for_crowd_dispersion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.GwNavTagVolume"],
                  "rets":["nil"],
                  "args":["nav_world","tag_volume"]
                }],
              "desc":"This functions registers a [GwNavTagVolume] for Crowd Dispersion."
            },
            "remove_navdata":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","string"],
                  "rets":["nil"],
                  "args":["nav_world","navdata"]
                }],
              "desc":"Removes the NavData from the specified [GwNavWorld]."
            },
            "database_tile_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["integer"],
                  "args":["nav_world"]
                }],
              "desc":"Returns the number of tiles in the database visual representation of the specified [GwNavWorld]."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["nil"],
                  "args":["nav_world"]
                },{
                  "types":["stingray.GwNavBot"],
                  "rets":["nil"],
                  "args":["nav_bot"]
                }],
              "desc":"Destroys the specified [GwNavWorld]."
            },
            "set_dynamicnavmesh_budget":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","budget"]
                }],
              "desc":"Sets the budget per frame, in seconds for this world."
            },
            "register_all_navgraphedges_for_crowd_dispersion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.GwNavGraph"],
                  "rets":["nil"],
                  "args":["nav_world","nav_graph"]
                }],
              "desc":"This functions registers a [GwNavGraph] for Crowd Dispersion."
            },
            "init_visual_debug_server":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","server_port"]
                }],
              "desc":"Starts the visual debug server for the specified [GwNavWorld] with the specified port."
            },
            "enable_crowd_dispersion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["nil"],
                  "args":["nav_world"]
                }],
              "desc":"This functions enables crowd dispersion for a GwNavWorld."
            },
            "database_triangle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","integer","integer"],
                  "rets":["stingray.Vector3?","stingray.Vector3?","stingray.Vector3?","stingray.Quaternion?"],
                  "args":["nav_world","tile_index","triangle_index"]
                }],
              "desc":""
            },
            "set_visual_debug_camera_transform":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["nav_world","position","look_at","up"]
                }],
              "desc":"It is possible to control the camera in the visual debugger via this function."
            },
            "database_tile_triangle_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","integer"],
                  "rets":["integer"],
                  "args":["nav_world","tile_index"]
                }],
              "desc":"Returns the number of triangles in the given tile in the database visual representation of the specified [GwNavWorld]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4?"],
                  "rets":["stingray.GwNavWorld"],
                  "args":["transform"]
                }],
              "desc":"Creates and returns a new GwNavWorld."
            },
            "forbid_smartobject":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","smartobject_id"]
                }],
              "desc":"This functions forbids a smartobject to be traversed, if the cost was set via set_smartobject_cost_multiplier() it will remain if allow_smartobject() is called afterwards."
            },
            "set_smartobject_cost_multiplier":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number","number"],
                  "rets":["nil"],
                  "args":["nav_world","smartobject_id","cost_multiplier"]
                }],
              "desc":"This functions allows us to specify which cost multiplier must be used when traversing a given smartobject."
            },
            "build_database_visual_representation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["nil"],
                  "args":["nav_world"]
                }],
              "desc":"Rebuilds the debug rendering representation of the database for the specified [GwNavWorld]."
            },
            "init_async_update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["nil"],
                  "args":["nav_world"]
                }],
              "desc":"causes the World to create a worker thread."
            },
            "set_pathfinder_budget":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","budget"]
                }],
              "desc":"Sets the budget per frame, in seconds for this world."
            },
            "allow_smartobject":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","smartobject_id"]
                }],
              "desc":"This functions allows a smartobject to be traversed."
            },
            "add_navdata":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","string"],
                  "rets":["lightuserdata"],
                  "args":["nav_world","navdata"]
                }],
              "desc":"Adds the NavData to the specified [GwNavWorld]."
            },
            "join_async_update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["nil"],
                  "args":["nav_world"]
                }],
              "desc":"Blocks until the async update started by kick_update() has finished."
            },
            "unset_smartobject":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number"],
                  "rets":["nil"],
                  "args":["nav_world","smartobject_id"]
                }],
              "desc":"This functions allows to remove a smartobject from the world' smartobject table."
            }
          },
          "desc":""
        },
        "ActorComponent":{
          "type":"object",
          "members":{
            "create_plane":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ActorComponent","stingray.Entity","stingray.Matrix4x4","stingray.Vector3","string","string","string"],
                  "rets":["integer"],
                  "args":["ac","entity","pose","normal","actor_template","shape_template","material_template"]
                }],
              "desc":"Creates an actor with a plane shape."
            },
            "create_capsule":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ActorComponent","stingray.Entity","stingray.Matrix4x4","number","number","string","string","string"],
                  "rets":["integer"],
                  "args":["ac","entity","pose","radius","height","actor_template","shape_template","material_template"]
                }],
              "desc":"Creates an actor with a capsule shape."
            },
            "create_sphere":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ActorComponent","stingray.Entity","stingray.Matrix4x4","number","string","string","string"],
                  "rets":["integer"],
                  "args":["ac","entity","pose","radius","actor_template","shape_template","material_template"]
                },{
                  "types":["stingray.ActorComponent","stingray.Entity","stingray.Matrix4x4","stingray.Vector3","string","string","string"],
                  "rets":["integer"],
                  "args":["ac","entity","pose","radius","actor_template","shape_template","material_template"]
                }],
              "desc":"Creates an actor with a sphere shape."
            }
          },
          "desc":""
        },
        "Mesh":{
          "type":"object",
          "members":{
            "bounding_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh"],
                  "rets":["stingray.BoundingVolume"],
                  "args":["mesh"]
                }],
              "desc":"Returns the bounding volume of the mesh."
            },
            "box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh"],
                  "rets":["stingray.Matrix4x4","stingray.Vector3"],
                  "args":["mesh"]
                }],
              "desc":"Returns an oriented bounding box that encloses all the vertices in the mesh."
            },
            "set_shader_pass_flag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh","string","boolean"],
                  "rets":["nil"],
                  "args":["mesh","flag","enabled"]
                }],
              "desc":"Determines whether or not the specified shader pass is enabled for the mesh."
            },
            "set_explicit_sort_value":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh","integer"],
                  "rets":["nil"],
                  "args":["mesh","sort_value"]
                }],
              "desc":"Sets an explicit sort value for the mesh in the range [0-65535]."
            },
            "material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh","any(integer,string)"],
                  "rets":["stingray.Material"],
                  "args":["mesh","ID"]
                }],
              "desc":"Returns the specified material in the mesh."
            },
            "num_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh"],
                  "rets":["integer"],
                  "args":["mesh"]
                }],
              "desc":"Returns the number of materials assigned to the mesh."
            },
            "has_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mesh","string"],
                  "rets":["boolean"],
                  "args":["mesh","name"]
                }],
              "desc":"Indicates whether or not the mesh contains the specfied material."
            }
          },
          "desc":""
        },
        "Light":{
          "type":"object",
          "members":{
            "falloff_end":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the distance at which the light has reached zero intensity."
            },
            "set_baked":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","boolean"],
                  "rets":["nil"],
                  "args":["light","enabled"]
                }],
              "desc":""
            },
            "set_intensity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","intensity"]
                }],
              "desc":"Sets the intensity of the light."
            },
            "casts_shadows":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["boolean"],
                  "args":["light"]
                }],
              "desc":"Indicates whether or not the light casts shadows."
            },
            "set_casts_shadows":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","boolean"],
                  "rets":["nil"],
                  "args":["light","enabled"]
                }],
              "desc":"Determines whether or not the light casts shadows."
            },
            "set_falloff_end":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","distance"]
                }],
              "desc":"Sets the distance at which the light should reach zero intensity."
            },
            "set_falloff_start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","distance"]
                }],
              "desc":"Sets the distance at which the light start to fall off: i."
            },
            "set_volumetric_intensity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","intensity"]
                }],
              "desc":"Sets the intensity of the light."
            },
            "type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["string"],
                  "args":["light"]
                }],
              "desc":"Retrieves the type of the light source."
            },
            "intensity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the intensity of the light."
            },
            "set_type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","string"],
                  "rets":["nil"],
                  "args":["light","type"]
                }],
              "desc":"Sets the type of the light source."
            },
            "falloff_start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the distance at which the light starts to fall off: i."
            },
            "set_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","boolean"],
                  "rets":["nil"],
                  "args":["light","enabled"]
                }],
              "desc":"Turns the light on or off."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","stingray.Light","stingray.Light"],
                  "rets":["nil"],
                  "args":["unit","src","dst"]
                }],
              "desc":"Sets the data of one light to another light in the unit."
            },
            "falloff_exponent":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the s."
            },
            "set_color":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["light","color"]
                }],
              "desc":"Sets the color of the light."
            },
            "spot_angle_start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the cone angle at which the light starts to fall off."
            },
            "set_spot_angle_start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","spot_angle_start"]
                }],
              "desc":"Sets the cone angle at which the light starts to fall off."
            },
            "set_spot_angle_end":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","spot_angle_end"]
                }],
              "desc":"Sets the cone angle at which the light has reached zero intensity."
            },
            "set_falloff_exponent":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light","number"],
                  "rets":["nil"],
                  "args":["light","exponent"]
                }],
              "desc":"Sets the exponent that determines the rate at which the light dims with distance."
            },
            "color":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["stingray.Vector3"],
                  "args":["light"]
                }],
              "desc":"Retrieves the color of the light."
            },
            "spot_angle_end":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["number"],
                  "args":["light"]
                }],
              "desc":"Retrieves the cone angle at which the light has reached zero intensity."
            },
            "baked":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Light"],
                  "rets":["boolean"],
                  "args":["light"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "REST":{
          "type":"object",
          "members":{
            "post":{
              "type":"function",
              "signatures":[{
                  "types":["string","string","string"],
                  "rets":["integer"],
                  "args":["uri","request","content_type"]
                }],
              "desc":""
            },
            "destroy_request":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":""
            },
            "set_headers":{
              "type":"function",
              "signatures":[{
                  "types":["string[]"],
                  "rets":["nil"],
                  "args":["headers"]
                }],
              "desc":""
            },
            "init":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "shutdown":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "is_request_done":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["any*"],
                  "args":["id"]
                }],
              "desc":""
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "get":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["uri"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "MultiplayerSession":{
          "type":"object",
          "members":{
            "WORKING":{
              "desc":"integer = <internal>\nThe session is waiting for an asynchronous job to be completed.",
              "type":"constant"
            },
            "custom_property_json":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string"],
                  "rets":["integer"],
                  "args":["session_id","custom_property_key"]
                }],
              "desc":"Start an asynchronous request for getting a custom property of the session."
            },
            "invite_friends":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer","integer","string?"],
                  "rets":["nil"],
                  "args":["user_id","session_id","min_selection","max_selection","custom_invite_id"]
                }],
              "desc":"Open the system UI to select friends and send them an invite."
            },
            "group_id":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["session_id"]
                }],
              "desc":""
            },
            "leave":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["session_id"]
                }],
              "desc":"This will start the asynchronous job of leaving the supplied session."
            },
            "BROKEN":{
              "desc":"integer = <internal>\nAn error occurred during an asynchronous job.",
              "type":"constant"
            },
            "SHUTDOWN":{
              "desc":"integer = <internal>\nThe session has completed its asynchronous shutdown tasks and is waiting to be freed.",
              "type":"constant"
            },
            "smartmatch_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string","string","number"],
                  "args":["session_id"]
                }],
              "desc":"Returns the session found with SmartMatch matchmaking."
            },
            "has_session_changed":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["session_id"]
                }],
              "desc":"Returns if the session have changed since last time called."
            },
            "session_uri_to_description":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string","string"],
                  "args":["session_uri"]
                }],
              "desc":""
            },
            "host_peer":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string?"],
                  "args":["session_id"]
                }],
              "desc":""
            },
            "READY":{
              "desc":"integer = <internal>\nThe session is idle and can be interacted with.",
              "type":"constant"
            },
            "set_current_user_member_custom_property_json":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string"],
                  "rets":["nil"],
                  "args":["session_id","custom_property_key","custom_property_json"]
                }],
              "desc":"Set the value asynchronously, simply ensure that the session is ready prior to calling this function."
            },
            "free_custom_property_json":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["session_lookup_id"]
                }],
              "desc":"Frees the resources beloging to the asynchronous task started with [stingray."
            },
            "invite_friends_list":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","string[]","string?"],
                  "rets":["nil"],
                  "args":["user_id","session_id","friend_xuids","custom_invite_id"]
                }],
              "desc":"This will start the asynchronous job of sending game invites to friends without opening the system ui."
            },
            "set_closed":{
              "type":"function",
              "signatures":[{
                  "types":["integer","boolean"],
                  "rets":["nil"],
                  "args":["session_id","closed"]
                }],
              "desc":"Set the value asynchronously, simply ensure that the session is ready prior to call this function."
            },
            "custom_property_json_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string"],
                  "args":["session_lookup_id"]
                }],
              "desc":""
            },
            "keywords":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string[]"],
                  "args":["session_id"]
                }],
              "desc":""
            },
            "smartmatch_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["session_id"]
                }],
              "desc":"Returns the current SmartMatch status."
            },
            "session_id_to_uri":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string"],
                  "args":["session_id"]
                }],
              "desc":""
            },
            "custom_property_json_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["session_lookup_id"]
                }],
              "desc":""
            },
            "set_keywords":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","string[]?"],
                  "rets":["nil"],
                  "args":["user_id","session_id","session_keywords"]
                }],
              "desc":"Starts the asynchronous job of setting session keywords."
            },
            "start_smartmatch":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","number","integer","string?"],
                  "rets":["nil"],
                  "args":["session_id","hopper_name","timeout","preserve_mode","ticket_attributes_json"]
                }],
              "desc":"Starts the asynchronous job of creating a SmartMatch matchmaking ticket."
            },
            "start_smartmatch_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string","number"],
                  "args":["session_id"]
                }],
              "desc":"Returns the result from starting the matchmaking ticket."
            },
            "set_custom_property_json":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string"],
                  "rets":["nil"],
                  "args":["session_id","custom_property_key","custom_property_json"]
                }],
              "desc":"Set the value asynchronously, simply ensure that the session is ready prior to call this function."
            },
            "delete_smartmatch_ticket":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string"],
                  "rets":["nil"],
                  "args":["session_id","hopper_name","ticket_id"]
                }],
              "desc":"Starts the asynchronous job of deleting a SmartMatch matchmaking."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["session_member[]"],
                  "args":["session_id"]
                }],
              "desc":""
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["session_id"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "Friends":{
          "type":"object",
          "members":{
            "IGNORED_FRIEND_FLAG":{
              "desc":"integer = 512\nIgnored friends.",
              "type":"constant"
            },
            "LOOKING_TO_PLAY":{
              "desc":"integer = <internal>\nLooking to play.",
              "type":"constant"
            },
            "SUGGESTED_FLAG":{
              "desc":"integer = 1024\nSuggested friends.",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Retrieves the online status of the specified player."
            },
            "REQUEST_INITIATOR":{
              "desc":"integer = <internal>\nPlayer requesting friendship.",
              "type":"constant"
            },
            "REQUESTING_FRIENDSHIP_FLAG":{
              "desc":"integer = 32\nPlayers requesting friendship.",
              "type":"constant"
            },
            "num_friends":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["integer"],
                  "args":["category_mask"]
                }],
              "desc":"Returns the number of friends in the specified categories."
            },
            "playing_game":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["steam_friend_game_info?"],
                  "args":["id"]
                }],
              "desc":"Retrieves information about the game the specified player is currently playing."
            },
            "boot_invite":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer","string"],
                  "args":[]
                }],
              "desc":"Checks whether or not this game was booted from an invite."
            },
            "FRIEND":{
              "desc":"integer = <internal>\nFriend.",
              "type":"constant"
            },
            "next_invite":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer","string","string","string"],
                  "args":[]
                }],
              "desc":"Checks whether this player has received an invitation to join a game from a friend."
            },
            "BLOCKED_FLAG":{
              "desc":"integer = 1\nBlocked friends.",
              "type":"constant"
            },
            "AWAY":{
              "desc":"integer = <internal>\nAway.",
              "type":"constant"
            },
            "name":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string"],
                  "args":["id"]
                }],
              "desc":"Retrieves the name of a friend using a specified Steam ID."
            },
            "BLOCKED":{
              "desc":"integer = <internal>\nBlocked friend.",
              "type":"constant"
            },
            "NO_INVITE":{
              "desc":"integer = <internal>\nNo invite.",
              "type":"constant"
            },
            "NONE":{
              "desc":"integer = <internal>\nNon-friend.",
              "type":"constant"
            },
            "IGNORED":{
              "desc":"integer = <internal>\nIgnored player.",
              "type":"constant"
            },
            "IGNORED_FRIEND":{
              "desc":"integer = <internal>\nIgnored friend.",
              "type":"constant"
            },
            "IGNORED_FLAG":{
              "desc":"integer = 256\nIgnored players.",
              "type":"constant"
            },
            "FRIENDSHIP_REQUESTED_FLAG":{
              "desc":"integer = 2\nFriends requested.",
              "type":"constant"
            },
            "in_category":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["boolean"],
                  "args":["id","category"]
                }],
              "desc":"Indicates whether or not the specified player is in the specified category of friends."
            },
            "CLAN_MEMBER_FLAG":{
              "desc":"integer = 8\nClan members.",
              "type":"constant"
            },
            "REQUESTING_INFO_FLAG":{
              "desc":"integer = 128\nRequesting info.",
              "type":"constant"
            },
            "FRIEND_FLAG":{
              "desc":"integer = 4\nFriends.",
              "type":"constant"
            },
            "OFFLINE":{
              "desc":"integer = <internal>\nOffline.",
              "type":"constant"
            },
            "invite":{
              "type":"function",
              "signatures":[{
                  "types":["string","any(stingray.SteamLobby,string)","string?","string?"],
                  "rets":["nil"],
                  "args":["id","game","extra_params","password"]
                }],
              "desc":"Sends an invitation to the user with the specified ID to join a lobby or game server."
            },
            "TRADING":{
              "desc":"integer = <internal>\nTrading.",
              "type":"constant"
            },
            "ON_GAME_SERVER_FLAG":{
              "desc":"integer = 16\nPlayers on a game server.",
              "type":"constant"
            },
            "INVITE_LOBBY":{
              "desc":"integer = <internal>\nInvite to lobby.",
              "type":"constant"
            },
            "id":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string"],
                  "args":["index"]
                }],
              "desc":"Retrieves the Steam ID of a specified friend from the list of friends in the categories specified for the\n\tlast call to [Friends."
            },
            "REQUEST_RECIPIENT":{
              "desc":"integer = <internal>\nFriend requested.",
              "type":"constant"
            },
            "BUSY":{
              "desc":"integer = <internal>\nBusy.",
              "type":"constant"
            },
            "SUGGESTED":{
              "desc":"integer = <internal>\nSuggested friend.",
              "type":"constant"
            },
            "SNOOZE":{
              "desc":"integer = <internal>\nSnoozing.",
              "type":"constant"
            },
            "INVITE_SERVER":{
              "desc":"integer = <internal>\nInvite to server.",
              "type":"constant"
            },
            "ONLINE":{
              "desc":"integer = <internal>\nOnline.",
              "type":"constant"
            },
            "relationship":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Retrieves the relationship to the player with the specified ID."
            }
          },
          "desc":""
        },
        "Social":{
          "type":"object",
          "members":{
            "last_social_events":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer*"],
                  "args":[]
                }],
              "desc":"Returns the events from the SocialManager that has happened since last time this function was called."
            },
            "core_social_group":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["social_user*"],
                  "args":["user_id"]
                }],
              "desc":"Returns the core social group for the specified user."
            },
            "add_local_user_to_graph":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":"Adds the user to the SocialMananager."
            },
            "remove_social_group":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["social_group_id"]
                }],
              "desc":"Removes the specified social group from the SocialManager."
            },
            "remove_local_user_from_graph":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":"Removes the user from the SocialManager."
            },
            "create_filtered_social_group":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer"],
                  "rets":["integer"],
                  "args":["user_id","presence_filter","relationship_filter"]
                }],
              "desc":"Adds a social group with the supplied filters to the SocialManager."
            },
            "social_group":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["social_user*"],
                  "args":["social_group_id"]
                }],
              "desc":"Returns the specified social group created with [stingray."
            }
          },
          "desc":""
        },
        "LevelResource":{
          "type":"object",
          "members":{
            "unit_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["level_resource","unit_index"]
                }],
              "desc":"Returns the local position of the unit with the specified index inside the named level resource."
            },
            "nested_level_object_set_names":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["string[]"],
                  "args":["level_resource","wanted_id"]
                }],
              "desc":"Returns a list of object set names defined inside the named level resource's wanted_id's nested level, or none if it doesn't exist."
            },
            "unit_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","integer"],
                  "rets":["stingray.DynamicData"],
                  "args":["level_resource","index"]
                }],
              "desc":"Returns a [DynamicData] object for a unit inside a level resource, which can\n\t\tbe queried by calling [DynamicData."
            },
            "nested_level_unit_indices_in_object_set":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer","string"],
                  "rets":["integer[]"],
                  "args":["level_resource","wanted_id","object_set_name"]
                }],
              "desc":"Returns a list of all unit indices that belong to the specified object set inside the named level resource's nested level wanted_id, or none if it doesn't exist."
            },
            "nested_level_count":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["level_resource"]
                }],
              "desc":"Returns the amount of nested levels in a level resource."
            },
            "destroy_navigation_mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","stingray.NavigationMesh"],
                  "rets":["nil"],
                  "args":["level_resource","mesh"]
                }],
              "desc":"Destroys a navigation mesh that was obtained by calling [create_navigation_mesh()]."
            },
            "create_navigation_mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource"],
                  "rets":["stingray.NavigationMesh"],
                  "args":["level_resource"]
                }],
              "desc":"Instantiates a new navigation mesh from the shared navigation mesh resource inside the named level\n\t\tresource."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource"],
                  "rets":["stingray.DynamicData"],
                  "args":["level_resource"]
                }],
              "desc":"Returns a [DynamicData] object for the level, which can be queried by calling [DynamicData."
            },
            "nested_level_resource_name":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["string"],
                  "args":["level_resource","index"]
                }],
              "desc":""
            },
            "object_set_names":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource"],
                  "rets":["string[]"],
                  "args":["level_resource"]
                }],
              "desc":"Returns a list of object set names defined inside the named level resource."
            },
            "unit_indices_in_object_set":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","string"],
                  "rets":["integer[]"],
                  "args":["level_resource","object_set_name"]
                }],
              "desc":"Returns a list of all unit indices that belong to the specified object set inside the named level resource."
            },
            "unit_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["level_resource","unit_index"]
                }],
              "desc":"Returns the local rotation of the unit with the specified index inside the named level resource."
            },
            "unit_indices":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LevelResource","string"],
                  "rets":["integer[]"],
                  "args":["level_resource","unit_name"]
                }],
              "desc":"Returns a list of unit indices that match the specified unit resource name inside the named level resource."
            }
          },
          "desc":""
        },
        "Gui":{
          "type":"object",
          "members":{
            "text_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string","number","string","stingray.Matrix4x4","stingray.Vector3","integer","color?","string?"],
                  "rets":["integer"],
                  "args":["gui","text","font","font_size","material","tm","pos","layer","color","options"]
                }],
              "desc":"This function is similar to [Gui."
            },
            "destroy_text":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "triangle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","stingray.Vector3","stingray.Vector3","stingray.Vector3","integer","color?","vector2?","vector2?","vector2?"],
                  "rets":["integer"],
                  "args":["gui","p1","p2","p3","layer","color","uv0","uv1","uv2"]
                }],
              "desc":"Creates (or draws) a triangle in the gui."
            },
            "destroy_video":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "resolution":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Viewport?","stingray.Window?"],
                  "rets":["number","number"],
                  "args":["viewport","window"]
                }],
              "desc":"Returns the width and height of pixels that can be used in a screen gui when rendering into the specified viewport."
            },
            "rect_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","tm","pos","layer","size","color"]
                }],
              "desc":"This function is similar to [Gui."
            },
            "destroy_video_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "update_triangle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","stingray.Vector3","stingray.Vector3","stingray.Vector3","integer","color?"],
                  "rets":["nil"],
                  "args":["gui","id","p1","p2","p3","layer","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "update_bitmap_uv":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","vector2","vector2","stingray.Vector3","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","uv_00","uv_11","pos","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "move":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["gui","pose"]
                },{
                  "types":["stingray.Gui","number","number"],
                  "rets":["nil"],
                  "args":["gui","x","y"]
                }],
              "desc":"Moves a world-positioned [Gui] object to a different position and rotation in the 3D game world."
            },
            "update_bitmap":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","stingray.Vector3","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","pos","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "text":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string","number","string","stingray.Vector3","color?","string?"],
                  "rets":["integer"],
                  "args":["gui","text","font","font_size","material","pos","color","options"]
                }],
              "desc":"Draws a single line of text."
            },
            "rect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","stingray.Vector3","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","pos","size","color"]
                }],
              "desc":"Creates (or draws in the immediate mode) a rectangle in the gui."
            },
            "update_video":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","stingray.VideoPlayer","stingray.Vector3","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","video_player","pos","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "bitmap_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","tm","pos","layer","size","color"]
                }],
              "desc":"This function is similar to [Gui."
            },
            "has_all_glyphs":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string"],
                  "rets":["boolean"],
                  "args":["gui","text","font"]
                }],
              "desc":"Returns true if the font has all the glyphs in the specified text."
            },
            "update_bitmap_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","tm","pos","layer","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "destroy_bitmap_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "clone_material_from_template":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string"],
                  "rets":["stingray.Material"],
                  "args":["gui","cloned_material","template_material"]
                }],
              "desc":"Returns the material assigned to this [Gui] from the specified *."
            },
            "bitmap_uv":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","vector2","vector2","stingray.Vector3","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","uv_00","uv_11","pos","size","color"]
                }],
              "desc":"Creates (or draws) a bitmap using the specified UV-coordinates for the top left and bottom right corner."
            },
            "destroy_rect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "update_video_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","stingray.VideoPlayer","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","video_player","tm","pos","layer","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "update_bitmap_3d_uv":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","vector2","vector2","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","material","uv_00","uv_11","tm","pos","layer","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string"],
                  "rets":["stingray.Material"],
                  "args":["gui","material"]
                }],
              "desc":"Returns the material assigned to this [Gui] from the specified *."
            },
            "destroy_bitmap":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "word_wrap":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string","number","number","string","string","string","boolean","string?"],
                  "rets":["table"],
                  "args":["gui","text","font","font_size","width","whitespace","soft_dividers","return_dividers","use_global_table","options"]
                }],
              "desc":"Returns a list of strings that are divided in such a way that each string fits within the specified width."
            },
            "has_video_player":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns \"BINK\", \"IVF\", \"MP4\", or nil depending on what video library was linked with the engine."
            },
            "texture_size":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number","number"],
                  "args":[]
                }],
              "desc":"Gets the width and height a texture resource."
            },
            "text_extents":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","string","number","any(string,number)*"],
                  "rets":["stingray.Vector3","stingray.Vector3","stingray.Vector3"],
                  "args":["gui","text","font","font_size","options"]
                }],
              "desc":"Computes the extents of the text when drawn using the specified font and font_size."
            },
            "update_text":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","string","string","number","stingray.Vector3","color?","string?"],
                  "rets":["nil"],
                  "args":["gui","id","text","font","material","font_size","pos","color","options"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "update_rect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","stingray.Vector3","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","pos","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "video":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","stingray.VideoPlayer","stingray.Vector3","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","video_player","pos","size","color"]
                }],
              "desc":"Creates a rectangle that draws a video."
            },
            "bitmap":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","stingray.Vector3","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","pos","size","color"]
                }],
              "desc":"Creates (or draws) a bitmap with the specified material."
            },
            "update_text_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","string","string","string","number","stingray.Matrix4x4","stingray.Vector3","integer","color?","string?"],
                  "rets":["nil"],
                  "args":["gui","id","text","font","material","font_size","tm","pos","layer","color","options"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "destroy_rect_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "video_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","stingray.VideoPlayer","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","video_player","tm","pos","layer","size","color"]
                }],
              "desc":"This function is similar to [Gui."
            },
            "destroy_triangle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            },
            "update_rect_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["nil"],
                  "args":["gui","id","tm","pos","layer","size","color"]
                }],
              "desc":"In the retained mode, this function updates the object with the specified id."
            },
            "bitmap_3d_uv":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","string","vector2","vector2","stingray.Matrix4x4","stingray.Vector3","integer","vector2","color?"],
                  "rets":["integer"],
                  "args":["gui","material","uv_00","uv_11","tm","pos","layer","size","color"]
                }],
              "desc":"This function is similar to [Gui."
            },
            "destroy_text_3d":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Gui","integer"],
                  "rets":["nil"],
                  "args":["gui","id"]
                }],
              "desc":"In the retained mode, this function destroys the object with the specified id."
            }
          },
          "desc":""
        },
        "ShadingEnvironment":{
          "type":"object",
          "members":{
            "set_scalar":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","number"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","scalar"]
                }],
              "desc":"Sets a scalar variable in the shading environment to the specified value."
            },
            "scalar":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string"],
                  "rets":["number"],
                  "args":["shading_environment","variable"]
                }],
              "desc":"Returns the value of the specified scalar variable in the shading environment."
            },
            "array_scalar":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer"],
                  "rets":["number"],
                  "args":["shading_environment","variable","n"]
                }],
              "desc":"Returns the scalar value stored at the specified index of the specified array variable in the shading environment."
            },
            "array_vector2":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["shading_environment","variable","n"]
                }],
              "desc":"Returns the two-dimensional vector value stored at the specified index of the specified array variable in the shading environment."
            },
            "array_vector3":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["shading_environment","variable","n"]
                }],
              "desc":"Returns the three-dimensional vector value stored at the specified index of the specified array variable in the shading environment."
            },
            "material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","stingray.Material"],
                  "rets":["stingray.Material"],
                  "args":["shading_environment","material_name"]
                }],
              "desc":"Returns the specified material associated with the shading environment."
            },
            "apply":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment"],
                  "rets":["nil"],
                  "args":["shading_environment"]
                }],
              "desc":"Writes the blended result to the materials global shader variables specified\n\t\tin the *."
            },
            "set_vector3":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","vector3"]
                }],
              "desc":"Sets a three-dimensional vector variable in the shading environment to the specified value."
            },
            "set_array_vector3":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","n","vector3"]
                }],
              "desc":"Sets the value at the specified index in the specified array in the shading environment to the specified three-dimensional vector value."
            },
            "blend":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","any(string,number)+"],
                  "rets":["nil"],
                  "args":["shading_environment","settings"]
                }],
              "desc":"Blends between shading environment settings authored in the Lighting Editor."
            },
            "vector4":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string"],
                  "rets":["stingray.Quaternion"],
                  "args":["shading_environment","variable"]
                }],
              "desc":"Returns the value of the specified four-dimensional variable in the shading environment as a quaternion."
            },
            "set_vector2":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","vector2"]
                }],
              "desc":"Sets a two-dimensional vector variable in the shading environment to the specified value."
            },
            "vector2":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string"],
                  "rets":["stingray.Vector3"],
                  "args":["shading_environment","variable"]
                }],
              "desc":"Returns the value of the specified two-dimensional variable in the shading environment."
            },
            "set_array_vector2":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","n","vector2"]
                }],
              "desc":"Sets the value at the specified index in the specified array in the shading environment to the specified two-dimensional vector value."
            },
            "set_array_scalar":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string","integer","number"],
                  "rets":["nil"],
                  "args":["shading_environment","variable","n","value"]
                }],
              "desc":"Sets the value at the specified index in the specified array in the shading environment to the specified scalar value."
            },
            "array_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string"],
                  "rets":["integer"],
                  "args":["shading_environment","variable"]
                }],
              "desc":"Returns the number of elements in the specified array variable in the shading environment."
            },
            "vector3":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ShadingEnvironment","string"],
                  "rets":["stingray.Vector3"],
                  "args":["shading_environment","variable"]
                }],
              "desc":"Returns the value of the specified three-dimensional variable in the shading environment."
            }
          },
          "desc":""
        },
        "Wwise":{
          "type":"namespace",
          "members":{
            "unload_bank":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["resource_name"]
                }],
              "desc":"Unloads the specified sound bank from the Wwise engine."
            },
            "set_volume_threshold":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["threshold"]
                }],
              "desc":"Allows the game to set the volume threshold to be used by the sound engine to determine if \n\t\t\t\t\t a voice must go virtual."
            },
            "position_type":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["event_name"]
                }],
              "desc":"Gets the positioning type of the given event."
            },
            "min_duration":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["event_name"]
                }],
              "desc":"Gets the minimum duration length for the specified event."
            },
            "set_max_num_voices":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["threshold"]
                }],
              "desc":"Sets the given threshold as the maximum number of non virtual voices to be played simultaneously."
            },
            "duration_type":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["event_name"]
                }],
              "desc":"Gets the duration type for the specified event."
            },
            "wwise_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.WwiseWorld"],
                  "args":["world"]
                }],
              "desc":"Returns a pointer to the [WwiseWorld] object that corresponds to the specified Stingray game [World]."
            },
            "set_language":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["language_dir"]
                }],
              "desc":"Sets the current Wwise engine language directory to the given language directory name."
            },
            "set_occlusion_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["enabled"]
                }],
              "desc":""
            },
            "get_timestamp":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":""
            },
            "get_occlusion_enabled":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "load_bank":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["resource_name"]
                }],
              "desc":"Loads the specified sound bank into the Wwise engine."
            },
            "set_panning_rule":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer?"],
                  "rets":["nil"],
                  "args":["rule","type","output_id"]
                }],
              "desc":"Sends a message to set the panning rule to the given settings."
            },
            "max_attenuation":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["event_name"]
                }],
              "desc":"Gets the maximum attenuation distance for the specified event."
            },
            "max_duration":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["event_name"]
                }],
              "desc":"Gets the maximum duration length for the specified event."
            },
            "set_state":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["group","state"]
                }],
              "desc":"Sets the state of a switch group Wwise object."
            },
            "has_event":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["event_name"]
                }],
              "desc":"Indicates if the given event exists in any exported bank."
            }
          },
          "desc":""
        },
        "XboxConnectedStorage":{
          "type":"object",
          "members":{
            "delete":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string"],
                  "rets":["integer"],
                  "args":["storage_id","container"]
                }],
              "desc":"Deletes the specified container from the storage space."
            },
            "submit":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string","table","table"],
                  "rets":["integer"],
                  "args":["storage_id","container","display_name","writes","deletes"]
                }],
              "desc":"Writes data to a container in the storage space."
            },
            "query_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["table"],
                  "args":["query_id"]
                }],
              "desc":"Call this after a query() has completed successfully to get the result of the query operation."
            },
            "CANCELED":{
              "desc":"integer = <internal>\nThe operation was cancelled by the user.",
              "type":"constant"
            },
            "read_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["table"],
                  "args":["read_id"]
                }],
              "desc":"Call this after a read() has completed successfully to get the result of the read operation."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nThe operation is unknown to the system, either because it has never been started or because it has been finished.",
              "type":"constant"
            },
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred while performing the operation.",
              "type":"constant"
            },
            "get_storage_space":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["user_id"]
                }],
              "desc":"Gets the storage space for the specified user."
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has completed successfully.",
              "type":"constant"
            },
            "query":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string?"],
                  "rets":["integer"],
                  "args":["storage_id","container_prefix"]
                }],
              "desc":"Requests information about all containers with the specified prefix."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns the current status of the operation."
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operations is in progress. It has been started but not yet completed.",
              "type":"constant"
            },
            "read":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","table"],
                  "rets":["integer"],
                  "args":["storage_id","container","reads"]
                }],
              "desc":"Reads data from a storage container."
            },
            "finish":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["read_id"]
                }],
              "desc":"Releases all the resources from an operation."
            }
          },
          "desc":""
        },
        "PS4DLC":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "has_fetched_dlcs":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "fetch_owned_dlcs":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Fetches all aquired dlcs for the application, is done on separate thread."
            },
            "is_initialized":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "has_dlc":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["entitlement_key"]
                }],
              "desc":"Check if the dlc is owned."
            }
          },
          "desc":""
        },
        "UrlLoader":{
          "signatures":[{
              "types":[],
              "rets":["stingray.UrlLoader"],
              "args":[]
            }],
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader"],
                  "rets":["nil"],
                  "args":["url_loader"]
                }],
              "desc":"Destroyes an UrlLoader instance."
            },
            "texture":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader","stingray.UrlLoader.Job"],
                  "rets":["stingray.RenderResource"],
                  "args":["url_loader","job"]
                }],
              "desc":""
            },
            "success":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader","stingray.UrlLoader.Job"],
                  "rets":["boolean"],
                  "args":["url_loader","job"]
                }],
              "desc":"Checks if a job was successful."
            },
            "unload":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader","stingray.UrlLoader.Job"],
                  "rets":["nil"],
                  "args":["url_loader","job"]
                }],
              "desc":"Unloads a job token and releases the loaded texture resource."
            },
            "done":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader","stingray.UrlLoader.Job"],
                  "rets":["boolean"],
                  "args":["url_loader","job"]
                }],
              "desc":"Checks if a job is finished processing."
            },
            "load_texture":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader","string","string?","string?","string?"],
                  "rets":["stingray.UrlLoader.Job"],
                  "args":["url_loader","url","cache_key","cache_id","category"]
                }],
              "desc":"Initiates a texture load from url or cache."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UrlLoader"],
                  "rets":["nil"],
                  "args":["url_loader"]
                }],
              "desc":"Updates an UrlLoader instance."
            },
            "Job":{
              "desc":"",
              "type":"object"
            }
          },
          "desc":""
        },
        "DLC":{
          "type":"object",
          "members":{
            "scan_for_dlc":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"This function starts an asynchronous scan that looks for installed DLC content."
            },
            "scan_done":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the previously started scan has finished."
            },
            "scan_result":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["dlc_info[]"],
                  "args":[]
                }],
              "desc":"Returns a list of all installed downloadable content found by the last scan."
            }
          },
          "desc":""
        },
        "SocialEventType":{
          "type":"object",
          "members":{
            "ERROR":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "RTA_DISCONNECT_ERR":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "GRAPH_LOADED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "PRESENCE_CHANGED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "SOCIAL_USERGROUP_LOADED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "USERS_ADDED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "USERS_REMOVED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "PROFILES_CHANGED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "SOCIAL_RELATIONSHIPS_CHANGED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            }
          },
          "desc":""
        },
        "EntityManager":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Entity"],
                  "rets":["nil"],
                  "args":["entity"]
                }],
              "desc":"Destroys the specified entity."
            },
            "scene_graph_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.SceneGraphComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [SceneGraphComponent] of the world."
            },
            "tag_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.TagComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [TagComponent] of the world."
            },
            "set_debug_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Entity","string"],
                  "rets":["nil"],
                  "args":["entity","name"]
                }],
              "desc":"Sets a name for the entity for debugging purposes."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World?"],
                  "rets":["stingray.Entity"],
                  "args":["world"]
                }],
              "desc":"Creates a new blank entity without any components."
            },
            "debug_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Entity"],
                  "rets":["string"],
                  "args":["entity"]
                }],
              "desc":"Returns the name of the entity for debugging purposes."
            },
            "data_component":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.DataComponent"],
                  "args":[]
                }],
              "desc":"Returns the global [DataComponent]."
            },
            "mesh_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.MeshComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [MeshComponent] of the world."
            },
            "alive":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Entity"],
                  "rets":["boolean"],
                  "args":["entity"]
                }],
              "desc":"Checks if an entity is still alive."
            },
            "transform_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.TransformComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [TransformComponent] of the world."
            },
            "animation_state_machine_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.AnimationStateMachineComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [AnimationStateMachineComponent] of the world."
            },
            "animation_blender_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.AnimationBlenderComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [AnimationBlenderComponent] of the world."
            },
            "actor_component":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.ActorComponent"],
                  "args":["world"]
                }],
              "desc":"Returns the [ActorComponent] of the world."
            },
            "spawn":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["stingray.Entity"],
                  "args":["world","entity_resource","position","orientation"]
                },{
                  "types":["stingray.World","string","stingray.Matrix4x4"],
                  "rets":["stingray.Entity"],
                  "args":["world","entity_resource","pose"]
                }],
              "desc":"Spawns an entity from a `."
            }
          },
          "desc":""
        },
        "TerrainDecoration":{
          "type":"object",
          "members":{
            "move_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["world","observer_id","position"]
                }],
              "desc":"Moves the observer to the specified position."
            },
            "destroy_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer"],
                  "rets":["nil"],
                  "args":["world","observer_id"]
                }],
              "desc":"Destroys the observer with the specified index."
            },
            "create_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Vector3"],
                  "rets":["integer"],
                  "args":["world","position"]
                }],
              "desc":"Creates a new decoration observer at the specified position."
            }
          },
          "desc":""
        },
        "StoryTeller":{
          "type":"object",
          "members":{
            "play_level_story":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","stingray.Level","string"],
                  "rets":["integer"],
                  "args":["story_teller","level","name"]
                }],
              "desc":"Starts playing the specified story from the specified level."
            },
            "set_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer","number"],
                  "rets":["nil"],
                  "args":["story_teller","id","speed"]
                }],
              "desc":"Sets the speed at which the story will be played back."
            },
            "PING_PONG":{
              "desc":"integer = <internal>\nWhen the story reaches the end, it will continue to play the story backward until it reaches the beginning,\n\t\tthen continue forward again.",
              "type":"constant"
            },
            "set_loop_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer","integer"],
                  "rets":["nil"],
                  "args":["story_teller","id","mode"]
                }],
              "desc":"Determines what should happen when the story reaches its end, or the end of the loop range."
            },
            "set_time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer","number"],
                  "rets":["nil"],
                  "args":["story_teller","play_id","time"]
                }],
              "desc":"Sets the current time in the playing story with the specified ID."
            },
            "LOOP":{
              "desc":"integer = <internal>\nWhen the story reaches the end, it will loop back to the beginning and continue playing. This is the default mode.",
              "type":"constant"
            },
            "NONE":{
              "desc":"integer = <internal>\nWhen the story reaches the end, it will stop playing. It will not loop back to the beginning.",
              "type":"constant"
            },
            "stop":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer"],
                  "rets":["nil"],
                  "args":["story_teller","id"]
                }],
              "desc":"Stops playing the specified story."
            },
            "time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer"],
                  "rets":["number"],
                  "args":["story_teller","play_id"]
                }],
              "desc":"Returns the current elapsed time in the playing story with the specified ID."
            },
            "story_teller_length":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer"],
                  "rets":["number"],
                  "args":["story_teller","id"]
                }],
              "desc":"Retrieves the length of the specified story."
            },
            "set_loop_range":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer","integer","integer"],
                  "rets":["nil"],
                  "args":["story_teller","id","start","stop"]
                }],
              "desc":"Sets the *start* and *stop* times that mark the range the story should loop over."
            },
            "first_camera":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer"],
                  "rets":["stingray.Camera?"],
                  "args":["story_teller","id"]
                }],
              "desc":"Retrieves the first camera in the story."
            },
            "is_playing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.StoryTeller","integer"],
                  "rets":["boolean"],
                  "args":["story_teller","id"]
                }],
              "desc":"Indicates whether or not the specified story is playing."
            }
          },
          "desc":""
        },
        "RazerChroma":{
          "type":"object",
          "members":{
            "set_keyboard_color":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["red","green","blue"]
                }],
              "desc":""
            },
            "set_key_color":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number"],
                  "rets":["nil"],
                  "args":["key","red","green","blue"]
                }],
              "desc":""
            },
            "set_mouse_color":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["red","green","blue"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "Mod":{
          "type":"object",
          "members":{
            "mods":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer[]"],
                  "args":[]
                }],
              "desc":"Returns a list of indices that identify all the available mods."
            },
            "start_scan":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Starts scanning for mods."
            },
            "is_scanning":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the system is currently scanning for mods."
            },
            "info":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string"],
                  "args":["mod"]
                }],
              "desc":"Returns an information file about the mod."
            },
            "FLOW_SCRIPT_NODES_ENABLED":{
              "desc":"integer = <internal>\nControls whether or not the flow nodes that allows the user to call arbitrary functions (Script Do String, Script Call Global) are enabled or\n\t\tdisabled. Even when disabled, custom script nodes can still be used. The value you set for this option must be a boolean.",
              "type":"constant"
            },
            "resource_package":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string"],
                  "rets":["stingray.ResourcePackage"],
                  "args":["mod","name"]
                }],
              "desc":"Returns the resource package with the specified name from the mod."
            },
            "release_resource_package":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["nil"],
                  "args":["rp"]
                }],
              "desc":"Releases a resource package allocated with [stingray."
            },
            "FLOW_CUSTOM_SCRIPT_TABLES":{
              "desc":"integer = <internal>\nSpecifies the names of the global tables that can be used by custom script nodes. For example, \"FlowCallbacks\".\n\t\tFunctions outside the named tables cannot be called by the custom script flow nodes. If you use an empty list (the default), the custom script\n\t\tflow nodes can call anything. The value you set for this option must be one or more strings.",
              "type":"constant"
            },
            "set_security_options":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string,boolean)+"],
                  "rets":["nil"],
                  "args":["options"]
                }],
              "desc":"Sets the security options for the engine."
            }
          },
          "desc":""
        },
        "RenderResource":{
          "desc":"",
          "type":"object"
        },
        "AnimationStateMachineComponent":{
          "type":"object",
          "members":{
            "set_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer","number"],
                  "rets":["nil"],
                  "args":["asmc","entity","variable","value"]
                }],
              "desc":"Sets the value of the variable to *value*."
            },
            "set_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["asmc","entity","constraint_target","value"]
                },{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["asmc","entity","constraint_target","value"]
                },{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["asmc","entity","constraint_target","value"]
                }],
              "desc":"Sets the transform of the constraint target to the specified transform."
            },
            "get_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["asmc","entity","constraint_target"]
                }],
              "desc":"Sets the value of the variable to *value*."
            },
            "find_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","string"],
                  "rets":["integer"],
                  "args":["asmc","entity","variable"]
                }],
              "desc":"Returns the index of the variable named `variable` in the state machine."
            },
            "find_constraint_target":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","string"],
                  "rets":["integer"],
                  "args":["asmc","entity","constraint_target"]
                }],
              "desc":"Returns the index of the contstraint target named *constraint_target*."
            },
            "trigger_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","string"],
                  "rets":["nil"],
                  "args":["asmc","entity","event"]
                }],
              "desc":"Triggers an event in the animation state machine."
            },
            "get_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","integer"],
                  "rets":["number"],
                  "args":["asmc","entity","variable"]
                }],
              "desc":"Returns the value of the variable with the specified index."
            },
            "set_loogging":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","boolean"],
                  "rets":["nil"],
                  "args":["asmc","entity","logging"]
                }],
              "desc":"Enables or disables logging for a particular animation state machine."
            },
            "has_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationStateMachineComponent","stingray.Entity","string"],
                  "rets":["boolean"],
                  "args":["asmc","entity","event"]
                }],
              "desc":"Returns *true* if the state machine has an event with the specified name."
            }
          },
          "desc":""
        },
        "XboxCallbacks":{
          "type":"object",
          "members":{
            "unregister_callback":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Unregisters a callback that was registered with one of the register_*_callback\n\t\t\t\tfunctions."
            },
            "register_suspending_callback":{
              "type":"function",
              "signatures":[{
                  "types":["fun(nil:nil)"],
                  "rets":["integer"],
                  "args":["callback"]
                }],
              "desc":"Registers a Lua callback function to be called when the app is suspending."
            }
          },
          "desc":""
        },
        "PS4Pad4":{
          "desc":"",
          "type":"object"
        },
        "DisplayAdapter":{
          "type":"object",
          "members":{
            "num_outputs":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["adapter_index"]
                }],
              "desc":"Returns the number of available outputs (screens) for the adapter."
            },
            "name":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string"],
                  "args":["adapter_index"]
                }],
              "desc":"Returns a readable name for the adapter."
            },
            "num_adapters":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the number of available display adapters (GPUs) in the system."
            },
            "mode":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer"],
                  "rets":["integer","integer"],
                  "args":["adapter_index","output_index","mode_index"]
                }],
              "desc":"Returns the resolution (i."
            },
            "num_modes":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["integer"],
                  "args":["adapter_index","output_index"]
                }],
              "desc":"Returns the number of display modes that are supported by a specific output of a display adapter."
            }
          },
          "desc":""
        },
        "SaveSystemDialog":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nEither the save system dialog was either never initialized, or it has already been terminated.",
              "type":"constant"
            },
            "INITIALIZED":{
              "desc":"integer = <internal>\nThe save system dialog is initialized, but no dialog is active.",
              "type":"constant"
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Closes the [SaveSystemDialog]."
            },
            "RUNNING":{
              "desc":"integer = <internal>\nThe save system dialog has started, but not yet finished.",
              "type":"constant"
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Updates and returns the current status of the save system dialog."
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes the save system dialog."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the current status of the save system dialog."
            },
            "FINISHED":{
              "desc":"integer = <internal>\nThe save system dialog has completed.",
              "type":"constant"
            },
            "terminate":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Terminates the save system dialog and frees up the allocated resources."
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["nil"],
                  "args":["required_blocks","user_id"]
                }],
              "desc":"Creates and opens the save system dialog."
            }
          },
          "desc":""
        },
        "PS4Pad1":{
          "desc":"",
          "type":"object"
        },
        "LeaderboardTransactionToken":{
          "desc":"",
          "type":"object"
        },
        "Achievements":{
          "signatures":[{
              "types":["number"],
              "rets":["stingray.Achievements"],
              "args":["user"]
            }],
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Destroys the specified Achievements object."
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Refreshes the specified Achievements object."
            },
            "info":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements","string"],
                  "rets":["table"],
                  "args":["self","id"]
                }],
              "desc":"This function fires an event (e."
            },
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements"],
                  "rets":["boolean"],
                  "args":["self"]
                }],
              "desc":"Indicates whether or not the specified Achievements object has finished refreshing."
            }
          },
          "desc":""
        },
        "Imgui":{
          "type":"object",
          "members":{
            "EndMainMenuBar":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Ends the main menu bar."
            },
            "EndChild":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"End the currently active child window."
            },
            "ColorEdit3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","red","green","blue"]
                }],
              "desc":""
            },
            "CloseCurrentPopup":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "End":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Ends the currently active imgui window."
            },
            "imgui_active":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "ImageButton":{
              "type":"function",
              "signatures":[{
                  "types":["string","number?","number?","number?","number?","number?","number?"],
                  "rets":["boolean"],
                  "args":["texture","width","height","red_tint","green_tint","blue_tint","alpha"]
                }],
              "desc":""
            },
            "TextColored":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["nil"],
                  "args":["text","red","green","blue","alpha"]
                }],
              "desc":""
            },
            "disable_imgui_input_system":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["systems"]
                }],
              "desc":"Disables input systems for imgui, valid systems are Imgui."
            },
            "BeginMenu":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["label"]
                }],
              "desc":"Creates a new menu."
            },
            "BeginPopup":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Begins a popup."
            },
            "InputFloat3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","x","y","z"]
                }],
              "desc":""
            },
            "Dummy":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["nil"],
                  "args":["width","height"]
                }],
              "desc":""
            },
            "Image":{
              "type":"function",
              "signatures":[{
                  "types":["string","number?","number?","number?","number?","number?","number?"],
                  "rets":["nil"],
                  "args":["texture","width","height","red_tint","green_tint","blue_tint","alpha"]
                }],
              "desc":""
            },
            "Button":{
              "type":"function",
              "signatures":[{
                  "types":["string","number?","number?"],
                  "rets":["boolean"],
                  "args":["label","width","height"]
                }],
              "desc":""
            },
            "TreeNode":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["label"]
                }],
              "desc":"Creates a a tree node, need to call Imgui."
            },
            "SameLine":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "EndPopup":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Ends the current popup."
            },
            "DragFloat3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","x","y","z"]
                }],
              "desc":""
            },
            "TreePop":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Pops the current tree node, only call if Imgui."
            },
            "MenuItem":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["label"]
                }],
              "desc":"Creates a new menu item."
            },
            "Begin":{
              "type":"function",
              "signatures":[{
                  "types":["string","boolean?"],
                  "rets":["nil"],
                  "args":["name","menu_bar"]
                }],
              "desc":"Creates a new Imgui window."
            },
            "PlotHistogram":{
              "type":"function",
              "signatures":[{
                  "types":["string","table"],
                  "rets":["nil"],
                  "args":["label","values"]
                }],
              "desc":""
            },
            "ColorPicker3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","red","green","blue"]
                }],
              "desc":""
            },
            "ColorPicker4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","red","green","blue","alpha"]
                }],
              "desc":""
            },
            "Combo":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","table","number?"],
                  "rets":["number"],
                  "args":["label","current_item","values","max_height"]
                }],
              "desc":""
            },
            "SliderFloat4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","x","y","z","w","min","max"]
                }],
              "desc":""
            },
            "OpenPopupOnItemClick":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":""
            },
            "IsPopupOpen":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":""
            },
            "InputInt":{
              "type":"function",
              "signatures":[{
                  "types":["string","number"],
                  "rets":["number"],
                  "args":["label","value"]
                }],
              "desc":""
            },
            "enable_imgui_input_system":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["systems"]
                }],
              "desc":"Enables input systems for imgui, valid systems are Imgui."
            },
            "Spacing":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "SliderFloat3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","x","y","z","min","max"]
                }],
              "desc":""
            },
            "TreePush":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Pushes a new tree node, need to call Imgui."
            },
            "SliderFloat2":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number"],
                  "args":["label","x","y","min","max"]
                }],
              "desc":""
            },
            "InputFloat4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","x","y","z","w"]
                }],
              "desc":""
            },
            "EndToolTip":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "Indent":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                },{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "InputFloat":{
              "type":"function",
              "signatures":[{
                  "types":["string","number"],
                  "rets":["number"],
                  "args":["label","value"]
                }],
              "desc":""
            },
            "PlotLines":{
              "type":"function",
              "signatures":[{
                  "types":["string","table"],
                  "rets":["nil"],
                  "args":["label","values"]
                }],
              "desc":""
            },
            "ListBox":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","table"],
                  "rets":["number"],
                  "args":["label","current_item","values"]
                }],
              "desc":""
            },
            "DragFloat4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","x","y","z","w"]
                }],
              "desc":""
            },
            "EndMenu":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Ends the current menu."
            },
            "ProgressBar":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["value"]
                }],
              "desc":""
            },
            "open_imgui":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                },{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "InputInt4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","x","y","z","w"]
                }],
              "desc":""
            },
            "BeginMenuBar":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Starts the menu bar of the current window, window need to created with Imgui."
            },
            "InputTextMultiline":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["string"],
                  "args":["label","text"]
                }],
              "desc":""
            },
            "SliderFloat":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number"],
                  "args":["label","value","min","max"]
                }],
              "desc":""
            },
            "OpenPopup":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Opens the popup with id."
            },
            "IsItemHovered":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "Checkbox":{
              "type":"function",
              "signatures":[{
                  "types":["string","boolean"],
                  "rets":["boolean"],
                  "args":["label","value"]
                }],
              "desc":""
            },
            "InputInt2":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number"],
                  "rets":["number","number"],
                  "args":["label","x","y"]
                }],
              "desc":""
            },
            "DragFloat":{
              "type":"function",
              "signatures":[{
                  "types":["string","number"],
                  "rets":["number"],
                  "args":["label","value"]
                }],
              "desc":""
            },
            "Separator":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "SmallButton":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["label"]
                }],
              "desc":""
            },
            "Text":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["text"]
                }],
              "desc":""
            },
            "ColorEdit4":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number","number"],
                  "rets":["number","number","number","number"],
                  "args":["label","red","green","blue","alpha"]
                }],
              "desc":""
            },
            "BeginMainMenuBar":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Starts the main menu bar that sits at the top of the main window(i."
            },
            "EndMenuBar":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Ends the current menu bar."
            },
            "BeginToolTip":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Starts a new tooltip, best combined with Imgui."
            },
            "InputText":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["string"],
                  "args":["label","text"]
                }],
              "desc":""
            },
            "RadioButton":{
              "type":"function",
              "signatures":[{
                  "types":["string","boolean"],
                  "rets":["boolean"],
                  "args":["label","value"]
                }],
              "desc":""
            },
            "InputFloat2":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number"],
                  "rets":["number","number"],
                  "args":["label","x","y"]
                }],
              "desc":""
            },
            "InputInt3":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number","number"],
                  "rets":["number","number","number"],
                  "args":["label","x","y","z"]
                }],
              "desc":""
            },
            "BeginChild":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Creates a child window to the current active window."
            },
            "DragFloat2":{
              "type":"function",
              "signatures":[{
                  "types":["string","number","number"],
                  "rets":["number","number"],
                  "args":["label","x","y"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "Matrix4x4":{
          "signatures":[{
              "types":["number","number","number","number","number","number","number","number","number","number","number","number"],
              "rets":["stingray.Matrix4x4"],
              "args":["xx","xy","xz","yx","yy","yz","zx","zy","zz","tx","ty","tz"]
            }],
          "type":"object",
          "members":{
            "from_quaternion_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Vector3"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["q","t"]
                }],
              "desc":"Returns a matrix that represents the specified rotation and translation."
            },
            "transform":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["m","p"]
                }],
              "desc":"Transforms the specified point using the specified matrix."
            },
            "set_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","s"]
                }],
              "desc":"Sets the scale of the matrix."
            },
            "multiply":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Matrix4x4"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["m1","m2"]
                }],
              "desc":"Multiplies two matrices."
            },
            "copy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["m"]
                }],
              "desc":"Returns a new copy of the specified matrix, with the same rotation and translation values."
            },
            "transform_without_translation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["m","v"]
                }],
              "desc":"Transforms the specified vector using the specified matrix, without translating the vector."
            },
            "is_valid_for_physics":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["boolean"],
                  "args":["m"]
                }],
              "desc":"Indicates whether or not the matrix can be applied to a physics object."
            },
            "set_forward":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","forward"]
                }],
              "desc":"Sets the forward (Y) axis of the specified matrix."
            },
            "set_axis":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","i","v"]
                }],
              "desc":"Sets the local X, Y, or Z axis of the matrix."
            },
            "set_translation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","t"]
                }],
              "desc":"Sets the translation of the matrix."
            },
            "from_elements":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","number","number","number","number","number"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["xx","xy","xz","yx","yy","yz","zx","zy","zz","tx","ty","tz"]
                }],
              "desc":"Creates a matrix with x-axis `(xx, xy, xz)`, y-axis `(yx, yy, yz)`, z-axis `(zx, zy, zz)` and translation `(tx, ty, tz)`."
            },
            "rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Quaternion"],
                  "args":["m"]
                }],
              "desc":"Retrieves the rotation of the matrix."
            },
            "from_axes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3","stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["x","y","z","t"]
                }],
              "desc":"Returns a matrix that represents the specified rotation and translation."
            },
            "z":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the Z axis of the specified matrix."
            },
            "forward":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the forward (Y) axis of the specified matrix."
            },
            "set_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["m","r"]
                }],
              "desc":"Sets the rotation of the matrix."
            },
            "from_quaternion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["q"]
                }],
              "desc":"Returns a matrix that represents the specified rotation, with no translation."
            },
            "scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Retrieves the scale of the matrix."
            },
            "right":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the right (X) axis of the specified matrix."
            },
            "identity":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Matrix4x4"],
                  "args":[]
                }],
              "desc":"Returns the identity matrix, which represents an object with no translation and no rotation."
            },
            "axis":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["m","i"]
                }],
              "desc":"Retrieves the local X, Y, or Z axis of the matrix."
            },
            "set_y":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","y"]
                }],
              "desc":"Sets the Y axis of the specified matrix."
            },
            "set_x":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","x"]
                }],
              "desc":"Sets the X axis of the specified matrix."
            },
            "is_valid":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["boolean"],
                  "args":["m"]
                }],
              "desc":"Indicates whether or not the matrix is composed entirely of valid values."
            },
            "y":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the Y axis of the specified matrix."
            },
            "set_right":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","right"]
                }],
              "desc":"Sets the right (X) axis of the specified matrix."
            },
            "zero":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Matrix4x4"],
                  "args":[]
                }],
              "desc":"Returns the zero matrix, with all fields initialized to zero."
            },
            "translation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Retrieves the translation of the matrix."
            },
            "from_translation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["t"]
                }],
              "desc":"Returns a matrix that represents the specified translation, with no rotation."
            },
            "to_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["number","number","number","number","number","number","number","number","number","number","number","number"],
                  "args":["m"]
                }],
              "desc":"Decomposes a [Matrix4x4] into the orientations of its X, Y, Z axes and its translation."
            },
            "to_string":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["string"],
                  "args":["m"]
                }],
              "desc":"Returns a string representation of the specified matrix."
            },
            "element":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","integer","integer"],
                  "rets":["number"],
                  "args":["m","i","j"]
                }],
              "desc":"Returns the element at index `(i, j)` in the matrix."
            },
            "set_element":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","integer","integer","number"],
                  "rets":["nil"],
                  "args":["m","i","j","value"]
                }],
              "desc":"Sets a new value for the element at index `(i, j)` in the matrix."
            },
            "set_up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","up"]
                }],
              "desc":"Sets the up (Z) axis of the specified matrix."
            },
            "inverse":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["m"]
                }],
              "desc":"Returns the inverse of the specified matrix."
            },
            "equal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Matrix4x4"],
                  "rets":["boolean"],
                  "args":["m1","m2"]
                }],
              "desc":"Indicates whether or not two matrices are equivalent."
            },
            "x":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the X axis of the specified matrix."
            },
            "up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Vector3"],
                  "args":["m"]
                }],
              "desc":"Returns the up (Z) axis of the specified matrix."
            },
            "set_z":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["m","z"]
                }],
              "desc":"Sets the Z axis of the specified matrix."
            },
            "lerp":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Matrix4x4","number"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["m1","m2","t"]
                }],
              "desc":"Produces a new matrix by interpolating, or \"lerping\", between the two specified matrices."
            }
          },
          "desc":""
        },
        "Vector3":{
          "signatures":[{
              "types":["number","number","number"],
              "rets":["stingray.Vector3"],
              "args":["x","y","z"]
            }],
          "type":"object",
          "members":{
            "length_squared":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector"]
                }],
              "desc":"Returns the squared scalar length of the specified vector."
            },
            "multiply":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["stingray.Vector3"],
                  "args":["vector","factor"]
                }],
              "desc":"Multiplies the specified vector by a scalar value, and returns the resulting vector."
            },
            "backward":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the backward (negative Y) axis."
            },
            "normalize":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector"]
                }],
              "desc":"Normalizes the specified vector -- i."
            },
            "dot":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns the dot product of the two specified vectors."
            },
            "set_xyz":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number","number","number"],
                  "rets":["nil"],
                  "args":["vector","x","y","z"]
                }],
              "desc":"Sets the values of the vector's X, Y and Z components."
            },
            "length":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector"]
                }],
              "desc":"Returns the scalar length of the specified vector."
            },
            "to_string":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["string"],
                  "args":["vector"]
                }],
              "desc":"Returns a string representation of the specified vector."
            },
            "up":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the up (Z) axis."
            },
            "max":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns a vector that contains the largest value for each component from the two specified vectors."
            },
            "y":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector"]
                }],
              "desc":"Returns the value of the vector's Y component."
            },
            "subtract":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Subtracts *vector_b* from *vector_a*, and returns the resulting vector."
            },
            "z":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector"]
                }],
              "desc":"Returns the value of the vector's Z component."
            },
            "forward":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the forward (Y) axis."
            },
            "divide":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["stingray.Vector3"],
                  "args":["vector","factor"]
                }],
              "desc":"Divides the specified vector by a scalar value, and returns the resulting vector."
            },
            "to_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number","number","number"],
                  "args":["vector"]
                }],
              "desc":"Decomposes the specified vector into its component values."
            },
            "right":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the right (X) axis."
            },
            "left":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the left (negative X) axis."
            },
            "make_axes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["stingray.Vector3","stingray.Vector3"],
                  "args":["vector"]
                }],
              "desc":"Given the specified *vector*, returns two orthogonal vectors Y and Z such that the three vectors\n\t\ttogether form an orthonormal basis, which can be used as an orthogonal coordinate system."
            },
            "divide_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Divides each element of *vector_a* by the corresponding element of *vector_b*,\n\t\tand returns the resulting vector."
            },
            "set_y":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["vector","value"]
                }],
              "desc":"Sets the value of the vector's Y component."
            },
            "set_x":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["vector","value"]
                }],
              "desc":"Sets the value of the vector's X component."
            },
            "is_valid":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["boolean"],
                  "args":["vector"]
                }],
              "desc":"Indicates whether or not the vector is composed entirely of valid values."
            },
            "zero":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns a new vector with all values initialized to zero."
            },
            "base":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["stingray.Vector3"],
                  "args":["index"]
                }],
              "desc":"Returns the base vector with the specified index."
            },
            "lerp":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3","number"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b","ratio"]
                }],
              "desc":"Produces a new vector by interpolating linearly between the two specified vectors with the specified ratio."
            },
            "distance":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns the distance between two specified points."
            },
            "distance_squared":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns the square of the distance between two specified points."
            },
            "element":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","integer"],
                  "rets":["number"],
                  "args":["vector","index"]
                },{
                  "types":["stingray.Vector3","integer","number"],
                  "rets":["nil"],
                  "args":["vector","index","value"]
                }],
              "desc":"Returns the value stored at the specified index within the vector."
            },
            "min":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns a vector that contains the smallest value for each component from the two specified vectors."
            },
            "multiply_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Multiplies each element of *vector_a* by the corresponding element of *vector_b*,\n\t\tand returns the resulting vector."
            },
            "cross":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Returns the cross product of the two specified vectors."
            },
            "equal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["boolean"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Indicates whether or not the two vectors are identical."
            },
            "set_z":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["vector","value"]
                }],
              "desc":"Sets the value of the vector's Z component."
            },
            "x":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3"],
                  "rets":["number"],
                  "args":["vector"]
                }],
              "desc":"Returns the value of the vector's X component."
            },
            "down":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Vector3"],
                  "args":[]
                }],
              "desc":"Returns the down (negative Z) axis."
            },
            "add":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_a","vector_b"]
                }],
              "desc":"Adds the two specified vectors together, and returns the resulting vector."
            }
          },
          "desc":""
        },
        "Pad4":{
          "desc":"",
          "type":"object"
        },
        "TransformComponent":{
          "type":"object",
          "members":{
            "children":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Entity[]"],
                  "args":["tc","parent"]
                }],
              "desc":"Returns the first-level children of the parent entity."
            },
            "parent":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Entity?"],
                  "args":["tc","child"]
                }],
              "desc":"Returns the parent of the child or `nil` if the child is unlinked."
            },
            "world_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Quaternion"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the world rotation of the entity."
            },
            "local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the local pose of the entity with respect to its parent."
            },
            "local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Vector3"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the local position of the entity with respect to its parent."
            },
            "set_local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["tc","entity","position"]
                }],
              "desc":"Sets the local position of the entity."
            },
            "unlink":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["nil"],
                  "args":["tc","child"]
                }],
              "desc":"Unlinks the child from its parent node."
            },
            "link_to_scene_graph":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Entity","integer","stingray.Vector3?","stingray.Quaternion?","stingray.Vector3?"],
                  "rets":["nil"],
                  "args":["tc","child","parent","node","position","rotation","scale"]
                },{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Entity","integer","stingray.Matrix4x4?"],
                  "rets":["nil"],
                  "args":["tc","child","parent","node","pose"]
                }],
              "desc":"Links the child entity to the parent."
            },
            "local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Quaternion"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the local rotation of the entity with respect to its parent."
            },
            "world_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Vector3"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the world position of the entity."
            },
            "link":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Entity","stingray.Vector3?","stingray.Quaternion?","stingray.Vector3?"],
                  "rets":["nil"],
                  "args":["tc","child","parent","position","rotation","scale"]
                },{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Entity","stingray.Matrix4x4?"],
                  "rets":["nil"],
                  "args":["tc","child","parent","pose"]
                }],
              "desc":"Links the child entity to the parent."
            },
            "local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Vector3"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the local scale of the entity with respect to its parent."
            },
            "world_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["tc","entity"]
                }],
              "desc":"Returns the world pose of the entity."
            },
            "set_local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["tc","entity","rotation"]
                }],
              "desc":"Sets the local rotation of the entity."
            },
            "set_local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["tc","entity","pose"]
                }],
              "desc":"Sets the local pose of the entity."
            },
            "set_local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TransformComponent","stingray.Entity","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["tc","entity","scale"]
                }],
              "desc":"Sets the local scale of the entity."
            }
          },
          "desc":""
        },
        "Network":{
          "type":"object",
          "members":{
            "is_used":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["peer_id"]
                }],
              "desc":"Indicates whether or not the connection to the specified peer is in use by higher-level layers of the\n\t\tnetworking system, such as rooms, lobbies, game sessions, etc."
            },
            "log":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["log_level"]
                }],
              "desc":"Sets the level of information that will be sent to the debugging console."
            },
            "set_resend_time":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["time"]
                }],
              "desc":"Sets the time in seconds before resending any packets that are assumed to have been dropped."
            },
            "write_dump_tag":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["details"]
                }],
              "desc":"If the networking system is configured in the *settings."
            },
            "create_connection":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["peer_id"]
                }],
              "desc":"Creates a new connection to the specified peer."
            },
            "ARRAY":{
              "desc":"integer = <internal>\nData type for arrays.",
              "type":"constant"
            },
            "join_steam_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["stingray.SteamLobby"],
                  "args":["lobby_id"]
                }],
              "desc":"Joins the lobby identified by the specified ID."
            },
            "clear_activity":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":"Clears the activity of the supplied user."
            },
            "set_explicit_connections":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Enables the explicit connection model for the networking system."
            },
            "peer_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns an id that uniquely identifies this peer."
            },
            "clean_sessions":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":"Leaves all session the user is associated with, used to clean up stale and leaked sessions."
            },
            "config_hash":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["config_resource"]
                }],
              "desc":"Constructs a hash based on the contents of a network configuration data file."
            },
            "ping":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["player_id"]
                }],
              "desc":"Pings the specified peer and returns the time taken for the ping."
            },
            "connections":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string[]"],
                  "args":[]
                }],
              "desc":"Returns a list of all peers with active connections."
            },
            "leave_psn_room":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["nil"],
                  "args":["room"]
                }],
              "desc":"Leaves the specified room."
            },
            "STEAM_LOBBY_PUBLIC":{
              "desc":"integer = <internal>\nIndicates that the lobby is visible in the lobby list.",
              "type":"constant"
            },
            "has_connection":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer?"],
                  "args":["peer_id"]
                }],
              "desc":"Returns the ID of the connection to the specified peer, if one exists."
            },
            "reliable_send_buffer_left":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["peer_id"]
                }],
              "desc":"Returns the size in bytes left to fill in the reliable send buffer for a specific peer."
            },
            "destroy_connection":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["peer_id"]
                }],
              "desc":"Disconnects from the specified peer, if a connection currently exists."
            },
            "xboxlive_client_exists":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Use this function to ensure than only one *Xbox Live Client* exists at any given time."
            },
            "get_activity_details":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string[]"],
                  "rets":["integer"],
                  "args":["user_id","xuids"]
                }],
              "desc":"Starts the asynchronous task of getting user activity details."
            },
            "leave_steam_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby"],
                  "rets":["nil"],
                  "args":["lobby"]
                }],
              "desc":"Leaves the specified lobby."
            },
            "get_activity_details_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["activity_details*"],
                  "args":["session_lookup_id"]
                }],
              "desc":"Result from the get activity details task\n\n\t\tNote that the result can only be retrieved when [stingray."
            },
            "enable_qos":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["min_peer_kbps","initial_peer_kbps","max_total_kbps"]
                }],
              "desc":"Enables the Quality of Service system, which tries to adapt the upload limit to fit the\n\t\tbandwidth capacity."
            },
            "create_game_session":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.GameSession"],
                  "args":[]
                }],
              "desc":"Creates a new game session."
            },
            "init_xboxlive_client":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["config"]
                }],
              "desc":"Initializes the networking system to connect to other games through Xbox Live."
            },
            "ignore_rpc_log":{
              "type":"function",
              "signatures":[{
                  "types":["string","boolean?"],
                  "rets":["nil"],
                  "args":["rpc","ignore"]
                }],
              "desc":"Filter RPC printing during development."
            },
            "free_handle_to_description":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["session_lookup_id"]
                }],
              "desc":"Frees the resources beloging to the asynchronous task started with [stingray."
            },
            "UINT64":{
              "desc":"integer = <internal>\nData type for 64-bit integer values.",
              "type":"constant"
            },
            "INT":{
              "desc":"integer = <internal>\nData type for integer numbers.",
              "type":"constant"
            },
            "set_ping_send_time":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["time"]
                }],
              "desc":"Sets the time between a keep-alive response and the next keep-alive message."
            },
            "object_info":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["network_object_info"],
                  "args":["object_name"]
                }],
              "desc":"Returns a table that contains metadata about the specified game object type, such as its priority, data fields, etc."
            },
            "lookup_steam_server":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.SteamServerLookup"],
                  "args":["address"]
                }],
              "desc":"This contacts the server to query its ID."
            },
            "set_pong_timeout":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["time"]
                }],
              "desc":"Sets the timeout before a receiver is considered lost."
            },
            "create_lan_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["stingray.LanLobby"],
                  "args":["lobby_port","max_members"]
                }],
              "desc":"Creates a lobby on the LAN."
            },
            "fatal_error":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not a fatal network error has occurred that will prevent any further network\n\t\toperations."
            },
            "shutdown_psn_client":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnClient"],
                  "rets":["nil"],
                  "args":["client"]
                }],
              "desc":"Shuts down the specified [PsnClient], previously created by a call to [init_psn_client()]."
            },
            "is_broken":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["peer_id"]
                }],
              "desc":"Indicates whether or not the connection to the specified peer is broken: i."
            },
            "create_steam_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["stingray.SteamLobby"],
                  "args":["type_lobby","max_members"]
                }],
              "desc":"Creates a [SteamLobby]."
            },
            "create_psn_room":{
              "type":"function",
              "signatures":[{
                  "types":["string","string","integer"],
                  "rets":["stingray.PsnRoom"],
                  "args":["type","name","max_members"]
                }],
              "desc":"Creates a room on the PlayStation Network with the specified *type* and *name*."
            },
            "QUATERNION":{
              "desc":"integer = <internal>\nData type for quaternion rotations.",
              "type":"constant"
            },
            "limit_mtu":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["mtu"]
                }],
              "desc":"Set the maximum packet size used by all endpoints."
            },
            "create_multiplayer_session_client":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string","integer[]?"],
                  "rets":["integer"],
                  "args":["user_id","session_name","session_template_name","xbox_user_id_member_reservation"]
                }],
              "desc":"Starts the asynchronous job of creating and joining a session."
            },
            "set_max_transmit_rate":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["time"]
                }],
              "desc":"Sets the minimum time that can elapse between successive transmits."
            },
            "free_get_activity_details":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["session_lookup_id"]
                }],
              "desc":"Frees the resources beloging to the asynchronous task started with [stingray."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["number","table"],
                  "rets":["nil"],
                  "args":["dt","callback_object"]
                }],
              "desc":"Updates the network system, and notifies you via callbacks of events that have occurred\n\t\tand RPC messages that have been sent since your last update."
            },
            "update_transmit":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"In order to reduce latency by one frame, you can call [update_receive()] and [update_transmit()], in that order,\n\t\tinstead of a single call to [update()]."
            },
            "join_steam_server":{
              "type":"function",
              "signatures":[{
                  "types":["boolean","string","string?"],
                  "rets":["stingray.SteamGameServerLobby"],
                  "args":["use_eac","ip_address","password"]
                },{
                  "types":["boolean","string","number","string?"],
                  "rets":["stingray.SteamGameServerLobby"],
                  "args":["use_eac","ip_address","port","password"]
                }],
              "desc":"Joins a Steam server on the Internet."
            },
            "VECTOR3":{
              "desc":"integer = <internal>\nData type for three-dimensional vector values.",
              "type":"constant"
            },
            "create_multiplayer_session":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string","boolean","string[]?"],
                  "rets":["integer"],
                  "args":["user_id","session_name","session_template_name","create_as_host","session_keywords"]
                }],
              "desc":"Starts the asynchronous job of creating and joining a session."
            },
            "handle_to_description_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string","string"],
                  "args":["session_lookup_id"]
                }],
              "desc":"Result from the session lookup."
            },
            "PURE":{
              "desc":"integer = <internal>\nData type for floating-point numbers which packs mantissa and exponent separately.",
              "type":"constant"
            },
            "STEAM_LOBBY_INVISIBLE":{
              "desc":"integer = <internal>\nIndicates that the lobby is not visible to other friends, but can returned by a search.",
              "type":"constant"
            },
            "shutdown_steam_client":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamClient"],
                  "rets":["nil"],
                  "args":["client"]
                }],
              "desc":"Shuts down a [SteamClient] created by [init_steam_client()]."
            },
            "join_lan_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer?"],
                  "rets":["stingray.LanLobby"],
                  "args":["address","lobby_port"]
                }],
              "desc":"Joins the lobby at the specified address."
            },
            "RESOURCE_ID":{
              "desc":"integer = <internal>\nData type for resource IDs.",
              "type":"constant"
            },
            "STEAM_LOBBY_PRIVATE":{
              "desc":"integer = <internal>\nIndicates that the lobby can only be joined by invitees.",
              "type":"constant"
            },
            "shutdown_game_session":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Shuts down the current [GameSession], if any."
            },
            "enable_qos_peer":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["peer_id"]
                }],
              "desc":"Re-enables the Quality of Service system for communications with the specified peer,\n\t\t\tafter it was disabled by a call to [disable_qos_peer()]."
            },
            "shutdown_xboxlive_client":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Shuts down the *Xbox Live Client* created with [init_xboxlive_client()]."
            },
            "SPEW":{
              "desc":"integer = <internal>\nGame object updates and detailed information are printed, as well as everything above.",
              "type":"constant"
            },
            "disable_qos_peer":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["peer_id"]
                }],
              "desc":"Disables the Quality of Service system for communications with the specified peer."
            },
            "WARNINGS":{
              "desc":"integer = <internal>\nOnly warnings.",
              "type":"constant"
            },
            "join_psn_room":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.PsnRoom"],
                  "args":["room_id"]
                }],
              "desc":"Joins the room with the specified ID."
            },
            "SILENT":{
              "desc":"integer = <internal>\nNo debugging output at all.",
              "type":"constant"
            },
            "set_ping_resend_time":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["time"]
                }],
              "desc":"Sets the time between keep-alive messages when there is no response."
            },
            "STEAM_LOBBY_FRIENDS_ONLY":{
              "desc":"integer = <internal>\nIndicates that the lobby Can be joined by friends.",
              "type":"constant"
            },
            "create_replay_session":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.GameSession"],
                  "args":["dump_file"]
                }],
              "desc":"Starts a new replay session."
            },
            "STRING":{
              "desc":"integer = <internal>\nData type for string values.",
              "type":"constant"
            },
            "VECTOR3PURE":{
              "desc":"integer = <internal>\nData type for three-dimensional vector values which packs mantissa and exponent separately.",
              "type":"constant"
            },
            "FLOAT":{
              "desc":"integer = <internal>\nData type for floating-point numbers.",
              "type":"constant"
            },
            "free_multiplayer_session":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["session_id"]
                }],
              "desc":"Frees up the resources used by the session with supplied id."
            },
            "BOOL":{
              "desc":"integer = <internal>\nData type for boolean values.",
              "type":"constant"
            },
            "init_steam_client":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.SteamClient"],
                  "args":["config"]
                }],
              "desc":"Initializes the networking system to connect to other games as a Steam client."
            },
            "join_local_multiplayer_session":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["integer"],
                  "args":["user_id","session_id"]
                }],
              "desc":"Starts the asynchronous job of joining a local user to a session."
            },
            "leave_steam_server":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["nil"],
                  "args":["server_lobby"]
                }],
              "desc":"Removes the server lobby and notifies the server."
            },
            "shutdown_steam_server":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer"],
                  "rets":["nil"],
                  "args":["server"]
                }],
              "desc":"Shuts down a [SteamGameServer] created by [init_steam_server()]."
            },
            "init_steam_server":{
              "type":"function",
              "signatures":[{
                  "types":["string","network_steam_server_settings"],
                  "rets":["stingray.SteamGameServer"],
                  "args":["config","settings"]
                }],
              "desc":"Initializes the network as a Steam game server, which other Steam clients can find using the Steam server browser."
            },
            "message_info":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["network_message_info"],
                  "args":["message_name"]
                }],
              "desc":"Returns a table that contains metadata about the specified message type, such as its priority, expected\n\t\targuments, etc."
            },
            "set_activity":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["nil"],
                  "args":["user_id","session_id"]
                }],
              "desc":"Sets the activity of the user to the supplied session."
            },
            "type_info":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["network_type_info"],
                  "args":["type_name"]
                }],
              "desc":"Returns a table that contains metadata about the specified data type, such as the number of bits used\n\t\tby the engine to compress values of that type, minimum and maximum values, etc."
            },
            "pack_unpack":{
              "type":"function",
              "signatures":[{
                  "types":["integer","any"],
                  "rets":["integer?"],
                  "args":["network_type_index","object"]
                }],
              "desc":"Packs and unpacks a network type to see the actual value that will be sent over the network."
            },
            "time_since_receive":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["peer_id"]
                }],
              "desc":"Determine how long since the peer showed proof to be alive."
            },
            "handle_to_description_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["session_lookup_id"]
                }],
              "desc":""
            },
            "shutdown_lan_client":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanClient"],
                  "rets":["nil"],
                  "args":["client"]
                }],
              "desc":"Shuts down the specified [LanClient], previously created by a call to [init_lan_client()]."
            },
            "default_network_address":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Determines the network address to use for all network communication."
            },
            "update_receive":{
              "type":"function",
              "signatures":[{
                  "types":["number","table"],
                  "rets":["nil"],
                  "args":["dt","callback_object"]
                }],
              "desc":""
            },
            "init_lan_client":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer?","integer?"],
                  "rets":["stingray.LanClient"],
                  "args":["config","game_port","peer_id"]
                }],
              "desc":"Initializes the networking system to connect to other games on the local area network (LAN)."
            },
            "get_activity_details_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["get_activites_id"]
                }],
              "desc":""
            },
            "clear_activity_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["user_id"]
                }],
              "desc":"Returns the status of the clear user activity operation."
            },
            "type_index":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer"],
                  "args":["network_type"]
                }],
              "desc":"Looking up the index of a network type is slow so this should be done once and then the index should be stored for later use."
            },
            "game_session":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.GameSession"],
                  "args":[]
                }],
              "desc":"Returns the current game session."
            },
            "init_psn_client":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.PsnClient"],
                  "args":["config"]
                }],
              "desc":"Initializes the networking system to connect to other games through the PlayStation Network (PSN)."
            },
            "clean_sessions_status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the status of the clean sessions operation."
            },
            "MESSAGES":{
              "desc":"integer = <internal>\nGame object creation, migration and destruction messages are printed, as well as warnings.",
              "type":"constant"
            },
            "leave_lan_lobby":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby"],
                  "rets":["nil"],
                  "args":["lobby"]
                }],
              "desc":"Leaves the specified lobby."
            },
            "create_multiplayer_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string","string[]?","integer?","integer?","integer[]?"],
                  "rets":["integer"],
                  "args":["user_id","session_name","session_template_name","session_keywords","min_number_members","max_number_members","xbox_user_id_member_reservation"]
                }],
              "desc":"Starts the asynchronous job of creating and joining a session."
            },
            "handle_to_description":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string"],
                  "rets":["integer"],
                  "args":["user_id","handle"]
                }],
              "desc":"Starts the asynchronous session lookup task for the supplied user."
            },
            "shutdown_replay_session":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Shuts down the current [ReplaySession], if any."
            }
          },
          "desc":""
        },
        "Terrain":{
          "type":"object",
          "members":{
            "set_shader_pass_flag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Terrain","string","boolean"],
                  "rets":["nil"],
                  "args":["terrain","flag","enabled"]
                }],
              "desc":"Determines whether or not the specified shader pass is enabled for the terrain."
            },
            "num_materials":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Terrain"],
                  "rets":["integer"],
                  "args":["terrain"]
                }],
              "desc":"Returns the number of materials assigned to the terrain."
            },
            "material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Terrain","any(integer,string)"],
                  "rets":["stingray.Material"],
                  "args":["terrain","ID"]
                }],
              "desc":"Returns the specified material in the terrain."
            }
          },
          "desc":""
        },
        "Mover":{
          "type":"object",
          "members":{
            "radius":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["number"],
                  "args":["mover"]
                }],
              "desc":"Returns the outer radius of the mover."
            },
            "set_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["mover","pos"]
                }],
              "desc":"Teleports the mover to the specified position."
            },
            "move":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["mover","offset","delta_time"]
                }],
              "desc":"Attempts to move the mover by the specified position."
            },
            "separate":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","number?"],
                  "rets":["boolean","stingray.Actor?","stingray.Vector3?","stingray.Vector3?"],
                  "args":["mover","allow_move"]
                }],
              "desc":"Tries to separate the mover from any colliding geometry and returns the result."
            },
            "actor_colliding_down":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["stingray.Actor"],
                  "args":["mover"]
                }],
              "desc":"Returns the actor, if any, that the mover is standing upon."
            },
            "collides_sides":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["boolean"],
                  "args":["mover"]
                }],
              "desc":"Indicates whether or not the Mover is colliding horizontally: i."
            },
            "set_max_slope_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","number"],
                  "rets":["nil"],
                  "args":["mover","slope"]
                }],
              "desc":"Sets the maximum slope angle that the mover can walk on."
            },
            "unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["stingray.Unit"],
                  "args":["mover"]
                }],
              "desc":"Returns the [Unit] that owns the specified [Mover]."
            },
            "collides_down":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["boolean"],
                  "args":["mover"]
                }],
              "desc":"Indicates whether or not the Mover is colliding in the downward direction: i."
            },
            "fits_at":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","stingray.Vector3","number?"],
                  "rets":["boolean","stingray.Vector3?"],
                  "args":["mover","position","allow_move"]
                }],
              "desc":"Indicates whether or not the mover fits at the specified position without colliding with\n\t\t\tany world geometry."
            },
            "max_slope_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["number"],
                  "args":["mover"]
                }],
              "desc":"Returns the maximum slope angle that the mover can walk on."
            },
            "position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["stingray.Vector3"],
                  "args":["mover"]
                }],
              "desc":"Returns the current position of the mover."
            },
            "set_collision_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover","string"],
                  "rets":["nil"],
                  "args":["mover","filter"]
                }],
              "desc":"Changes the collision filter used by the mover."
            },
            "collides_up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["boolean"],
                  "args":["mover"]
                }],
              "desc":"Indicates whether or not the Mover is colliding in the upward direction: i."
            },
            "standing_frames":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["integer"],
                  "args":["mover"]
                }],
              "desc":"Returns the number of frames the mover has been \"standing\" on a surface."
            },
            "flying_frames":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Mover"],
                  "rets":["integer"],
                  "args":["mover"]
                }],
              "desc":"Returns the number of frames the mover has been flying: i."
            }
          },
          "desc":""
        },
        "Rotation2D":{
          "type":"function",
          "signatures":[{
              "types":["vector2","number","vector2?"],
              "rets":["rotation2D"],
              "args":["pos","angle","pivot"]
            }],
          "desc":"Creates a matrix that you can use to draw a rotated 2D object using the 3D functions in the [Gui]."
        },
        "Camera":{
          "type":"object",
          "members":{
            "world_to_screen":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","stingray.Vector3","stingray.Window?"],
                  "rets":["stingray.Vector3","number"],
                  "args":["camera","w","window"]
                }],
              "desc":"Converts a point *w* from world coordinates to screen coordinates."
            },
            "set_far_range":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number"],
                  "rets":["nil"],
                  "args":["camera","range"]
                }],
              "desc":"Sets the far range value of the camera."
            },
            "projection_type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera"],
                  "rets":["integer"],
                  "args":["camera"]
                }],
              "desc":"Returns the projection type of the camera."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","any(integer,string)+"],
                  "rets":["any"],
                  "args":["camera","indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the camera's script data object."
            },
            "set_frustum_half_angles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number","number","number","number"],
                  "rets":["nil"],
                  "args":["camera","left_tan","right_tan","down_tan","up_tan"]
                }],
              "desc":"Sets the frustum dimensions for the perspective view using half angles (in radians)."
            },
            "set_orthographic_view":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number","number","number","number"],
                  "rets":["nil"],
                  "args":["camera","min_x","max_x","min_z","max_z"]
                }],
              "desc":"Sets the minimum and maximum coordinates for the orthographic view."
            },
            "ORTHOGRAPHIC":{
              "desc":"integer = <internal>\nSpecifies an orthographic camera.",
              "type":"constant"
            },
            "set_vertical_fov":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number"],
                  "rets":["nil"],
                  "args":["camera","fov"]
                }],
              "desc":"Sets the vertical Field of View angle of the camera."
            },
            "inside_frustum":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","stingray.Vector3"],
                  "rets":["number"],
                  "args":["camera","w"]
                }],
              "desc":"Indicates whether the Vector3 *w* is inside the camera's frustum."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["camera","indices","indices","indices","value"]
                },{
                  "types":["stingray.Camera","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["camera","indices","indices","value"]
                },{
                  "types":["stingray.Camera","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["camera","indices","value"]
                }],
              "desc":"Stores the specified value in the camera's script data object, at a location determined\n\t\tby the specified indices."
            },
            "near_range":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera"],
                  "rets":["number"],
                  "args":["camera"]
                }],
              "desc":"Returns the near range value of the camera."
            },
            "screen_to_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","stingray.Vector3","number","stingray.Window?"],
                  "rets":["stingray.Vector3"],
                  "args":["camera","p","d","window"]
                }],
              "desc":"Converts a point *p* from screen coordinates to world coordinates."
            },
            "set_projection_type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","integer"],
                  "rets":["nil"],
                  "args":["camera","projection_type"]
                }],
              "desc":"Sets the projection type of the camera."
            },
            "PERSPECTIVE":{
              "desc":"integer = <internal>\nSpecifies a perspective camera.",
              "type":"constant"
            },
            "set_frustum":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number","number","number","number"],
                  "rets":["nil"],
                  "args":["camera","left","right","down","up"]
                }],
              "desc":"Sets the frustum dimensions for the perspective view."
            },
            "far_range":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera"],
                  "rets":["number"],
                  "args":["camera"]
                }],
              "desc":"Returns the far range value of the camera."
            },
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","any(integer,string)+"],
                  "rets":["boolean"],
                  "args":["camera","indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the camera's\n\t\tscript data object."
            },
            "set_near_range":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera","number"],
                  "rets":["nil"],
                  "args":["camera","range"]
                }],
              "desc":"Sets the near range value of the camera."
            },
            "vertical_fov":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Camera"],
                  "rets":["number"],
                  "args":["camera"]
                }],
              "desc":"Returns the vertical Field of View angle set for the camera."
            }
          },
          "desc":""
        },
        "Events":{
          "type":"object",
          "members":{
            "write":{
              "type":"function",
              "signatures":[{
                  "types":["string","table"],
                  "rets":["nil"],
                  "args":["event_name","event_args"]
                }],
              "desc":"This functions fires an event (e."
            },
            "setup":{
              "type":"function",
              "signatures":[{
                  "types":["table"],
                  "rets":["nil"],
                  "args":["events"]
                }],
              "desc":"This functions sets up all the various events the game can fire."
            }
          },
          "desc":""
        },
        "PS4Pad3":{
          "desc":"",
          "type":"object"
        },
        "SteamVoipRoom":{
          "type":"object",
          "members":{
            "add_member":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["room_id","peer_id"]
                }],
              "desc":"Adds the specified peer to the room."
            },
            "remove_member":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["room_id","peer_id"]
                }],
              "desc":"Removes the specified peer from the room."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string[]"],
                  "args":["room_id"]
                }],
              "desc":"Returns a list of all peers in the specified room."
            },
            "broken_members":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string[]?"],
                  "args":["room_id"]
                }],
              "desc":"Queries for members that the room has lost contact with."
            }
          },
          "desc":""
        },
        "EAC":{
          "type":"object",
          "members":{
            "challenge_response":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["challenge"]
                }],
              "desc":"Creates a response to the server challenge to prove that the game is running with EAC enabled."
            },
            "validate_host":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Starts validation of the host of the network game."
            },
            "before_join":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Call this before join to reset the EAC client."
            },
            "set_host":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["peer"]
                }],
              "desc":"Sets the host of the network game."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["string?"],
                  "rets":["string","string","string","string"],
                  "args":["peer_id"]
                }],
              "desc":"Gets the EAC status and reason for a specific peer."
            },
            "after_leave":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Call this before join to reset the EAC client."
            },
            "is_initialized":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Gets the initialization status of EAC."
            },
            "initialization_error":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean","string?"],
                  "args":[]
                }],
              "desc":"Check for initialization error after initialization finishes."
            }
          },
          "desc":""
        },
        "PlayGo":{
          "type":"object",
          "members":{
            "request_next_chunk":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer?"],
                  "args":[]
                }],
              "desc":"This function changes the locus for the chunk at the beginning of the PlayGo to-do list to SCE_PLAYGO_LOCUS_LOCAL_FAST (state where the chunk is in fast local storage)."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer?","integer?"],
                  "args":[]
                }],
              "desc":"Closes the PlayGo package for the application and also frees all API resources."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["table"],
                  "rets":["table?","integer?"],
                  "args":["chunk_ids"]
                }],
              "desc":"Returns, for each chunk: size downloaded, total size to download (both in bytes)."
            },
            "snapshot":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["integer?"],
                  "args":["filename"]
                }],
              "desc":"This function exports the PlayGo chunk state to a file in the host file system."
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["integer?"],
                  "args":["buffer_size"]
                }],
              "desc":"Initializes PlayGo resources and opens the Application's PlayGo package."
            },
            "set_install_speed":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer?"],
                  "args":["speed"]
                }],
              "desc":"Returns the result of setting the Install Speed for the Application Package."
            },
            "eta":{
              "type":"function",
              "signatures":[{
                  "types":["integer[]"],
                  "rets":["number?","integer?"],
                  "args":["chunk_ids"]
                }],
              "desc":"Returns ETA for the application package."
            },
            "locus_list":{
              "type":"function",
              "signatures":[{
                  "types":["integer[]"],
                  "rets":["integer[]?","integer?"],
                  "args":["chunk_ids"]
                }],
              "desc":"Returns a list of locations for the chunks of this package."
            },
            "chunk_id_list":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer[]?","integer?"],
                  "args":[]
                }],
              "desc":"Returns chunks IDs for the Application package."
            },
            "set_todo_list":{
              "type":"function",
              "signatures":[{
                  "types":["table"],
                  "rets":["integer?"],
                  "args":["todo_list"]
                }],
              "desc":"Sets the todo list of chunks to download."
            },
            "prefetch":{
              "type":"function",
              "signatures":[{
                  "types":["integer[]","integer"],
                  "rets":["integer?"],
                  "args":["chunk_ids","min_locus"]
                }],
              "desc":"This function adds or moves the specified chunks to the beginning of the PlayGo to-do list."
            },
            "todo_list":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table?","integer?"],
                  "args":[]
                }],
              "desc":"Returns the Todo List for the package."
            },
            "install_speed":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer?","integer?"],
                  "args":[]
                }],
              "desc":"Returns the Install Speed for the application package."
            }
          },
          "desc":""
        },
        "Quaternion":{
          "signatures":[{
              "types":["stingray.Vector3","number"],
              "rets":["stingray.Quaternion"],
              "args":["axis","angle"]
            }],
          "type":"object",
          "members":{
            "conjugate":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat"]
                }],
              "desc":"Returns the conjugate of the specified quaternion: a quaternion where the X, Y and Z values are\n\t\tnegated, but the W component remains unchanged."
            },
            "to_elements":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number","number","number","number"],
                  "args":["quat"]
                }],
              "desc":"Decomposes the specified quaternion into its four component values."
            },
            "multiply":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Quaternion"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat_a","quat_b"]
                }],
              "desc":"Multiplies the two specified quaternions together, and returns the result."
            },
            "identity":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Quaternion"],
                  "args":[]
                }],
              "desc":"Returns the identity quaternion, which represents no change in rotation."
            },
            "roll":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat"]
                }],
              "desc":"Returnes the roll for the quternion."
            },
            "yaw":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat"]
                }],
              "desc":"Returnes the yaw for the quternion."
            },
            "set_xyzw":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","number","number","number","number"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat","x","y","z","w"]
                }],
              "desc":"Sets all of the individual component values of the specified quaternion from individual floating-point values."
            },
            "look":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3?"],
                  "rets":["stingray.Quaternion"],
                  "args":["dir","up"]
                }],
              "desc":"Creates a new quaternion with the rotation needed in order to be facing in the specified direction, with the\n\t\tspecified up vector."
            },
            "to_string":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["string"],
                  "args":["quat"]
                }],
              "desc":"Returns a string representation of the specified quaternion."
            },
            "is_valid":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["boolean"],
                  "args":["quat"]
                }],
              "desc":"Indicates whether or not the quaternion is composed entirely of valid values."
            },
            "right":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Vector3"],
                  "args":["quat"]
                }],
              "desc":"Returns the right axis of the rotation represented in the specified quaternion."
            },
            "rotate":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["quat","vector"]
                }],
              "desc":"Rotates the specified vector by the specified quaternion, and returns the result."
            },
            "forward":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Vector3"],
                  "args":["quat"]
                }],
              "desc":"Returns the forward axis of the rotation represented in the specified quaternion."
            },
            "up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Vector3"],
                  "args":["quat"]
                }],
              "desc":"Returns the up axis of the rotation represented in the specified quaternion."
            },
            "angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat"]
                }],
              "desc":"Returns the rotation angle represented by this quaternion."
            },
            "from_matrix":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["stingray.Quaternion"],
                  "args":["matrix"]
                }],
              "desc":"Creates a new quaternion from the rotation expressed in the specified matrix."
            },
            "decompose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Vector3","number"],
                  "args":["quat"]
                }],
              "desc":"Decomposes the specified quaternion into a facing direction and a rotation angle."
            },
            "pitch":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat"]
                }],
              "desc":"Returnes the pitch for the quternion."
            },
            "matrix4x4":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["quat"]
                }],
              "desc":"Converts the rotation expressed by the specified quaternion into a [Matrix4x4]."
            },
            "dot":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat_a","quat_b"]
                }],
              "desc":"Returns the dot product of the two specified quaternions."
            },
            "inverse":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat"]
                }],
              "desc":"Inverts the specified quaternion, and returns the result."
            },
            "equal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Quaternion"],
                  "rets":["boolean"],
                  "args":["quat_a","quat_b"]
                }],
              "desc":"Indicates whether or not the two quaternions are equivalent."
            },
            "lerp":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion","stingray.Quaternion","number"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat_a","quat_b","t"]
                }],
              "desc":"Produces a new rotation by interpolating, or \"lerping\", between the two specified quaternions."
            },
            "norm":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["number"],
                  "args":["quat"]
                }],
              "desc":"Returns the norm, or length, of the specified quaternion."
            },
            "normalize":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["stingray.Quaternion"],
                  "args":["quat"]
                }],
              "desc":"Normalizes the specified quaternion, and returns the result."
            },
            "axis_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","number"],
                  "rets":["stingray.Quaternion"],
                  "args":["axis","angle"]
                }],
              "desc":"Creates a new quaternion that represents a rotation with the specified angle around the specified axis."
            }
          },
          "desc":""
        },
        "SteamLobbyBrowser":{
          "type":"object",
          "members":{
            "GREATER_OR_EQUAL":{
              "desc":"integer = <internal>\nGreater or equal to.",
              "type":"constant"
            },
            "CLOSE":{
              "desc":"integer = <internal>\nOnly same immediate region.",
              "type":"constant"
            },
            "NOT_EQUAL":{
              "desc":"integer = <internal>\nNot equal to.",
              "type":"constant"
            },
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser"],
                  "rets":["boolean"],
                  "args":["self"]
                }],
              "desc":"Indicates whether or not the lobby browser is currently refreshing its list of lobbies."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","integer","string"],
                  "rets":["string"],
                  "args":["self","index","key"]
                }],
              "desc":"Returns the data set for the specified in the specified lobby."
            },
            "FAR":{
              "desc":"integer = <internal>\nAbout half-way around the globe (expect high latency).",
              "type":"constant"
            },
            "LESS":{
              "desc":"integer = <internal>\nLess than.",
              "type":"constant"
            },
            "LESS_OR_EQUAL":{
              "desc":"integer = <internal>\nLess than or equal to.",
              "type":"constant"
            },
            "add_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","string","any(string,integer)","integer"],
                  "rets":["nil"],
                  "args":["self","key","value","comp"]
                }],
              "desc":"Adds a string or numeric filter for a specific key."
            },
            "add_slots_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","slots"]
                }],
              "desc":"Adds a filter that sets a minimum number of slots that must be free in the lobby."
            },
            "GREATER":{
              "desc":"integer = <internal>\nGreater than.",
              "type":"constant"
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Refreshes the list of game lobbies."
            },
            "data_all":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","integer"],
                  "rets":["network_steam_lobby_info"],
                  "args":["browser","i"]
                }],
              "desc":"Returns ALL information about the specified lobby, including the address that you can use to join the lobby."
            },
            "add_distance_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","distance"]
                }],
              "desc":"Adds a filter for lobby distance, which you can use to restrict available lobbies based on their geographical\n\t\tdistance from the player."
            },
            "WORLD":{
              "desc":"integer = <internal>\nNo filtering (not recommended, expect multiple seconds of latency between the clients).",
              "type":"constant"
            },
            "EQUAL":{
              "desc":"integer = <internal>\nEquals to.",
              "type":"constant"
            },
            "add_near_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","string","integer"],
                  "rets":["nil"],
                  "args":["self","key","value"]
                }],
              "desc":"Adds a numeric filter that looks for near matches against a specific key of the lobby."
            },
            "DEFAULT":{
              "desc":"integer = <internal>\nOnly same region or close, but looking further if the current region has infrequent lobby activity. This is the default.",
              "type":"constant"
            },
            "clear_filters":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Removes all filters used by the browser to restrict its list of lobbies."
            },
            "lobby":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser","integer"],
                  "rets":["network_steam_lobby_info"],
                  "args":["self","i"]
                }],
              "desc":"Returns information about the specified lobby, including the address that you can use to join the lobby."
            },
            "num_lobbies":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobbyBrowser"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Returns the number of lobbies found by the lobby browser."
            }
          },
          "desc":""
        },
        "Keyboard":{
          "type":"object",
          "members":{
            "F11":{
              "desc":"integer = <internal>\nRepresents the `F11` key.",
              "type":"constant"
            },
            "HOME":{
              "desc":"integer = <internal>\nRepresents the `Home` key.",
              "type":"constant"
            },
            "DELETE":{
              "desc":"integer = <internal>\nRepresents the `Delete` key.",
              "type":"constant"
            },
            "ESCAPE":{
              "desc":"integer = <internal>\nRepresents the `Esc` key.",
              "type":"constant"
            },
            "F10":{
              "desc":"integer = <internal>\nRepresents the `F10` key.",
              "type":"constant"
            },
            "BACKSPACE":{
              "desc":"integer = <internal>\nRepresents the `Backspace` key.",
              "type":"constant"
            },
            "UP":{
              "desc":"integer = <internal>\nRepresents the up arrow key.",
              "type":"constant"
            },
            "F1":{
              "desc":"integer = <internal>\nRepresents the `F1` key.",
              "type":"constant"
            },
            "PAGE_DOWN":{
              "desc":"integer = <internal>\nRepresents the `Page Down` key.",
              "type":"constant"
            },
            "ENTER":{
              "desc":"integer = <internal>\nRepresents the `Enter` key.",
              "type":"constant"
            },
            "F7":{
              "desc":"integer = <internal>\nRepresents the `F7` key.",
              "type":"constant"
            },
            "F6":{
              "desc":"integer = <internal>\nRepresents the `F6` key.",
              "type":"constant"
            },
            "END":{
              "desc":"integer = <internal>\nRepresents the `End` key.",
              "type":"constant"
            },
            "F2":{
              "desc":"integer = <internal>\nRepresents the `F2` key.",
              "type":"constant"
            },
            "F3":{
              "desc":"integer = <internal>\nRepresents the `F3` key.",
              "type":"constant"
            },
            "RIGHT":{
              "desc":"integer = <internal>\nRepresents the right arrow key.",
              "type":"constant"
            },
            "PAGE_UP":{
              "desc":"integer = <internal>\nRepresents the `Page Up` key.",
              "type":"constant"
            },
            "TAB":{
              "desc":"integer = <internal>\nRepresents the `Tab` key.",
              "type":"constant"
            },
            "LEFT":{
              "desc":"integer = <internal>\nRepresents the left arrow key.",
              "type":"constant"
            },
            "keystrokes":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["any(string,integer)[]"],
                  "args":[]
                }],
              "desc":"Returns a table that contains an entry for each key the user pressed in the previous frame."
            },
            "F5":{
              "desc":"integer = <internal>\nRepresents the `F5` key.",
              "type":"constant"
            },
            "F4":{
              "desc":"integer = <internal>\nRepresents the `F4` key.",
              "type":"constant"
            },
            "F12":{
              "desc":"integer = <internal>\nRepresents the `F12` key.",
              "type":"constant"
            },
            "DOWN":{
              "desc":"integer = <internal>\nRepresents the down arrow key.",
              "type":"constant"
            },
            "INSERT":{
              "desc":"integer = <internal>\nRepresents the `Insert` key.",
              "type":"constant"
            },
            "F8":{
              "desc":"integer = <internal>\nRepresents the `F8` key.",
              "type":"constant"
            },
            "F9":{
              "desc":"integer = <internal>\nRepresents the `F9` key.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Window":{
          "type":"object",
          "members":{
            "set_mouse_focus":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","boolean"],
                  "rets":["nil"],
                  "args":["window","focus"]
                },{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["focus"]
                }],
              "desc":"Determines whether or not the window should have mouse focus."
            },
            "KEYSTROKE_ALT_F4":{
              "desc":"integer = <internal>\nRepresents the `Alt+F4` key combination.",
              "type":"constant"
            },
            "KEYSTROKE_ALT_TAB":{
              "desc":"integer = <internal>\nRepresents the `Alt+Tab` key combination.",
              "type":"constant"
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["nil"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Closes the specified window."
            },
            "set_title":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","string"],
                  "rets":["nil"],
                  "args":["window","title"]
                },{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["title"]
                }],
              "desc":"Sets the title for the window."
            },
            "KEYSTROKE_WINDOWS":{
              "desc":"integer = <internal>\nRepresents the Windows key.",
              "type":"constant"
            },
            "has_focus":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the window has keyboard focus."
            },
            "mouse_focus":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the window has mouse focus."
            },
            "flash_window":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","string","number"],
                  "rets":["nil"],
                  "args":["window","action","count"]
                },{
                  "types":["stingray.Window","string"],
                  "rets":["nil"],
                  "args":["window","action"]
                }],
              "desc":"Flashes the window and tray icon to get the user's attention."
            },
            "set_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","string"],
                  "rets":["nil"],
                  "args":["window","cursor"]
                },{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["cursor"]
                }],
              "desc":"Determines what type of mouse cursor resource will be used for the window."
            },
            "set_show_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","boolean"],
                  "rets":["nil"],
                  "args":["window","doShow"]
                },{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["doShow"]
                }],
              "desc":"Determines whether or not the window shows the mouse pointer when it has focus."
            },
            "size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["number","number"],
                  "args":["window"]
                }],
              "desc":""
            },
            "KEYSTROKE_ALT_ENTER":{
              "desc":"integer = <internal>\nRepresents the `Alt+Enter` key combination.",
              "type":"constant"
            },
            "set_resizable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","boolean"],
                  "rets":["nil"],
                  "args":["window","resizeable"]
                },{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["resizeable"]
                }],
              "desc":"Determines whether or not the window can be resized."
            },
            "set_resolution":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","integer","integer"],
                  "rets":["boolean"],
                  "args":["window","width","height"]
                },{
                  "types":["integer","integer"],
                  "rets":["boolean"],
                  "args":["width","height"]
                }],
              "desc":"Sets the resolution of the specified window."
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["window_config?"],
                  "rets":["nil"],
                  "args":["config"]
                }],
              "desc":"Opens a new window using the specified settings."
            },
            "show_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the window shows the mouse cursor when it has focus."
            },
            "set_ime_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","boolean"],
                  "rets":["nil"],
                  "args":["window","isEnabled"]
                },{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["isEnabled"]
                }],
              "desc":"Determines whether or not the input method editor (IME) is enabled for the specified window."
            },
            "set_keystroke_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","integer","boolean"],
                  "rets":["nil"],
                  "args":["window","key","isEnabled"]
                },{
                  "types":["integer","boolean"],
                  "rets":["nil"],
                  "args":["key","isEnabled"]
                }],
              "desc":"Determines whether or not specific keystrokes or key combinations are enabled for the specified window."
            },
            "clip_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the window prevents the mouse pointer from moving outside its borders."
            },
            "is_closing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the user has requested the specified window to be closed."
            },
            "set_focus":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["nil"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Gives the window keyboard focus."
            },
            "set_clip_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window","boolean"],
                  "rets":["nil"],
                  "args":["window","doClip"]
                },{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["doClip"]
                }],
              "desc":"Determines whether or not the window prevents the mouse pointer from moving outside its borders."
            },
            "minimize":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["nil"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Minimizes the window to the task bar."
            },
            "is_resizable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the window can be resized."
            }
          },
          "desc":""
        },
        "SteamMisc":{
          "type":"object",
          "members":{
            "get_lobby_data":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["table"],
                  "args":["id"]
                }],
              "desc":"Returns ALL data for the provided lobby id."
            },
            "get_lobby_data_by_key":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["string"],
                  "args":["id","key"]
                }],
              "desc":"Returns the specific value for id, key from the provided lobby id."
            }
          },
          "desc":""
        },
        "SteamLobby":{
          "type":"object",
          "members":{
            "set_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string?"],
                  "rets":["nil"],
                  "args":["self","peer_id"]
                }],
              "desc":"Sets the host of the game session to the specified peer."
            },
            "lobby_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby"],
                  "rets":["string"],
                  "args":["self"]
                }],
              "desc":"Returns the ID of the peer that is acting as the host for the lobby."
            },
            "FAILED":{
              "desc":"integer = <internal>\nThis state indicates that this peer has been rejected by the lobby host, or has dropped out of the lobby due\n\t\tto a problem such as a bad connection.",
              "type":"constant"
            },
            "JOINING":{
              "desc":"integer = <internal>\nThis state means the lobby is waiting for the lobby host to accept this peer as a lobby member. When this\n\t\tpeer has been accepted, the state changes to [SteamLobby.JOINED]. If this peer is not accepted, the state\n\t\tchanges to [SteamLobby.FAILED].",
              "type":"constant"
            },
            "JOINED":{
              "desc":"integer = <internal>\nThis state indicates that this peer has been accepted into the lobby.",
              "type":"constant"
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string","string"],
                  "rets":["nil"],
                  "args":["self","key","value"]
                }],
              "desc":"Stores a particular data value for the lobby."
            },
            "set_member_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string","string"],
                  "rets":["nil"],
                  "args":["self","key","value"]
                }],
              "desc":"Stores a particular data value for the member of the lobby calling this function."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Retrieves the current state of the lobby, and whether or not this peer has joined successfully."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby"],
                  "rets":["string[]"],
                  "args":["self"]
                }],
              "desc":"Retrieves a list of all peers currently connected to the lobby."
            },
            "game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby"],
                  "rets":["string?"],
                  "args":["self"]
                }],
              "desc":"Returns the game session host for the lobby."
            },
            "CREATING":{
              "desc":"integer = <internal>\nThis is the state of the lobby after it has been created with [Network.create_steam_lobby()].\n\t\tIf the lobby is successfully created, the state will change to [SteamLobby.JOINED]. If the creation fails,\n\t\tthe state will be [SteamLobby.FAILED].",
              "type":"constant"
            },
            "member_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string","string"],
                  "rets":["string"],
                  "args":["self","peer_id","key"]
                }],
              "desc":"Retrieves the specified data stored for the specified peer in the lobby."
            },
            "own_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string"],
                  "rets":["string"],
                  "args":["self","key"]
                }],
              "desc":"Retrieves the specified data stored for the peer calling this function."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamLobby","string"],
                  "rets":["string"],
                  "args":["self","key"]
                }],
              "desc":"Retrieves a particular data value previously stored for the lobby by a call to [set_data()]."
            },
            "request_lobby_data":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Asks Steam to refresh the lobby data for the lobby."
            }
          },
          "desc":""
        },
        "NavCostMapObject":{
          "desc":"",
          "type":"object"
        },
        "Tus":{
          "type":"object",
          "members":{
            "has_get_info_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Returns *true* if there is a usable result for a [stingray."
            },
            "free":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Frees all data that the system keeps track of for the operation with the specified ID."
            },
            "DETAILS":{
              "desc":"integer = <internal>\nInstructs [get_results()] to return a list of tables that contain detailed information about each slot.",
              "type":"constant"
            },
            "get_info":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer[]"],
                  "rets":["integer"],
                  "args":["target","options"]
                }],
              "desc":"Gets information about multiple data slots without fetching the actual data."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer"],
                  "rets":["integer"],
                  "args":["target","slot"]
                }],
              "desc":"Gets the data stored in the specified slot for the target."
            },
            "get_info_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["ps4_tus_slot_data"],
                  "args":["id"]
                }],
              "desc":"Returns the result of a [stingray."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns the status of the operation with the specified ID."
            },
            "delete":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer[]"],
                  "rets":["integer"],
                  "args":["target","options"]
                }],
              "desc":"Deletes the listed slots for the target."
            },
            "has_get_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Indicates whether or not there is a usable result for the [stingray."
            },
            "set":{
              "type":"function",
              "signatures":[{
                  "types":["string?","any(integer,number)*"],
                  "rets":["integer"],
                  "args":["target","options"]
                }],
              "desc":"Sets the values to store in the specified slots for the target."
            },
            "get_data_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["ps4_tus_slot_data"],
                  "args":["id"]
                }],
              "desc":"Returns the result of a [stingray."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer","string","string?"],
                  "rets":["integer"],
                  "args":["target","slot","data","info"]
                }],
              "desc":"Sets the data and info for the specified slot."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nEither the ID was never created, or it has already been freed.",
              "type":"constant"
            },
            "JUST_VALUES":{
              "desc":"integer = <internal>\nInstructs [get_results()] to return only the current value of each slot.",
              "type":"constant"
            },
            "delete_data":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer[]"],
                  "rets":["integer"],
                  "args":["target","options"]
                }],
              "desc":"Deletes the listed data slots for the target."
            },
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred during the operation.",
              "type":"constant"
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has successfully completed.",
              "type":"constant"
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operation has started, but not yet finished.",
              "type":"constant"
            },
            "get_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["number*"],
                  "args":["id","format"]
                },{
                  "types":["integer","integer"],
                  "rets":["ps4_tus_slot_data[]"],
                  "args":["id","format"]
                }],
              "desc":"Returns the result of the [stingray."
            },
            "has_get_data_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Returns *true* if there is a usable result for the [stingray."
            },
            "get":{
              "type":"function",
              "signatures":[{
                  "types":["any","integer*"],
                  "rets":["integer"],
                  "args":["target","options"]
                }],
              "desc":"Gets the values stored in the specified slots for the target."
            }
          },
          "desc":""
        },
        "NavCostMapTagCostTableObject":{
          "desc":"",
          "type":"object"
        },
        "AnimationBlenderComponent":{
          "type":"object",
          "members":{
            "bone_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity"],
                  "rets":["stingray.AnimationBlenderBoneMode"],
                  "args":["abc","entity"]
                }],
              "desc":"Returns the bone mode of the animation blender."
            },
            "root_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity"],
                  "rets":["stingray.AnimationBlenderRootMode"],
                  "args":["abc","entity"]
                }],
              "desc":"Returns the root mode of the animation blender."
            },
            "set_time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","integer","number"],
                  "rets":["nil"],
                  "args":["abc","entity","id","time"]
                },{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","integer","number"],
                  "rets":["nil"],
                  "args":["abc","entity","id","speed"]
                }],
              "desc":"Sets the time of an animation played with [crossfade]."
            },
            "delta_transform":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["abc","entity"]
                }],
              "desc":"Returns delta transform from the animation to be applied to the entity."
            },
            "set_root_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","stingray.AnimationBlenderRootMode"],
                  "rets":["nil"],
                  "args":["abc","entity","root_mode"]
                }],
              "desc":"Sets the root mode of the animation blender."
            },
            "crossfade":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","string","integer?","number?","boolean?"],
                  "rets":["integer"],
                  "args":["abc","entity","animation","layer","blend_time","loop"]
                }],
              "desc":"Plays an animation directly on the entity without using an animation state machine."
            },
            "is_crossfading":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity"],
                  "rets":["boolean"],
                  "args":["abc","entity"]
                }],
              "desc":"Returns true if any animation is currently crossfading."
            },
            "set_bones_lod":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","integer"],
                  "rets":["nil"],
                  "args":["abc","entity","lod"]
                }],
              "desc":"Returns the desired new entity transform."
            },
            "set_bone_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationBlenderComponent","stingray.Entity","stingray.AnimationBlenderBoneMode"],
                  "rets":["nil"],
                  "args":["abc","entity","bone_mode"]
                }],
              "desc":"Sets the bone mode of the animation blender."
            }
          },
          "desc":""
        },
        "NpProfileDialog":{
          "type":"object",
          "members":{
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Updates the ProfileDialog."
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["integer"],
                  "args":["user_id","target_id"]
                }],
              "desc":"Opens a ProfileDialog."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Close the ProfileDialog."
            }
          },
          "desc":""
        },
        "Tablet":{
          "desc":"",
          "type":"object"
        },
        "Broadphase":{
          "signatures":[{
              "types":["number","number","table?"],
              "rets":["stingray.Broadphase"],
              "args":["cell_radius","num_objects","categories"]
            }],
          "type":"object",
          "members":{
            "remove":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Broadphase","number"],
                  "rets":["nil"],
                  "args":["broadphase","item"]
                }],
              "desc":"Removes the item from the broadphase data structure."
            },
            "move":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Broadphase","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["broadphase","item","pos"]
                }],
              "desc":"Moves the item to the specified position."
            },
            "query":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Broadphase","stingray.Vector3","number","stingray.Unit[]","any(table,string)?"],
                  "rets":["integer"],
                  "args":["broadphase","pos","radius","results","categories"]
                }],
              "desc":"Finds all the units whose spheres intersect a sphere at the specified *position* with the specified *radius*,\n\t\tand returns them by inserting them into the Lua *results* table."
            },
            "all":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Broadphase","any(table,string)?"],
                  "rets":["broadphase_entry[]"],
                  "args":["broadphase","categories"]
                }],
              "desc":"Retrieves all entries in the broadphase data structure, typically used for debugging purposes."
            },
            "add":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Broadphase","stingray.Unit","stingray.Vector3","number","any(table,string)?"],
                  "rets":["integer"],
                  "args":["broadphase","unit","pos","radius","categories"]
                }],
              "desc":"Adds a new unit to the broadphase data structure at the specified position and with the specified radius."
            }
          },
          "desc":""
        },
        "LanLobbyBrowser":{
          "type":"object",
          "members":{
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobbyBrowser"],
                  "rets":["boolean"],
                  "args":["browser"]
                }],
              "desc":"Indicates whether or not the lobby browser is currently refreshing its internal list of available lobbies\n\t\ton the LAN."
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobbyBrowser","number"],
                  "rets":["nil"],
                  "args":["browser","port"]
                }],
              "desc":"Refreshes the list of available game lobbies by broadcasting a search on the LAN."
            },
            "num_lobbies":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobbyBrowser"],
                  "rets":["integer"],
                  "args":["browser"]
                }],
              "desc":"Returns the number of available lobbies found in the last search of the LAN."
            },
            "lobby":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobbyBrowser","integer"],
                  "rets":["network_lan_lobby_info"],
                  "args":["browser","index"]
                }],
              "desc":"Returns details about the specified lobby, including the IP address and port that you must use\n\t\tto connect to the lobby."
            }
          },
          "desc":""
        },
        "XboxDLC":{
          "type":"object",
          "members":{
            "mount_dlc":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "LICENCE_PURCHASED":{
              "desc":"integer = <internal>\nA new license has been approved",
              "type":"constant"
            },
            "installed_packages":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":""
            },
            "check_license_id":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "display_name":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "USER_CHANGED":{
              "desc":"integer = <internal>\nThe current user has changed",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":""
            },
            "PACKAGE_INSTALLED":{
              "desc":"integer = <internal>\nA new DLC package has been installed",
              "type":"constant"
            },
            "enumerate_dlc":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "product_id":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "licensed_packages":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":""
            },
            "unmount_dlc":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "LICENCE_TERMINATED":{
              "desc":"integer = <internal>\nA license for a DLC package has been terminated",
              "type":"constant"
            },
            "USER_SIGNED_OUT":{
              "desc":"integer = <internal>\nA user has logged out",
              "type":"constant"
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "USER_SIGNED_IN":{
              "desc":"integer = <internal>\nA new user has logged in",
              "type":"constant"
            },
            "IDLE":{
              "desc":"integer = <internal>\nIdle mode. Nothing has happened",
              "type":"constant"
            },
            "check_license":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["dlc_name"]
                }],
              "desc":""
            },
            "reset":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "ErrorDialog":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nEither the error dialog is not initialized, or it has already been terminated.",
              "type":"constant"
            },
            "INITIALIZED":{
              "desc":"integer = <internal>\nThe error dialog is initialized, but not opened.",
              "type":"constant"
            },
            "terminate":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Terminates the error dialog system and frees the related resources."
            },
            "RUNNING":{
              "desc":"integer = <internal>\nThe error dialog is open.",
              "type":"constant"
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer?"],
                  "rets":["nil"],
                  "args":["error","user_id"]
                }],
              "desc":"Opens the error dialog for the specified error code."
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes the error dialog system."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Same as [stingray."
            },
            "FINISHED":{
              "desc":"integer = <internal>\nThe error dialog is closed and finished.",
              "type":"constant"
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Updates the status of the error dialog and returns it."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Aborts the error dialog and closes it."
            }
          },
          "desc":""
        },
        "TouchPanel":{
          "desc":"",
          "type":"object"
        },
        "InputController":{
          "type":"object",
          "members":{
            "stop_all_rumble_effects":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer"],
                  "rets":["nil"],
                  "args":["controller","motor_id"]
                }],
              "desc":"Stops all rumble effects previously created by calls to [rumble_effect()]."
            },
            "button_locale_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer"],
                  "rets":["string"],
                  "args":["controller","id"]
                }],
              "desc":"Retrieves the name of the specified button, respecting the locale set for the device."
            },
            "rumble_motor_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","string"],
                  "rets":["integer?"],
                  "args":["controller","motor_name"]
                }],
              "desc":"Deprecated; Rumble motors are referenced by IDs not indices, please use stingray."
            },
            "rumble_motor_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer"],
                  "rets":["string"],
                  "args":["controller","motor_id"]
                }],
              "desc":"Retrieves the name of the rumble motor with the specified id."
            },
            "category":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController"],
                  "rets":["string"],
                  "args":["controller"]
                }],
              "desc":"Returns a string that describes the category of input device this controller falls into."
            },
            "set_rumble_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","boolean"],
                  "rets":["nil"],
                  "args":["controller","do_rumble"]
                }],
              "desc":"Determines whether or not the rumble engine should be enabled for this controller."
            },
            "set_rumble":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer","number"],
                  "rets":["nil"],
                  "args":["controller","motor_id","value"]
                }],
              "desc":"Starts a new rumble effect on the specified motor."
            },
            "set_light_bar_color":{
              "type":"function",
              "signatures":[{
                  "types":["color"],
                  "rets":["nil"],
                  "args":["color"]
                }],
              "desc":"Sets the light bar on the controller to the specified color."
            },
            "RAW":{
              "desc":"integer = <internal>\nSpecifies no dead zone at all. The engine provides the raw input values read from the controller.",
              "type":"constant"
            },
            "down_threshold":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController"],
                  "rets":["number"],
                  "args":["controller"]
                }],
              "desc":"Retrieves the minimum input value that must be sent from the controller for this button in order for the button to\n\t\tbe considered pressed."
            },
            "INDEPENDENT":{
              "desc":"integer = <internal>\nSpecifies a dead zone whose size value is applied independently along each cooordinate axis, making the dead\n\t\t\tzone a square box. Input values that fall inside the square are ignored.",
              "type":"constant"
            },
            "set_down_threshold":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","number"],
                  "rets":["nil"],
                  "args":["controller","threshold"]
                }],
              "desc":"Sets the minimum input value that must be sent from the controller for this button in order for the button to\n\t\tbe considered pressed."
            },
            "num_rumble_motors":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController"],
                  "rets":["integer"],
                  "args":["controller"]
                }],
              "desc":"Retrieves the number of rumble controllers supported by this kind of controller."
            },
            "user_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer?"],
                  "args":[]
                }],
              "desc":"Returns the user id of the user using the pad."
            },
            "stop_rumble_effect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer","integer"],
                  "rets":["nil"],
                  "args":["controller","motor_id","ID"]
                }],
              "desc":"Stops a rumble effect that was previously created by a call to [rumble_effect()]."
            },
            "rumble_motor_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","string"],
                  "rets":["integer?"],
                  "args":["controller","motor_name"]
                }],
              "desc":"Retrieves the id of the rumble motor with the specified name."
            },
            "is_rumble_effect_playing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer","integer"],
                  "rets":["boolean"],
                  "args":["controller","motor_id","ID"]
                }],
              "desc":"Indicates whether or not the specified rumble event is playing on the specified motor."
            },
            "dead_zone":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer"],
                  "rets":["integer","number"],
                  "args":["controller","id"]
                }],
              "desc":"Returns the current dead zone settings for the specified axis on this controller."
            },
            "set_dead_zone":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer","integer","number"],
                  "rets":["nil"],
                  "args":["controller","id","dead_zone_mode","dead_zone_size"]
                }],
              "desc":"Sets the default dead zone values for a single axis of the controller."
            },
            "CIRCULAR":{
              "desc":"integer = <internal>\nSpecifies a dead zone whose size value is interpreted as the radius of a circle. Input values that fall inside\n\t\t\tthe circle are ignored.",
              "type":"constant"
            },
            "rumble_effect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.InputController","integer","input_rumble_params"],
                  "rets":["integer"],
                  "args":["controller","motor_id","params"]
                }],
              "desc":"Starts a new rumble effect on the specified motor."
            }
          },
          "desc":""
        },
        "QoSVoiceChat":{
          "type":"namespace",
          "members":{
            "mute_remote":{
              "type":"function",
              "signatures":[{
                  "types":["string","boolean"],
                  "rets":["nil"],
                  "args":["peer_id","mute"]
                }],
              "desc":"Mutes or unmutes a remote peer."
            },
            "is_talking":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["peer_id"]
                }],
              "desc":"Returns true if peer is talking."
            },
            "init":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnClient","integer"],
                  "rets":["nil"],
                  "args":["client","user_id"]
                }],
              "desc":"Initializes QoSVoiceChat for the specified user."
            },
            "speaker_volume":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":"Returns the QoSVoiceChat speaker volume."
            },
            "shutdown":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Shuts down QoSVoiceChat and frees related resources."
            },
            "set_speaker_volume":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["volume"]
                }],
              "desc":"Sets the QoSVoiceChat speaker volume."
            },
            "local_mute_status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Returns the mute status of the local user."
            },
            "remote_mute_status":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["peer_id"]
                }],
              "desc":"Returns the mute status of a remote peer."
            },
            "mute_local":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["mute"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "PeoplehubDetailLevel":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "TITLE_HISTORY":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "PREFERRED_COLOR":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Color":{
          "type":"function",
          "signatures":[{
              "types":["number","number","number"],
              "rets":["color"],
              "args":["red","green","blue"]
            },{
              "types":["number","number","number","number"],
              "rets":["color"],
              "args":["alpha","red","green","blue"]
            }],
          "desc":"Returns a color that can be used with the [Gui] functions."
        },
        "Utf8":{
          "type":"object",
          "members":{
            "valid":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["string"]
                }],
              "desc":"Indicates whether or not the input is a valid UTF-8 string."
            },
            "lower":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string"],
                  "args":["string"]
                }],
              "desc":"Converts the string to lower case, and returns the result."
            },
            "location":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["integer","integer"],
                  "args":["string","index"]
                }],
              "desc":"Inspects the string at the specified byte."
            },
            "upper":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string"],
                  "args":["string"]
                }],
              "desc":"Converts the string to upper case, and returns the result."
            }
          },
          "desc":""
        },
        "MultiplayerSessionRestriction":{
          "type":"object",
          "members":{
            "LOCAL":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "FOLLOWED":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NONE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Crypto":{
          "type":"object",
          "members":{
            "derive_key_pbkdf2_async":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string"],
                  "rets":["integer"],
                  "args":["iterations","salt","password"]
                }],
              "desc":"Start generating a key from a password and salt, suitable for storage in a password file."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"Get the status of an asynchronous operation."
            },
            "one_way_encrypt":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["string?"],
                  "args":["derived_key","random_data"]
                }],
              "desc":"Encrypt random data using a derived key to be able to verify match on a server that has access to a password file."
            },
            "make_salt":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string?"],
                  "args":[]
                }],
              "desc":"Generate a piece of random data to use as salt in derived password keys."
            },
            "string_to_hex":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string"],
                  "args":["data"]
                }],
              "desc":"Encode a string as hexadecimal data, suitable for writing hashes or random data to disk."
            },
            "hash_sha256":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["text"]
                }],
              "desc":"Hash a string."
            },
            "derive_key_pbkdf2_sync":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string"],
                  "rets":["string?"],
                  "args":["iterations","salt","password"]
                }],
              "desc":"Generate a key from a password and salt, suitable for storage in a password file."
            },
            "hex_to_string":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["hex"]
                }],
              "desc":"Decode a hexadecimal string to binary data."
            },
            "is_done":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["token"]
                }],
              "desc":"Checks the status of an asynchronous operation."
            },
            "result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string?"],
                  "args":["token"]
                }],
              "desc":"Get the status of an asynchronous operation."
            },
            "make_random":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["string?"],
                  "args":["size"]
                }],
              "desc":"Generate a piece of random data."
            }
          },
          "desc":""
        },
        "MultiplayerSessionVisibility":{
          "type":"object",
          "members":{
            "FULL":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "OPEN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "ANY":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "VISIBLE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "PRIVATE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "VoiceChat":{
          "type":"object",
          "members":{
            "mute_all_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "clear_local_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "add_remote_user":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["nil"],
                  "args":["user_id","peer_id"]
                }],
              "desc":""
            },
            "chat_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["chat_user[]"],
                  "args":[]
                }],
              "desc":""
            },
            "mute_user":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["xbox_user_id"]
                }],
              "desc":""
            },
            "clear_remote_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "unmute_user":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["xbox_user_id"]
                }],
              "desc":""
            },
            "set_chat_volume":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Sets the chat volume for all  peers."
            },
            "remove_user_from_channel_with_xuid":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["xbox_user_id"]
                }],
              "desc":""
            },
            "set_user_chat_volume":{
              "type":"function",
              "signatures":[{
                  "types":["string","number"],
                  "rets":["nil"],
                  "args":["xbox_user_id","volume"]
                }],
              "desc":"Sets the chat volume for a specific peer."
            },
            "shutdown":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Shuts down the *VoiceChat* created with [VoiceChat."
            },
            "remove_user_from_channel":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":""
            },
            "unmute_all_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "add_local_user":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":""
            },
            "init":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes the VoiceChat system to use the build in Game Chat system."
            }
          },
          "desc":""
        },
        "AnimationBlenderRootMode":{
          "type":"enumeration",
          "members":{
            "DELTA_ROTATION":{
              "desc":"Apply the rotation part of the root transform, ignore position and scale changes.",
              "type":"enumerator"
            },
            "IGNORE":{
              "desc":"Ignore root transforms.\n\t\t\t\tRoot transforms are ignored, they will not affect the entity transform. This is the default mode.\n\n\t\t\t\tIf you use this mode you can use [wanted_root_pose] to extract the position the animation wanted\n\t\t\t\tto move the entity to and apply that programatically.",
              "type":"enumerator"
            },
            "DELTA_ROTATION_AND_SCALE":{
              "desc":"Apply the rotation and scale parts of the root transform, ignore position changes.",
              "type":"enumerator"
            },
            "DELTA_POSITION":{
              "desc":"Apply the position part of the root transform, ignore rotation and scale changes.",
              "type":"enumerator"
            },
            "DELTA_POSITION_AND_SCALE":{
              "desc":"Apply the position and scale parts of the root transform, ignore rotation changes.",
              "type":"enumerator"
            },
            "DELTA_SCALE":{
              "desc":"Apply the scale part of the root transform, ignore position and rotation changes.",
              "type":"enumerator"
            },
            "DELTA_POSITION_AND_ROTATION":{
              "desc":"Apply the position and rotation parts of the root transform, ignore scale changes.",
              "type":"enumerator"
            },
            "DELTA_TRANSFORM":{
              "desc":"Apply root transforms.\n\t\t\t\tThe delta changes to the root position, rotation and scale that occur in the animation will be\n\t\t\t\tapplied to the the entity. I.e., the entity will be moved by the animation.",
              "type":"enumerator"
            }
          },
          "desc":""
        },
        "GwNavQueries":{
          "type":"object",
          "members":{
            "nav_tag_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavQueryDynamicOutput","integer"],
                  "rets":["stingray.GwNavTagVolume"],
                  "args":["query_output","index"]
                }],
              "desc":"Retrieves the [GwNavTagVolume] with the specified index."
            },
            "inside_position_from_outside_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","number?","number?","number?","number?","stingray.GwNavTraverseLogic?"],
                  "rets":["stingray.Vector3?"],
                  "args":["nav_world","position","above","below","horizontal","distance_from_obstacle","logic"]
                }],
              "desc":"This query attempts to find a position within the NavMesh from a position outside it."
            },
            "raycast":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","stingray.GwNavTraverseLogic?"],
                  "rets":["boolean","stingray.Vector3"],
                  "args":["nav_world","a","b","logic"]
                }],
              "desc":"This query casts a ray from a to b, if the ray successfully arrives at b returns *true*, otherwise *false*."
            },
            "move_on_navmesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","number","stingray.GwNavTraverseLogic?"],
                  "rets":["stingray.Vector3"],
                  "args":["nav_world","position","velocity","delta_time","logic"]
                }],
              "desc":"Outputs a valid position safely placed on the NavMesh."
            },
            "nav_tag_volume_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavQueryDynamicOutput"],
                  "rets":["integer"],
                  "args":["query_output"]
                }],
              "desc":"Gives the number of TagVolume returned by the query."
            },
            "raycango":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","stingray.GwNavTraverseLogic?"],
                  "rets":["boolean"],
                  "args":["nav_world","a","b","logic"]
                }],
              "desc":"This query casts a ray from a to b, if the ray successfully arrives at b returns *true*, otherwise *false*."
            },
            "destroy_query_dynamic_output":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavQueryDynamicOutput"],
                  "rets":["nil"],
                  "args":["query_output"]
                }],
              "desc":"destroy a GwNavQueryDynamicOutput created by a query."
            },
            "tag_volumes_from_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","number?","number?"],
                  "rets":["stingray.GwNavQueryDynamicOutput?"],
                  "args":["nav_world","position","above","below"]
                }],
              "desc":"This query attempts to find TagVolumes from a position within the NavMesh."
            },
            "triangle_from_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","number","number"],
                  "rets":["number?","stingray.Vector3?","stingray.Vector3?","stingray.Vector3?"],
                  "args":["nav_world","position","above","below"]
                }],
              "desc":"This query attempts to find a triangle in the NavMesh at the specified position."
            }
          },
          "desc":""
        },
        "VideoPlayer":{
          "type":"object",
          "members":{
            "current_frame":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer"],
                  "rets":["integer"],
                  "args":["video_player"]
                }],
              "desc":"Returns the number of frames that has been showed."
            },
            "set_playback_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer","number"],
                  "rets":["nil"],
                  "args":["video_player","speed"]
                }],
              "desc":"Sets the speed at which the video must be played."
            },
            "times_looped":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer"],
                  "rets":["integer"],
                  "args":["video_player"]
                }],
              "desc":"Returns the number of times the video has looped back to the beginning when it is playing with the looping enabled."
            },
            "set_loop":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer","boolean"],
                  "rets":["nil"],
                  "args":["video_player","loop"]
                }],
              "desc":"Specifies whether the video must loop or freeze on the last frame when it reaches the end."
            },
            "number_of_frames":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer"],
                  "rets":["integer"],
                  "args":["video_player"]
                }],
              "desc":"Returns the total number of frames in the video."
            },
            "has_audio":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer"],
                  "rets":["boolean"],
                  "args":["video_player"]
                }],
              "desc":"Returns true if the video contains audio and the VideoPlayer supports it."
            },
            "reset":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VideoPlayer"],
                  "rets":["nil"],
                  "args":["video_player"]
                }],
              "desc":"Resets video to the begining."
            }
          },
          "desc":""
        },
        "SaveSystem":{
          "type":"object",
          "members":{
            "load_error_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns information about why the load failed when [stingray."
            },
            "free":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Frees all data that the save system keeps track of for the operation with the specified ID."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SaveToken"],
                  "rets":["save_system_progress"],
                  "args":["token"]
                }],
              "desc":"Retrieves information about the progress of the save or load operation."
            },
            "save":{
              "type":"function",
              "signatures":[{
                  "types":["save_system_ps4_info"],
                  "rets":["integer"],
                  "args":["info"]
                }],
              "desc":"Starts a new asynchronous save operation using the information in the *info* table."
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operation has started, but not yet finished.",
              "type":"constant"
            },
            "OTHER":{
              "desc":"integer = <internal>\nThe save or load failed for another undefined reason.",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer","integer?"],
                  "args":["id"]
                }],
              "desc":"Returns the status of the operation with the specified ID."
            },
            "OUT_OF_SPACE":{
              "desc":"integer = <internal>\nThe save failed because not enough space was available.",
              "type":"constant"
            },
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred during the operation.",
              "type":"constant"
            },
            "auto_save":{
              "type":"function",
              "signatures":[{
                  "types":["string","table"],
                  "rets":["stingray.SaveToken"],
                  "args":["filename","data"]
                }],
              "desc":"Starts a silent save, used when the game knows the name of the file to write the data to."
            },
            "auto_load":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.SaveToken"],
                  "args":["filename"]
                }],
              "desc":"Starts a silent load, used when the game knows the file that should be loaded."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nEither the specified ID was never created, or it was already freed.",
              "type":"constant"
            },
            "BROKEN":{
              "desc":"integer = <internal>\nLoading failed because the connection was broken.",
              "type":"constant"
            },
            "NOT_FOUND":{
              "desc":"integer = <internal>\nLoading failed because the data could not be found.",
              "type":"constant"
            },
            "save_error_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer","integer?"],
                  "args":["id"]
                }],
              "desc":"Returns information about why the save failed when [stingray."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SaveToken"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"You must call this function to close each token that you get from other functions in\n\t\tthe [SaveSystem] interface."
            },
            "load_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["save_system_ps4_info_files[]"],
                  "args":["id"]
                }],
              "desc":"Returns the result of a load operation."
            },
            "exists":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the [SaveSystem] interface exists on the current platform\n\t\tand is available for use."
            },
            "load":{
              "type":"function",
              "signatures":[{
                  "types":["save_system_ps4_info"],
                  "rets":["integer"],
                  "args":["info"]
                }],
              "desc":"Starts a new asynchronous load operation using the information in the *info* table."
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has completed successfully.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "AnimationBlenderBoneMode":{
          "type":"enumeration",
          "members":{
            "ROTATION_AND_SCALE":{
              "desc":"Apply the rotation and scale parts of the bone transforms, ignore position changes.",
              "type":"enumerator"
            },
            "POSITION":{
              "desc":"Apply the position part of the bone transforms, ignore rotation and scale changes.",
              "type":"enumerator"
            },
            "IGNORE":{
              "desc":"Ignore transforms for all bones.\n\t\t\t\tTransforms are ignored for all bones, they will not affect the entity transform.",
              "type":"enumerator"
            },
            "ROTATION":{
              "desc":"Apply the rotation part of the bone transforms, ignore position and scale changes.",
              "type":"enumerator"
            },
            "SCALE":{
              "desc":"Apply the scale part of the bone transforms, ignore position and rotation changes.",
              "type":"enumerator"
            },
            "TRANSFORM":{
              "desc":"Apply transforms for all bones, except root that is configured independently. This is the default mode.",
              "type":"enumerator"
            },
            "POSITION_AND_ROTATION":{
              "desc":"Apply the position and rotation parts of the bone transforms, ignore scale changes.",
              "type":"enumerator"
            },
            "POSITION_AND_SCALE":{
              "desc":"Apply the position and scale parts of the bone transforms, ignore rotation changes.",
              "type":"enumerator"
            }
          },
          "desc":""
        },
        "Math":{
          "type":"object",
          "members":{
            "is_valid":{
              "type":"function",
              "signatures":[{
                  "types":["number*"],
                  "rets":["boolean"],
                  "args":["inputs"]
                }],
              "desc":"Indicates whether or not all of the inputs are valid numeric values."
            },
            "point_in_box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["boolean"],
                  "args":["point","pose","half_dimensions"]
                }],
              "desc":"Indicates whether or not a point (specified by the *point* parameter) lies inside an oriented bounding\n\t\tbox (specified by the *pose* and *half_dimensions* paramaters)."
            },
            "ray_box_intersection":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3","stingray.Vector3","stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["number"],
                  "args":["from","dir","pose","half_dimensions"]
                }],
              "desc":"Computes the intersection between a ray (specified by the *from* and *dir* parameters) and an oriented bounding box\n\t\t(specified by the *pose* and *half_dimensions* parameters)."
            },
            "merge_boxes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3","any(stingray.Matrix4x4,stingray.Vector3)*"],
                  "rets":["stingray.Matrix4x4","stingray.Vector3"],
                  "args":["pose","half_dimensions","additional_boxes"]
                }],
              "desc":"Merges a series of oriented bounding boxes together into a single oriented bounding box that encloses all of the\n\t\tinput boxes."
            },
            "next_random":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer?","integer?"],
                  "rets":["integer","number"],
                  "args":["seed","first_bound","second_bound"]
                }],
              "desc":"Generates a random number and a new seed based on the specified *seed* value."
            },
            "random":{
              "type":"function",
              "signatures":[{
                  "types":["integer?","integer?"],
                  "rets":["number"],
                  "args":["first_bound","second_bound"]
                }],
              "desc":"Generates a random number."
            },
            "box_in_frustum":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4","stingray.Vector3","stingray.Vector3","number","any(stingray.Vector3,number)*"],
                  "rets":["boolean"],
                  "args":["pose","half_dimensions","n","o","additional_planes"]
                }],
              "desc":"Indicates whether or not an oriented bounding box (specified by the *pose* and *half_dimensions* paramaters)\n\t\tis completely enclosed within a frustum."
            }
          },
          "desc":""
        },
        "Vehicle":{
          "type":"object",
          "members":{
            "tire_drivable_surface_contact_point":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the contact position between the specified wheel and the drivable surface."
            },
            "is_auto_gears_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["boolean"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates whether or not automatic gears are enabled for this vehicle."
            },
            "set_auto_gears_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","boolean"],
                  "rets":["nil"],
                  "args":["vehicle","enabled"]
                }],
              "desc":"Determines whether or not automatic gears are enabled for this vehicle."
            },
            "suspension_force":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the suspension force for the specifed wheel."
            },
            "sideways_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["number"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates the vehicle's current speed along the right direction of its chassis."
            },
            "set_gear_up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","boolean"],
                  "rets":["nil"],
                  "args":["vehicle","gear_up"]
                }],
              "desc":"Increments the current gear of the vehicle by one."
            },
            "set_input_smoothing_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","boolean"],
                  "rets":["nil"],
                  "args":["vehicle","enabled"]
                }],
              "desc":"Determines whether or not input smoothing is enabled for this vehicle."
            },
            "steer_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the current steering angle of the specified wheel."
            },
            "actor":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["stingray.Actor"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the Unit Actor the vehicle was constructed from."
            },
            "tire_longitudinal_slip":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the longitudinal slip of the tire for the specified wheel."
            },
            "set_gear_down":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","boolean"],
                  "rets":["nil"],
                  "args":["vehicle","gear_down"]
                }],
              "desc":"Decrements the current gear of the vehicle by one."
            },
            "has_wheeled_physics":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["boolean"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates whether or not the vehicle uses the `wheeled` physics model."
            },
            "num_forward_gears":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["integer"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the total number of forward gears the vehicle has."
            },
            "set_wheeled_handbrake":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","handbrake"]
                }],
              "desc":"Sets the handbrake value for the wheels in wheeled vehicles."
            },
            "position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the position of the vehicle's center of mass."
            },
            "has_tank_physics":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["boolean"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates whether or not the vehicle uses the `tank` physics model."
            },
            "num_wheels":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["integer"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the total number of wheels on the vehicle."
            },
            "tire_drivable_surface_contact_normal":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the normal of the contact between the specified wheel and the drivable surface."
            },
            "tire_lateral_dir":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the lateral direction of the tire, as used in the calculation of lateral slip\n\t\t\t for the specified wheel."
            },
            "engine_rotation_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["number"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the engine rotation speed."
            },
            "suspension_line_start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the suspension line start in world coordinates for the specifed wheel."
            },
            "unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["stingray.Unit"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the [Unit] that owns the vehicle."
            },
            "set_wheel_rotation_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer","number"],
                  "rets":["nil"],
                  "args":["vehicle","wheel_index","speed"]
                }],
              "desc":"Sets the wheel rotation speed for the specifed wheel."
            },
            "set_wheeled_brake":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","brake"]
                }],
              "desc":"Sets the brake value for the wheels."
            },
            "suspension_line_dir":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the suspension line direction unit vector for the specifed wheel."
            },
            "set_tank_right_brake":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","fval"]
                }],
              "desc":"Sets the brake value for the tank's right wheels."
            },
            "tire_drivable_surface_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["integer"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the index of the drivable surface value underneath the tire of the specified wheel."
            },
            "is_in_air":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["boolean"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates whether or not the vehicle is in air: i."
            },
            "tire_friction":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the friction currently applied to the tire for the specified wheel."
            },
            "tire_lateral_slip":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the lateral slip of the tire for the specified wheel."
            },
            "wheel_rotation_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the rotation speed of the specified wheel."
            },
            "add_force":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["vehicle","force"]
                }],
              "desc":"Adds the specified force to the vehicle's center of mass."
            },
            "set_wheel_rotation_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer","number"],
                  "rets":["nil"],
                  "args":["vehicle","wheel_index","angle"]
                }],
              "desc":"Sets the wheel rotation angle for the specifed wheel."
            },
            "wheel_rotation_angle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the rotation angle of the specified wheel."
            },
            "set_tank_right_thrust":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","fval"]
                }],
              "desc":"Sets the thrust value for the tank's right wheels."
            },
            "set_accelerator":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","accelerator"]
                }],
              "desc":"Sets the acceleration value for the vehicle."
            },
            "set_wheeled_steer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","steer"]
                }],
              "desc":"Sets the steering value for the wheel in wheeled vehicles."
            },
            "forward":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle"]
                }],
              "desc":"Returns the forward direction of the vehicle's chassis."
            },
            "forward_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["number"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates the vehicle's current forward speed along the forward direction of its chassis."
            },
            "set_tank_left_brake":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","fval"]
                }],
              "desc":"Sets the brake value for the tank's left wheels."
            },
            "set_engine_rotation_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","speed"]
                }],
              "desc":"Sets the engine rotation speed."
            },
            "suspension_jounce":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["number"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the suspension jounce for the specifed wheel."
            },
            "set_gear":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["nil"],
                  "args":["vehicle","gear"]
                }],
              "desc":"Sets the current gear for the vehicle."
            },
            "current_gear":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle"],
                  "rets":["integer"],
                  "args":["vehicle"]
                }],
              "desc":"Indicates the gear the vehicle is currently in."
            },
            "set_tank_left_thrust":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","number"],
                  "rets":["nil"],
                  "args":["vehicle","fval"]
                }],
              "desc":"Sets the thrust value for the tank's left wheels."
            },
            "tire_longitudinal_dir":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vehicle","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["vehicle","wheel_index"]
                }],
              "desc":"Returns the longitudinal direction of the tire, as used in the calculation of longitudinal slip\n\t\t\t for the specified wheel."
            }
          },
          "desc":""
        },
        "SteamVoip":{
          "type":"object",
          "members":{
            "destroy_room":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["room_id"]
                }],
              "desc":"Destroys the specified room."
            },
            "leave_room":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient"],
                  "rets":["nil"],
                  "args":["client"]
                }],
              "desc":"Leaves a room."
            },
            "create_room":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Creates a room and returns a unique identifier for it."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["table"],
                  "rets":["nil"],
                  "args":["callback_object"]
                }],
              "desc":"Updates the voice system."
            },
            "join_room":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["stingray.SteamVoipClient"],
                  "args":["host_peer_id","room_id"]
                }],
              "desc":"Joins this peer to the specified room."
            }
          },
          "desc":""
        },
        "World":{
          "type":"object",
          "members":{
            "load_level_with_object_sets":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","string[]","string[]","stingray.Vector3?","stingray.Quaternion?","stingray.Vector3?","string?","string?"],
                  "rets":["stingray.Level"],
                  "args":["world","name","obj_set_names","ignored_obj_set_names","position","rotation","scale","level_id","render_callback"]
                }],
              "desc":"Identical to [load_level()], but does not spawn any objects that are members of object sets unless explicitly told to do so."
            },
            "create_video_player":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","boolean?","boolean?"],
                  "rets":["stingray.VideoPlayer"],
                  "args":["world","resource","loop","add_to_world"]
                }],
              "desc":"Creates a new [VideoPlayer] that plays the specified *."
            },
            "link_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Unit","integer","stingray.Unit","integer?","boolean?"],
                  "rets":["nil"],
                  "args":["world","child","child_node_index","parent","parent_node_index","map_nodes"]
                },{
                  "types":["stingray.World","stingray.Unit","stingray.Unit","integer?","boolean?"],
                  "rets":["nil"],
                  "args":["world","child","parent","parent_node_index","map_nodes"]
                }],
              "desc":"Links a node in one unit to a node in another unit, creating a child-parent relationship."
            },
            "enable_constraint_collisions":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["enable"]
                }],
              "desc":"Globally enables or disables constraint collision functionallity."
            },
            "umbra_toggle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["nil"],
                  "args":["world"]
                }],
              "desc":"Toggles Umbra on/off."
            },
            "umbra_config":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","number"],
                  "rets":["nil"],
                  "args":["world","config_param","value"]
                }],
              "desc":""
            },
            "debug_camera_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["world"]
                }],
              "desc":"Returns the position and orientation of the last camera that was used to render the world."
            },
            "num_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer?","integer?"],
                  "rets":["integer"],
                  "args":["world","effect_id","cloud_index"]
                }],
              "desc":"Returns the number of active particles in a world, a particle effect, or a cloud."
            },
            "link_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","stingray.Unit","integer","stingray.Matrix4x4","string"],
                  "rets":["nil"],
                  "args":["world","effect_id","unit","object","pose","orphaned_policy"]
                }],
              "desc":"Links the particle effect with the specified ID to the specified unit."
            },
            "spawn_unit_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","table?"],
                  "rets":["stingray.Unit"],
                  "args":["world","unit_name","unit_data"]
                }],
              "desc":"Spawns a new instance of a game unit."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["world","indices","indices","indices","value"]
                },{
                  "types":["stingray.World","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["world","indices","indices","value"]
                },{
                  "types":["stingray.World","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["world","indices","value"]
                }],
              "desc":"Stores the specified value in the world's script data object, at a location determined\n\t\tby the specified indices."
            },
            "entities":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.Entity[]"],
                  "args":["world"]
                }],
              "desc":"Returns a table with all the entities in the world."
            },
            "remove_video_player":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.VideoPlayer"],
                  "rets":["nil"],
                  "args":["world","video_player"]
                }],
              "desc":"Removes video player from the world."
            },
            "destroy_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer"],
                  "rets":["nil"],
                  "args":["world","effect_id"]
                }],
              "desc":"Destroys the particle effect with the specified id."
            },
            "vector_field":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.VectorField"],
                  "args":["world","name"]
                }],
              "desc":"Retrieves the vector field with the specified name in the world."
            },
            "storyteller":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.StoryTeller"],
                  "args":["world"]
                }],
              "desc":"Returns the [StoryTeller] for the world, which you can use to play *stories* or cutscenes."
            },
            "set_frustum_inspector_camera":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Camera"],
                  "rets":["nil"],
                  "args":["world","camera"]
                }],
              "desc":"Passing in a camera to this function overrides the regular camera passed to\n\t\t\t[Application."
            },
            "create_screen_gui":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","number?","number?","any(string,number)*"],
                  "rets":["stingray.Gui"],
                  "args":["world","x","y","params"]
                }],
              "desc":"Creates a new screen space [Gui] at pixel coordinates (*x*,*y*)."
            },
            "are_particles_playing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer"],
                  "rets":["boolean"],
                  "args":["world","effect_id"]
                }],
              "desc":"Indicates whether or not the particle effect with the specified ID is currently spawning particles."
            },
            "destroy_shading_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.ShadingEnvironment"],
                  "rets":["nil"],
                  "args":["world","environment"]
                }],
              "desc":"Destroys a shading environment previously created by a call to [create_shading_environment()]."
            },
            "units":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.Unit[]"],
                  "args":["world"]
                }],
              "desc":"Retrieves all units in the specified world."
            },
            "units_by_resource":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.Unit[]"],
                  "args":["world","resource_name"]
                }],
              "desc":"Retrieves all unit instances of the specified resource in the world."
            },
            "create_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","stingray.Vector3","stingray.Quaternion?","stingray.Vector3?"],
                  "rets":["integer"],
                  "args":["world","effect_name","position","rotation","scale"]
                }],
              "desc":"Creates a new particle effect with the specified name at the specified position, with the specified rotation and per-axis scale factor."
            },
            "create_shading_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.ShadingEnvironment"],
                  "args":["world","name"]
                }],
              "desc":"Creates a new [ShadingEnvironment] object with the specified name."
            },
            "spawn_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","string?","stingray.Vector3?","stingray.Quaternion?","boolean?","any(string,table)?"],
                  "rets":["stingray.Unit"],
                  "args":["world","unit_name","level_name","position","orientation","trigger_flow","material"]
                },{
                  "types":["stingray.World","string","string?","stingray.Matrix4x4?","boolean?","string?"],
                  "rets":["stingray.Unit"],
                  "args":["world","unit_name","level_name","transform","trigger_flow","material"]
                }],
              "desc":"Spawns a new instance of a game unit at a specified location."
            },
            "destroy_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Unit"],
                  "rets":["nil"],
                  "args":["world","unit"]
                }],
              "desc":"Destroys a game unit that was previously created by a call to [spawn_unit()]."
            },
            "unit_by_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.Unit?"],
                  "args":["world","name"]
                }],
              "desc":"Finds the unit with the name *name* (as set in the Level Editor) and returns it."
            },
            "num_units":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["integer"],
                  "args":["world"]
                }],
              "desc":"Indicates the number of units that have been created in the specified world."
            },
            "load_level":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","stingray.Vector3?","stingray.Quaternion?","stingray.Vector3?"],
                  "rets":["stingray.Level"],
                  "args":["world","name","position","rotation","scale"]
                }],
              "desc":"Loads the named level into the world at the specified position, rotation, and per-axis scale factors."
            },
            "enable_chain_constrains":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["enable"]
                }],
              "desc":"Globally enables or disables chain constraint functionallity."
            },
            "levels":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.Level[]"],
                  "args":["world"]
                }],
              "desc":"Returns all the levels in the world."
            },
            "destroy_gui":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Gui"],
                  "rets":["nil"],
                  "args":["world","gui"]
                }],
              "desc":"Destroys a gui created with [create_screen_gui()] or [create_world_gui()]."
            },
            "create_line_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","boolean?"],
                  "rets":["stingray.LineObject"],
                  "args":["world","disable_depth_test"]
                }],
              "desc":"Creates a new line object to be used for debug drawing."
            },
            "set_particles_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["world","effect_id","variable_index","value"]
                }],
              "desc":"Sets the value of the specified variable within a particle effect."
            },
            "update_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Unit"],
                  "rets":["nil"],
                  "args":["world","unit"]
                }],
              "desc":"Forces an update of a unit's scene graph after the main world update has been performed."
            },
            "get_world_brightness":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.ShadingEnvironment","stingray.Vector3","string"],
                  "rets":["number"],
                  "args":["world","shading_environment","position","collision_filter"]
                }],
              "desc":"Returns the brightness at a specific world position."
            },
            "destroy_level":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Level"],
                  "rets":["nil"],
                  "args":["world","level"]
                }],
              "desc":"Destroys the specified level and all units that were spawned when the level was loaded."
            },
            "umbra_has_line_of_sight":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Vector3","stingray.Vector3"],
                  "rets":["boolean"],
                  "args":["world","position1","position2"]
                }],
              "desc":"Fast way to check if 2 points has line of sight of each other; in regards to the static geometry in the world."
            },
            "set_particles_life_time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","number"],
                  "rets":["nil"],
                  "args":["world","effect_id","life_time"]
                }],
              "desc":"Sets the value of the life time of a particle effect."
            },
            "physics_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.PhysicsWorld"],
                  "args":["world"]
                }],
              "desc":"Retrieves the physics world maintained by the specified game world."
            },
            "replay":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.Replay?"],
                  "args":["world"]
                }],
              "desc":"Returns a [Replay] object, which you can use to replay events in the world."
            },
            "umbra_available":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["boolean"],
                  "args":["world"]
                }],
              "desc":"Fast way to check if 2 points has line of sight of each other; in regards to the static geometry in the world."
            },
            "umbra_set_gate_closed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Unit","boolean"],
                  "rets":["nil"],
                  "args":["world","unit","gate_closed"]
                }],
              "desc":"Opens/closes an Umbra Gate."
            },
            "scatter_system":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["stingray.ScatterSystem"],
                  "args":["world"]
                }],
              "desc":"Returns the scatter brush system owned by the world."
            },
            "umbra_toggle_shadow_culling":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["nil"],
                  "args":["world"]
                }],
              "desc":""
            },
            "time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["number"],
                  "args":["world"]
                }],
              "desc":"Retrieves the current time in the world: i.e. the sum of all the delta times for every update since the\n\t\tworld was created."
            },
            "add_video_player":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.VideoPlayer"],
                  "rets":["nil"],
                  "args":["world","video_player"]
                }],
              "desc":"Adds video player created by [create_video_player()] to the world."
            },
            "update_animations_with_callback":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","number","fun(nil:nil)"],
                  "rets":["nil"],
                  "args":["world","delta_time","callback"]
                }],
              "desc":"As [update_animations()], but calls the callback function you provide during the animation player\n\t\tupdate."
            },
            "update_animations":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","number?"],
                  "rets":["nil"],
                  "args":["world","delta_time"]
                }],
              "desc":"Updates the animations in the world."
            },
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","any(integer,string)+"],
                  "rets":["boolean"],
                  "args":["world","indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the world's\n\t\tscript data object."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","number?"],
                  "rets":["nil"],
                  "args":["world","delta_time"]
                }],
              "desc":"Updates the engine representation of the world."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","any(integer,string)+"],
                  "rets":["any"],
                  "args":["world","indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the world's script data object from the world."
            },
            "stop_spawning_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer"],
                  "rets":["nil"],
                  "args":["world","effect_id"]
                }],
              "desc":"Stops the particle effect with the specified id from spawning."
            },
            "destroy_line_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.LineObject"],
                  "rets":["nil"],
                  "args":["world","line"]
                }],
              "desc":"Destroys a line object previously created by a call to [create_line_object()]."
            },
            "level_by_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.Level"],
                  "args":["world","level"]
                }],
              "desc":"Returns the level with the specified name."
            },
            "update_scene":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","number?"],
                  "rets":["nil"],
                  "args":["world","delta_time"]
                }],
              "desc":"Updates the physics and scene graphs in the world."
            },
            "has_particles_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","string"],
                  "rets":["boolean"],
                  "args":["world","effect_id","material_name"]
                }],
              "desc":"Checks if a specified material whitin a particle effect exists or not."
            },
            "clear_permanent_lines":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["nil"],
                  "args":["world"]
                }],
              "desc":"Clears any permanent debug lines that have been drawn into the world."
            },
            "umbra_has_line_of_sight_many":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Vector3[]","stingray.Vector3[]","boolean[]"],
                  "rets":["integer"],
                  "args":["world","pos1","pos2","results"]
                }],
              "desc":"Fast way to check if a lot of vec3<->vec3 can \"see\" each other."
            },
            "find_particles_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string","string"],
                  "rets":["integer"],
                  "args":["world","effect_name","variable_name"]
                }],
              "desc":"Finds the index of a particle effect variable with the specified name."
            },
            "unlink_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Unit"],
                  "rets":["nil"],
                  "args":["world","child"]
                }],
              "desc":"Unlinks the specified unit from its parent, if any."
            },
            "destroy_video_player":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.VideoPlayer"],
                  "rets":["nil"],
                  "args":["world","video_player"]
                }],
              "desc":"Destroys the video player created by [create_video_player()]."
            },
            "delta_time":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["number"],
                  "args":["world"]
                }],
              "desc":"Retrieves the delta time value used during the last world update."
            },
            "create_world_gui":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Matrix4x4","number","number","string*"],
                  "rets":["stingray.Gui"],
                  "args":["world","pose","width","height","params"]
                }],
              "desc":"Creates a new [Gui] that lives in the 3D world."
            },
            "set_shading_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.ShadingEnvironment","string"],
                  "rets":["nil"],
                  "args":["world","environment","name"]
                }],
              "desc":"Changes the [ShadingEnvironment] instance to point to shading environment data with the specified name."
            },
            "num_levels":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["integer"],
                  "args":["world"]
                }],
              "desc":"Returns the number of levels in the world."
            },
            "move_particles":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","integer","stingray.Vector3","stingray.Quaternion?","stingray.Vector3?"],
                  "rets":["nil"],
                  "args":["world","effect_id","position","rotation","scale"]
                }],
              "desc":"Moves the spawn point of the particle effect with the specified id to the given position and rotation,\n\t\twith the specified per-axis scale factor."
            }
          },
          "desc":""
        },
        "Stats":{
          "type":"object",
          "members":{
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["steam_stat_progress"],
                  "args":["token"]
                }],
              "desc":"Retrieves information about the current state of the operation identified by the specified token."
            },
            "reset":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Clears all stats set for the user."
            },
            "get":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number?","string?"],
                  "args":["name"]
                }],
              "desc":"Returns the value of the named statistic."
            },
            "set":{
              "type":"function",
              "signatures":[{
                  "types":["string","any(integer,number)"],
                  "rets":["integer?","string?"],
                  "args":["name","value"]
                }],
              "desc":"Sets the statistics with the specified names to the specified values."
            }
          },
          "desc":""
        },
        "Achievement":{
          "type":"object",
          "members":{
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["table"],
                  "args":["token"]
                }],
              "desc":"Retrieves information about the current state of the operation identified by the specified token."
            },
            "unlock":{
              "type":"function",
              "signatures":[{
                  "types":["string+"],
                  "rets":["integer","string?"],
                  "args":["achievement"]
                }],
              "desc":"Unlocks the specified achievements."
            },
            "unlocked":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["boolean"],
                  "args":["achievement"]
                }],
              "desc":"Indicates whether or not the achievement is unlocked."
            },
            "reset":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Clears all achievements that the player has unlocked."
            }
          },
          "desc":""
        },
        "SteamPingThread":{
          "signatures":[{
              "types":["any(stingray.SteamClient,stingray.SteamGameServer)"],
              "rets":["stingray.SteamPingThread"],
              "args":["connect"]
            }],
          "type":"object",
          "members":{
            "add_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamPingThread","string"],
                  "rets":["nil"],
                  "args":["self","peer_id"]
                }],
              "desc":"Adds the specified peer to the list of peers that the ping server should keep track of."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamPingThread"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Destroys the specified ping thread: frees all memory used by it, and stops the thread."
            },
            "remove_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamPingThread","string"],
                  "rets":["nil"],
                  "args":["self","peer_id"]
                }],
              "desc":"Removes a peer that was previously added with [add_peer()], and stops tracking ping times to that peer."
            },
            "ping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamPingThread","string"],
                  "rets":["number"],
                  "args":["self","peer_id"]
                }],
              "desc":"Returns the ping time to the specified peer."
            }
          },
          "desc":""
        },
        "SteamServerBrowser":{
          "type":"object",
          "members":{
            "clear_filters":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Removes all previously added filters."
            },
            "add_favorite":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","string","integer","integer"],
                  "rets":["nil"],
                  "args":["self","ip","connection_port","query_port"]
                }],
              "desc":"Adds the specified server to the personal list of favorite servers, if the server is not already a favorite."
            },
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser"],
                  "rets":["boolean"],
                  "args":["self"]
                }],
              "desc":"Indicates whether or not the list is currently refreshing."
            },
            "is_fetching_players":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["boolean","boolean"],
                  "args":["self","index"]
                }],
              "desc":"Indicates whether or not the list of players on the specfied server are currently being fetched, and whether or not the last fetch operation\n\t\tencountered an error."
            },
            "abort_refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Cancels a request to refresh the server list."
            },
            "HISTORY":{
              "desc":"integer = <internal>\nSearch for servers amongst recently used servers.",
              "type":"constant"
            },
            "remove_favorite":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","string","integer","integer"],
                  "rets":["nil"],
                  "args":["self","ip","connection_port","query_port"]
                }],
              "desc":"Removes the specified server from the personal list of favorite servers, if it is present."
            },
            "request_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","i"]
                }],
              "desc":"Fetches the server data set in the game server with the specified index."
            },
            "is_fetching_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["boolean","boolean"],
                  "args":["self","i"]
                }],
              "desc":"Indicates whether or not the server data is currently being fetched, and whether or not the last fetch operation\n\t\tencountered an error."
            },
            "server":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["steam_server_info"],
                  "args":["self","i"]
                }],
              "desc":"Returns information about the game server with the specified index."
            },
            "players":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["steam_server_player[]?"],
                  "args":["self","index"]
                }],
              "desc":"Returns information about the players on the server with the specified index."
            },
            "refresh_server":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","i"]
                }],
              "desc":"Refresh the specifed server from the list of already fetched servers."
            },
            "FAVORITES":{
              "desc":"integer = <internal>\nSearch for servers amongst favorites.",
              "type":"constant"
            },
            "num_servers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Returns the number of game servers found."
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","server_type"]
                }],
              "desc":"Refreshes the server list with all servers that match the specified type."
            },
            "FRIENDS":{
              "desc":"integer = <internal>\nSearch for servers where the player's friends are.",
              "type":"constant"
            },
            "request_players":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer"],
                  "rets":["nil"],
                  "args":["self","index"]
                }],
              "desc":"Fetches the list players on the specified game server."
            },
            "LAN":{
              "desc":"integer = <internal>\nSearch for servers on the LAN.",
              "type":"constant"
            },
            "INTERNET":{
              "desc":"integer = <internal>\nSearch for servers on the Internet.",
              "type":"constant"
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","integer","string"],
                  "rets":["string?"],
                  "args":["self","index","key"]
                }],
              "desc":"Returns the data value previously stored with the specified key on the server with the specified index."
            },
            "add_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamServerBrowser","steam_server_browser_filter"],
                  "rets":["nil"],
                  "args":["self","value"]
                },{
                  "types":["stingray.SteamServerBrowser","string","string"],
                  "rets":["nil"],
                  "args":["self","key","value"]
                }],
              "desc":"Filters the list of servers using the criteria in the specified table."
            }
          },
          "desc":""
        },
        "Replay":{
          "type":"object",
          "members":{
            "record_debug_line":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay","stingray.Quaternion","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["replay","color","p1","p2"]
                }],
              "desc":"Records a debug line of the specified color, drawn between points *p1* and *p2*."
            },
            "RECORD_MODE_DISABLED":{
              "desc":"integer = <internal>\nSpecifies that recording should be disabled for the unit. No data will be saved.",
              "type":"constant"
            },
            "start_playback":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay"],
                  "rets":["nil"],
                  "args":["replay"]
                }],
              "desc":"Starts playing back the recorded data."
            },
            "set_frame":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay","integer"],
                  "rets":["nil"],
                  "args":["replay","frame"]
                }],
              "desc":"Sets the current playback frame."
            },
            "set_unit_record_mode":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay","stingray.Unit","integer"],
                  "rets":["nil"],
                  "args":["replay","unit","mode"]
                }],
              "desc":"Controls how data for the specified unit should be recorded."
            },
            "is_playing_back":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay"],
                  "rets":["boolean"],
                  "args":["replay"]
                }],
              "desc":"Indicates whether or not the replay system is currently in playback mode."
            },
            "record_world_debug_text":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay","stingray.Quaternion","stingray.Vector3","string"],
                  "rets":["nil"],
                  "args":["replay","color","position","text"]
                }],
              "desc":"Records a line of debug text to be drawn in the specified color at the specified position in world space."
            },
            "RECORD_MODE_TRANSFORM":{
              "desc":"integer = <internal>\nSpecifies that only the transform of the root node is recorded for the unit: i.e. its position and rotation.\n\t\t\tThis is the default recording mode.",
              "type":"constant"
            },
            "num_frames":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay"],
                  "rets":["integer"],
                  "args":["replay"]
                }],
              "desc":"Returns the number of frames of data have been recorded by the replay system."
            },
            "RECORD_MODE_SCENE_GRAPH":{
              "desc":"integer = <internal>\nSpecifies that the transforms of all nodes in the unit's scene graph are recorded. This means that the\n\t\t\tunit's entire animation is saved.",
              "type":"constant"
            },
            "frame":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay"],
                  "rets":["integer"],
                  "args":["replay"]
                }],
              "desc":"Returns the current playback frame."
            },
            "stop_playback":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay"],
                  "rets":["nil"],
                  "args":["replay"]
                }],
              "desc":"Ends playback, and returns to recording mode."
            },
            "record_screen_debug_text":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Replay","stingray.Quaternion","stingray.Vector3","string"],
                  "rets":["nil"],
                  "args":["replay","color","position","text"]
                }],
              "desc":"Records a line of debug text to be drawn in the specified color at the specified position in screen space."
            }
          },
          "desc":""
        },
        "Achievements2017":{
          "signatures":[{
              "types":["number"],
              "rets":["stingray.Achievements2017"],
              "args":["user"]
            }],
          "type":"object",
          "members":{
            "set_progress_offline":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017","string","integer"],
                  "rets":["string?"],
                  "args":["self","id","progress"]
                }],
              "desc":"Sets progress for an achievement without the need of any prior call to refresh()."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017","string"],
                  "rets":["integer"],
                  "args":["self","id"]
                }],
              "desc":"Returns progress for an achievement."
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Refreshes the specified Achievements2017 object."
            },
            "PROGRESS_TASK_IDLE":{
              "desc":"integer = <internal>\nTask is idle, nothing has happened.",
              "type":"constant"
            },
            "PROGRESS_TASK_FAILED":{
              "desc":"integer = <internal>\nAn error occurred while performing the task.",
              "type":"constant"
            },
            "PROGRESS_TASK_COMPLETED":{
              "desc":"integer = <internal>\nThe task has completed successfully.",
              "type":"constant"
            },
            "info":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017","string"],
                  "rets":["table"],
                  "args":["self","id"]
                }],
              "desc":"This function fires an event (e."
            },
            "progress_task_status":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Gets the status of the set_progress task."
            },
            "set_progress":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017","string","integer"],
                  "rets":["string?"],
                  "args":["self","id","progress"]
                }],
              "desc":"Sets progress for an achievement."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Destroys the specified Achievements2017 object."
            },
            "PROGRESS_TASK_STARTED":{
              "desc":"integer = <internal>\nThe task is in progress. It has been started but not yet completed.",
              "type":"constant"
            },
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Achievements2017"],
                  "rets":["boolean"],
                  "args":["self"]
                }],
              "desc":"Indicates whether or not the specified Achievements2017 object has finished refreshing."
            }
          },
          "desc":""
        },
        "SteamClient":{
          "type":"object",
          "members":{
            "server_browser":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamClient"],
                  "rets":["stingray.SteamServerBrowser"],
                  "args":["self"]
                }],
              "desc":"Returns a [SteamServerBrowser] that can be used to search for [SteamGameServer] game servers."
            },
            "lobby_browser":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamClient"],
                  "rets":["stingray.SteamLobbyBrowser"],
                  "args":["self"]
                }],
              "desc":"Returns a [SteamLobbyBrowser] that can be used to search for [SteamLobby] lobbies."
            }
          },
          "desc":""
        },
        "SteamGameServerLobby":{
          "type":"object",
          "members":{
            "REJECTED":{
              "desc":"integer = <internal>\nThis state indicates that the server rejected the connection.",
              "type":"constant"
            },
            "auto_update_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Enables automatic updating of server data."
            },
            "TIMEOUT":{
              "desc":"integer = <internal>\nThis state indicates that the server did not respond in time.",
              "type":"constant"
            },
            "FAILED":{
              "desc":"integer = <internal>\nThis state indicates that this lobby has lost connection with the server or the server denied access. The lobby may be rejected due\n\t\tto server being full or  other various reason.",
              "type":"constant"
            },
            "JOINING":{
              "desc":"integer = <internal>\nThis state means the lobby is still trying to connect to the server to allocate a slot.",
              "type":"constant"
            },
            "SERVER_IS_FULL":{
              "desc":"integer = <internal>\nThis state indicates that the server is full.",
              "type":"constant"
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["string[]"],
                  "args":["self"]
                }],
              "desc":"Retrieves the IDs of all members of the lobby."
            },
            "JOINED":{
              "desc":"integer = <internal>\nThis state indicates that this lobby is connected to the server. A server slot is allocated now and the lobby should be able to play.",
              "type":"constant"
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Retrieves the current state of the server connection."
            },
            "version":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["string"],
                  "args":["self"]
                }],
              "desc":"Retrieves the server version from the server."
            },
            "game_description":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["string"],
                  "args":["self"]
                }],
              "desc":"Retrieves the game description from the server."
            },
            "fail_reason":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Returns the reason for a connection failure with the game server."
            },
            "request_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Begins returning the requested server data."
            },
            "game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Returns the Steam ID of the game server."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby","string"],
                  "rets":["string?"],
                  "args":["self","key"]
                }],
              "desc":"Retrieves a particular server data value previously stored for the lobby."
            },
            "server_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServerLobby"],
                  "rets":["string"],
                  "args":["self"]
                }],
              "desc":"Retrieves the server name from the server."
            }
          },
          "desc":""
        },
        "EACServer":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.EACServer"],
                  "rets":["nil"],
                  "args":["server"]
                }],
              "desc":"Destroys the server instance."
            },
            "remove_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.EACServer","string"],
                  "rets":["nil"],
                  "args":["server","peer_id"]
                }],
              "desc":"Removes a peer from the server."
            },
            "add_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.EACServer","string","string?"],
                  "rets":["nil"],
                  "args":["server","peer_id","player_name"]
                }],
              "desc":"Adds a peer to the server."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string","string"],
                  "args":["peer_id"]
                }],
              "desc":"Gets the EAC status and reason for a specific peer."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["stingray.EACServer"],
                  "args":["peer_id","name"]
                }],
              "desc":"Creates a server instance."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.EACServer"],
                  "rets":["nil"],
                  "args":["server"]
                }],
              "desc":"Updates the server."
            }
          },
          "desc":""
        },
        "TouchPanel1":{
          "desc":"",
          "type":"object"
        },
        "SteamServerLookup":{
          "type":"object",
          "members":{
            "CONNECTING":{
              "desc":"integer = <internal>\nIndicates that server is still trying to connect to the master server.",
              "type":"constant"
            },
            "DONE":{
              "desc":"integer = <internal>\nIndicates that the lookup is done and there is an ID to fetch from the lookup object.",
              "type":"constant"
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"This closes or cancels a request for a steam server id."
            },
            "id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Gets the server ID."
            },
            "FAILED":{
              "desc":"integer = <internal>\nIndicates that the lookup failed.",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Checks the status of the id lookup."
            }
          },
          "desc":""
        },
        "Leaderboard":{
          "type":"object",
          "members":{
            "KEEP_BEST":{
              "desc":"integer = <internal>\nThe existing score will only be updated if the new one is better.",
              "type":"constant"
            },
            "ranking_for_friends":{
              "type":"function",
              "signatures":[{
                  "types":["string","table?"],
                  "rets":["stingray.LeaderboardTransactionToken"],
                  "args":["board","data_template"]
                }],
              "desc":"Fetches ranking information for the current player and friends."
            },
            "FORCE_UPDATE":{
              "desc":"integer = <internal>\nThe leaderboard score will always be updated with the new value.",
              "type":"constant"
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LeaderboardTransactionToken"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"Frees the memory used by the engine to monitor the request that corresponds to the specified token."
            },
            "ranking_around_self":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer","integer","table?"],
                  "rets":["stingray.LeaderboardTransactionToken"],
                  "args":["board","ranks_before","ranks_after","data_template"]
                }],
              "desc":"Fetches ranking information for players around the logged in player."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LeaderboardTransactionToken"],
                  "rets":["table"],
                  "args":["token"]
                }],
              "desc":"Retrieves information about the current state of the operation identified by the specified token."
            },
            "INT":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["userdata"],
                  "args":["num_bits"]
                }],
              "desc":"Returns a type specifier for a signed integer, to be used in data template tables."
            },
            "BOOL":{
              "desc":"integer = <internal>\nA type specifier for a boolean value, to be used in data template tables.",
              "type":"constant"
            },
            "STRING":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["userdata"],
                  "args":["num_chars"]
                }],
              "desc":"Returns a type specifier for a fixed size string, to be used in data template tables."
            },
            "UINT":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["userdata"],
                  "args":["num_bits"]
                }],
              "desc":"Returns a type specifier for an unsigned integer, to be used in data template tables."
            },
            "register_score":{
              "type":"function",
              "signatures":[{
                  "types":["string","any(integer,string)","integer?","table?","table?"],
                  "rets":["stingray.LeaderboardTransactionToken"],
                  "args":["board","score","update_method","data_template","data"]
                }],
              "desc":"Registers a new score for the specified leaderboard."
            },
            "ranking_range":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer","integer","table?"],
                  "rets":["stingray.LeaderboardTransactionToken"],
                  "args":["board","start_range","num_ranks","data_template"]
                }],
              "desc":"Fetches a part of a leaderboard."
            },
            "NUMBER":{
              "desc":"integer = <internal>\nA type specifier for a floating-point number, to be used in data template tables.",
              "type":"constant"
            },
            "init_leaderboards":{
              "type":"function",
              "signatures":[{
                  "types":["any(string,string[])"],
                  "rets":["stingray.LeaderboardTransactionToken"],
                  "args":["boards"]
                }],
              "desc":"Preloads the specified leaderboards."
            }
          },
          "desc":""
        },
        "Presence":{
          "type":"object",
          "members":{
            "set":{
              "type":"function",
              "signatures":[{
                  "types":["number","string","boolean?"],
                  "rets":["boolean"],
                  "args":["user","presence","is_active_in_title"]
                }],
              "desc":"This functions sets the presence string for the specified user."
            },
            "presence":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["string?"],
                  "args":["friend","key"]
                }],
              "desc":"Retrieves the presence string value for the specified key set by the specified friend."
            },
            "advertise_playing":{
              "type":"function",
              "signatures":[{
                  "types":["any(stingray.SteamLobby,string)","string?","string?"],
                  "rets":["nil"],
                  "args":["game","extra_params","password"]
                }],
              "desc":"Sets the presence information about how friends can join the same game this player is currently playing."
            },
            "set_presence":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["key","value"]
                }],
              "desc":"Sets a key-value pair that friends can fetch by calling [presence()]."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"This function closes the async token for the Presence."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["boolean","string?","integer?"],
                  "args":["token"]
                }],
              "desc":"This function checks whether the Presence."
            },
            "stop_advertise_playing":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Clears presence information about a game server or lobby."
            },
            "get_async":{
              "type":"function",
              "signatures":[{
                  "types":["number","string"],
                  "rets":["integer"],
                  "args":["user","xuid"]
                }],
              "desc":""
            },
            "set_async":{
              "type":"function",
              "signatures":[{
                  "types":["number","string","boolean?"],
                  "rets":["boolean"],
                  "args":["user","presence","is_active_in_title"]
                }],
              "desc":"This functions sets the presence string for the specified user asynchronously."
            }
          },
          "desc":""
        },
        "BoundingVolume":{
          "desc":"",
          "type":"object"
        },
        "Steam":{
          "type":"object",
          "members":{
            "user_country_code":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the 2 digit ISO 3166-1-alpha-2 format country code this Steam client is running in (as looked up via an IP-to-location database)\n\t\t e."
            },
            "connected":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the current Steam client has a live connection to the Steam servers."
            },
            "owns_app":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["app_id"]
                }],
              "desc":"Indicates whether or not the application (not the DLC) is owned by the player."
            },
            "user_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Retrieves the online ID of the logged-in player."
            },
            "user_name":{
              "type":"function",
              "signatures":[{
                  "types":["string?"],
                  "rets":["string"],
                  "args":["id"]
                }],
              "desc":"Retrieves the user name of the specified player."
            },
            "open_url":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["url"]
                }],
              "desc":"Opens the specified URL on the overlay browser."
            },
            "app_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the Steam app ID for the current application."
            },
            "id_32bit_to_id":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["string"],
                  "args":["id"]
                },{
                  "types":["number"],
                  "rets":["string"],
                  "args":["id"]
                }],
              "desc":"Retrieves the 64-bit representation of an input 32-bit online ID."
            },
            "install_event":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer?"],
                  "args":[]
                }],
              "desc":"Detects content that has been installed during the game session."
            },
            "id_to_id_32bit":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["number"],
                  "args":["id"]
                }],
              "desc":"Retrieves the 32-bit representation of an input online ID."
            },
            "language":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the language set on Steam, as a short string."
            },
            "is_installed":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["app_id"]
                }],
              "desc":"Indicates whether or not the DLC associated with the provided application id is owned and installed."
            }
          },
          "desc":""
        },
        "TransferStatus":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "ERROR":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "PAUSED":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "RUNNING":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            },
            "WAITING":{
              "desc":"integer = <internal>\nSee XDK documentation for details",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Material":{
          "type":"object",
          "members":{
            "set_color":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["material","variable","color"]
                }],
              "desc":"Sets a color variable in the material to the specified value."
            },
            "set_scalar":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","number"],
                  "rets":["nil"],
                  "args":["material","variable","value"]
                }],
              "desc":"Sets a scalar variable in the material to the specified value."
            },
            "set_vector2":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["material","variable","vector2"]
                }],
              "desc":"Sets a two-dimensional vector variable in the material to the specified value."
            },
            "id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material"],
                  "rets":["integer"],
                  "args":["material"]
                }],
              "desc":"Retrieves the ID of the material."
            },
            "set_shader_pass_flag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","boolean"],
                  "rets":["nil"],
                  "args":["material","flag","enabled"]
                }],
              "desc":"Determines whether or not the specified shader pass is enabled for the material."
            },
            "set_matrix4x4":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["material","variable","value"]
                }],
              "desc":"Sets a matrix variable in the material to the specified value."
            },
            "set_vector4":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["material","variable","vector4"]
                }],
              "desc":"Sets a four-dimensional vector variable in the material to the specified value."
            },
            "set_resource":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.RenderResource"],
                  "rets":["nil"],
                  "args":["material","slot","resource"]
                }],
              "desc":"Sets a resource slot in the material to the specified texture resource."
            },
            "set_texture":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","string"],
                  "rets":["nil"],
                  "args":["material","slot","texture"]
                }],
              "desc":"Sets a texture slot in the material to the specified texture resource."
            },
            "set_vector3":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Material","string","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["material","variable","vector3"]
                }],
              "desc":"Sets a three-dimensional vector variable in the material to the specified value."
            }
          },
          "desc":""
        },
        "PS4Pad2":{
          "desc":"",
          "type":"object"
        },
        "RefTracker":{
          "signatures":[{
              "types":["string?"],
              "rets":["stingray.RefTracker"],
              "args":["name"]
            }],
          "type":"object",
          "members":{
            "name":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the name of the tracker object, as set by the constructor."
            }
          },
          "desc":""
        },
        "SteamGameServer":{
          "type":"object",
          "members":{
            "DISCONNECTED":{
              "desc":"integer = <internal>\nIndicates that server has lost contact with the master server.",
              "type":"constant"
            },
            "remove_member":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["nil"],
                  "args":["self","player"]
                }],
              "desc":"Removes a member from the server list."
            },
            "app_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the Steam app ID of the game the server is running."
            },
            "CONNECTING":{
              "desc":"integer = <internal>\nIndicates that server is still trying to connect to the master server.",
              "type":"constant"
            },
            "CONNECTED":{
              "desc":"integer = <internal>\nIndicates that server is connected to the master server.",
              "type":"constant"
            },
            "name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["string"],
                  "args":["self","peer"]
                }],
              "desc":"Returns the name of the peer on the server, or an empty string if the peer is unknown."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","table"],
                  "rets":["nil"],
                  "args":["self","value"]
                },{
                  "types":["stingray.SteamGameServer","string","string"],
                  "rets":["nil"],
                  "args":["self","key","value"]
                }],
              "desc":"Sets data for the server, which can be fetched by the server browser."
            },
            "set_score":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string","integer"],
                  "rets":["nil"],
                  "args":["self","peer","score"]
                }],
              "desc":"Sets the score for a specified peer on the server."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer"],
                  "rets":["integer"],
                  "args":["self"]
                }],
              "desc":"Returns the status of the connection with the master server."
            },
            "set_server_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["nil"],
                  "args":["self","name"]
                }],
              "desc":"Sets the server name."
            },
            "set_game_tags":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["nil"],
                  "args":["self","tags"]
                }],
              "desc":"Sets game tags for the server, which players can use to find the server in the server browser."
            },
            "run_callbacks":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","table"],
                  "rets":["nil"],
                  "args":["self","callback_object"]
                }],
              "desc":"Checks for game server events, and alerts you by calling a function of the specified callback object."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer"],
                  "rets":["string[]"],
                  "args":["self"]
                }],
              "desc":"Returns the peer IDs of all members on the game server."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["string"],
                  "args":["self","key"]
                }],
              "desc":"Returns a single string value from the data set for the server."
            },
            "country_code":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the 2 digit ISO 3166-1-alpha-2 format country code this server is running in (as looked up via an IP-to-location database)\n\t\t\t e."
            },
            "set_map":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamGameServer","string"],
                  "rets":["nil"],
                  "args":["self","map"]
                }],
              "desc":"Sets the map name on the server."
            }
          },
          "desc":""
        },
        "GwNavTraverseLogic":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTraverseLogic"],
                  "rets":["nil"],
                  "args":["traverse_logic"]
                }],
              "desc":"Destroys a [GwNavTraverseLogic]."
            },
            "set_navtag_layer_cost_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTraverseLogic","stingray.GwNavTagLayerCostTable"],
                  "rets":["nil"],
                  "args":["nav_traverse_logic","cost_table"]
                }],
              "desc":"Set navtag_layer_cost_table to the given nav_traverse_logic."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.NavCostMapTagCostTableObject"],
                  "rets":["stingray.GwNavTraverseLogic"],
                  "args":["nav_world","cost_table"]
                }],
              "desc":"Creates a [GwNavTraverseLogic]."
            }
          },
          "desc":""
        },
        "LODObject":{
          "type":"object",
          "members":{
            "bounding_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LODObject"],
                  "rets":["stingray.BoundingVolume"],
                  "args":["lod"]
                }],
              "desc":"Retrieves the bounding volume of the LOD object."
            },
            "set_orientation_node":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LODObject","stingray.Unit","integer"],
                  "rets":["nil"],
                  "args":["lod","unit","node_idx"]
                }],
              "desc":"Changes the LOD object's orientation node to the scene graph node pointed to by the unit and node."
            },
            "set_static_height":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LODObject","number"],
                  "rets":["nil"],
                  "args":["lod","height"]
                }],
              "desc":"Forces a static LOD height to be used."
            },
            "set_static_select":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LODObject","integer"],
                  "rets":["nil"],
                  "args":["lod","select"]
                }],
              "desc":"Forces a static LOD step to be used."
            },
            "set_bounding_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LODObject","stingray.BoundingVolume"],
                  "rets":["nil"],
                  "args":["lod","bv"]
                }],
              "desc":"Sets the bounding volume that the LOD object should use when calculating screen space coverage."
            }
          },
          "desc":""
        },
        "Tss":{
          "type":"object",
          "members":{
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["slot"]
                }],
              "desc":"Gets the data stored in the specified slot for the target."
            },
            "has_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Returns *true* if there is a usable result for the [stingray."
            },
            "get_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean","any?"],
                  "args":["id"]
                }],
              "desc":"Returns the result of a [stingray."
            }
          },
          "desc":""
        },
        "VoiceChatRestriction":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "MUTED":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "UNKNOWN_RELATIONSHIP":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NOT_SIGNED_IN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "CANNOT_LISTEN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NOT_ALLOWED":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "CANNOT_TALK":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NOT_IN_SAME_CHANNEL":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "SocialPresenceFilter":{
          "type":"object",
          "members":{
            "ALL_TITLE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "TITLE_ONLINE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "ALL":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "ALL_OFFLINE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "ALL_ONLINE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "TITLE_OFFLINE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "SceneGraphComponent":{
          "type":"object",
          "members":{
            "world_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the world rotation of the node."
            },
            "local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the local pose of the node with respect to its parent."
            },
            "local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the local position of the node with respect to its parent."
            },
            "set_local_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["sgc","entity","node","position"]
                }],
              "desc":"Sets the local position of the node."
            },
            "world_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the world pose of the node."
            },
            "world_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the world position of the node."
            },
            "local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Quaternion"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the local rotation of the node with respect to its parent."
            },
            "num_nodes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity"],
                  "rets":["integer"],
                  "args":["sgc","entity"]
                }],
              "desc":"Returns the number of nodes in the entity's scene graph component."
            },
            "set_local_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["sgc","entity","node","rotation"]
                }],
              "desc":"Sets the local rotation of the node."
            },
            "local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the local scale of the entity with respect to its parent."
            },
            "node_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","string"],
                  "rets":["integer"],
                  "args":["sgc","entity","name"]
                }],
              "desc":"Returns the index of the node `name` in the scene graph."
            },
            "parent":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer"],
                  "rets":["integer?"],
                  "args":["sgc","entity","node"]
                }],
              "desc":"Returns the parent of a node in the scene graph component."
            },
            "set_local_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["sgc","entity","node","pose"]
                }],
              "desc":"Sets the local pose of the node."
            },
            "set_local_scale":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SceneGraphComponent","stingray.Entity","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["sgc","entity","node","scale"]
                }],
              "desc":"Sets the local scale of the node."
            }
          },
          "desc":""
        },
        "VoiceChatTalkingMode":{
          "type":"object",
          "members":{
            "TALKING_OVER_HEADSET":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NOT_TALKING":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "TALKING_OVER_KINECT":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Pad3":{
          "desc":"",
          "type":"object"
        },
        "LineObject":{
          "type":"object",
          "members":{
            "add_box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Matrix4x4","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["line_object","color","pose","extents"]
                }],
              "desc":"Adds an oriented box."
            },
            "add_circle":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","number","stingray.Vector3","integer?"],
                  "rets":["nil"],
                  "args":["line_object","color","center","radius","normal","segments"]
                }],
              "desc":"Adds a two-dimensional circle at the *center* position, with the specified radius and normal vector."
            },
            "add_half_sphere":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","number","stingray.Vector3","integer?","integer?"],
                  "rets":["nil"],
                  "args":["line_object","color","center","radius","normal","segments","parts"]
                }],
              "desc":"Adds a half-sphere at the *center* position, with the specified normal from the circular plane."
            },
            "add_capsule":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","stingray.Vector3","number","integer?","integer?","integer?"],
                  "rets":["nil"],
                  "args":["line_object","color","from","to","radius","segments","circles","bars"]
                }],
              "desc":"Adds a capsule as a line between *from* and *to* fattened to the specified radius."
            },
            "reset":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject"],
                  "rets":["nil"],
                  "args":["line_object"]
                }],
              "desc":"Clears the lines of the line object."
            },
            "dispatch":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.LineObject"],
                  "rets":["nil"],
                  "args":["world","line_object"]
                }],
              "desc":"Queues the line object for rendering in the specified world."
            },
            "add_cone":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","stingray.Vector3","number","integer?","integer?"],
                  "rets":["nil"],
                  "args":["line_object","color","from","to","radius","segments","bars"]
                }],
              "desc":"Adds a cone with the tip at *from* and the center of the base at *to*."
            },
            "add_sphere":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","number","integer?","integer?"],
                  "rets":["nil"],
                  "args":["line_object","color","center","radius","segments","parts"]
                }],
              "desc":"Adds a three-dimensional sphere at the *center* position, with specified radius."
            },
            "add_line":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LineObject","stingray.Quaternion","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["line_object","color","from","to"]
                }],
              "desc":"Adds to the line object a new line between *from* and *to*, with the specified color."
            }
          },
          "desc":""
        },
        "NavCostMapVolumeObject":{
          "desc":"",
          "type":"object"
        },
        "Deadlock":{
          "type":"object",
          "members":{
            "pause":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Pause deadlock detection."
            },
            "unpause":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Turn on deadlock detection after pausing."
            }
          },
          "desc":""
        },
        "Stats2017":{
          "type":"object",
          "members":{
            "set_stat_as_integer":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["nil"],
                  "args":["stat_name","stat_value"]
                }],
              "desc":""
            },
            "delete_stat":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "flush":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["is_high_priority"]
                }],
              "desc":""
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Updates the stats system."
            },
            "get_stat_names":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table?"],
                  "args":[]
                }],
              "desc":"Gets all stat names currently in the stat catalog, or nil in case the call failed."
            },
            "set_stat_as_string":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["stat_name","stat_value"]
                }],
              "desc":""
            },
            "get_stat":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["any?"],
                  "args":[]
                }],
              "desc":""
            },
            "set_stat_as_float":{
              "type":"function",
              "signatures":[{
                  "types":["string","number"],
                  "rets":["nil"],
                  "args":["stat_name","stat_value"]
                }],
              "desc":""
            },
            "add_local_user":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_id"]
                }],
              "desc":""
            },
            "remove_local_user":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "SocialRelationshipFilter":{
          "type":"object",
          "members":{
            "FAVORITE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "FRIENDS":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Actor":{
          "type":"object",
          "members":{
            "set_angular_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity"]
                }],
              "desc":"Sets the angular velocity of the actor."
            },
            "is_scene_query_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not this actor is included when performing scene queries such as raycasts or overlap tests."
            },
            "add_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity"]
                }],
              "desc":"Adds a delta velocity to the actor's current velocity."
            },
            "push_at":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity","mass","pos"]
                }],
              "desc":"Pushes the specified actor as if it were hit by an object with the specified velocity and mass."
            },
            "is_physical":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not the actor is a physical (physics-driven) actor."
            },
            "set_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity"]
                }],
              "desc":"Sets the velocity of the actor."
            },
            "is_collision_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates if an actor is set up to collide with others during physics simulations."
            },
            "is_kinematic":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not the actor is a kinematic actor: i."
            },
            "teleport_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","pos"]
                }],
              "desc":"Sets a new position for the actor."
            },
            "pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["actor"]
                }],
              "desc":"Returns the current pose of the actor: its position and rotation expressed as a [Matrix4x4]."
            },
            "set_kinematic":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","boolean"],
                  "rets":["nil"],
                  "args":["actor","kinematic"]
                }],
              "desc":"Determines whether or not this actor is kinematic: i."
            },
            "is_dynamic":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not the actor is dynamic (non-static)."
            },
            "wake_up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["nil"],
                  "args":["actor"]
                }],
              "desc":"Wakes up the specified actor."
            },
            "add_impulse_at":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","impulse","pos"]
                }],
              "desc":"Adds a impulse at a particular position in the actor, causing rotation."
            },
            "rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Quaternion"],
                  "args":["actor"]
                }],
              "desc":"Returns the rotation of the actor."
            },
            "set_angular_damping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","number"],
                  "rets":["nil"],
                  "args":["actor","damping"]
                }],
              "desc":"Sets the angular damping of the actor."
            },
            "angular_damping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["number"],
                  "args":["actor"]
                }],
              "desc":"Returns the angular damping of the actor."
            },
            "set_linear_damping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","number"],
                  "rets":["nil"],
                  "args":["actor","damping"]
                }],
              "desc":"Sets the linear damping of the actor."
            },
            "add_torque_impulse":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","impulse"]
                }],
              "desc":"Adds a rotational impulse to the actor."
            },
            "is_gravity_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not this actor is affected by gravity."
            },
            "put_to_sleep":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["nil"],
                  "args":["actor"]
                }],
              "desc":"Puts the specified actor to sleep."
            },
            "velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Vector3"],
                  "args":["actor"]
                }],
              "desc":"Returns the velocity of the actor."
            },
            "is_update_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates if an actor is being updated from animation driven data."
            },
            "unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Unit"],
                  "args":["actor"]
                }],
              "desc":"Returns the [Unit] that owns this actor, if any."
            },
            "linear_damping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["number"],
                  "args":["actor"]
                }],
              "desc":"Returns the linear damping of the actor."
            },
            "mass":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["number"],
                  "args":["actor"]
                }],
              "desc":"Returns the mass of the actor."
            },
            "point_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["actor","p"]
                }],
              "desc":"Returns the velocity at a point *p* on the surface of the actor."
            },
            "node":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["integer"],
                  "args":["actor"]
                }],
              "desc":"Returns the index of the node this actor occupies in the scene graph of its owning [Unit]."
            },
            "set_scene_query_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","boolean"],
                  "rets":["nil"],
                  "args":["actor","enabled"]
                }],
              "desc":"Determines whether or not this actor is included when performing scene queries such as raycasts or overlap tests."
            },
            "teleport_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["actor","pos"]
                }],
              "desc":"Sets a new rotation for the actor."
            },
            "set_collision_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","boolean"],
                  "rets":["nil"],
                  "args":["actor","enabled"]
                }],
              "desc":"Determines whether or not this actor collides with other actors during physics simulation."
            },
            "teleport_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["actor","pos"]
                }],
              "desc":"Sets the new pose of the actor: its position and rotation expressed as a [Matrix4x4]."
            },
            "is_sleeping":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not this actor is sleeping."
            },
            "set_gravity_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","boolean"],
                  "rets":["nil"],
                  "args":["actor","enabled"]
                }],
              "desc":"Determines whether or not this actor is affected by gravity."
            },
            "push":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["actor","velocity","mass"]
                }],
              "desc":"Pushes the specified actor as if it were hit by an object with the specified velocity and mass."
            },
            "add_angular_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity"]
                }],
              "desc":"Adds a delta angular velocity to the actor's current velocity."
            },
            "add_velocity_at":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","velocity","pos"]
                }],
              "desc":"Adds a delta velocity to the actor's current velocity at a particular position in the actor, causing rotation."
            },
            "add_impulse":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["actor","impulse"]
                }],
              "desc":"Adds a momentary impulse to the actor, expressed as `(mass * velocity)` in three dimensions."
            },
            "angular_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Vector3"],
                  "args":["actor"]
                }],
              "desc":"Returns the angular velocity of the actor."
            },
            "set_update_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","boolean"],
                  "rets":["nil"],
                  "args":["actor","enabled"]
                }],
              "desc":"Determines whether or not this actor will have it's pose updated from animation."
            },
            "is_static":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["boolean"],
                  "args":["actor"]
                }],
              "desc":"Indicates whether or not the actor is a static actor."
            },
            "set_collision_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","string"],
                  "rets":["nil"],
                  "args":["actor","filter"]
                }],
              "desc":"Changes the collision filter used by the actor."
            },
            "center_of_mass":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Vector3"],
                  "args":["actor"]
                }],
              "desc":"Returns the position of the actor's center of mass."
            },
            "debug_draw":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor","stingray.LineObject","stingray.Quaternion","stingray.Matrix4x4?"],
                  "rets":["nil"],
                  "args":["actor","lineobject","color","camera_tm"]
                }],
              "desc":"Draws the actor using the specified line object."
            },
            "position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Actor"],
                  "rets":["stingray.Vector3"],
                  "args":["actor"]
                }],
              "desc":"Returns the position of the specified actor."
            }
          },
          "desc":""
        },
        "VoiceChatParticipantType":{
          "type":"object",
          "members":{
            "LISTENER":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "TALKER":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "NONE":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "BYSTANDER":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "SteamVoipClient":{
          "type":"object",
          "members":{
            "select_out":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient","boolean","string?"],
                  "rets":["nil"],
                  "args":["self","enable","peer_id"]
                }],
              "desc":"Specify who can *receive* your voice through this client."
            },
            "select_in":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient","boolean","string?"],
                  "rets":["nil"],
                  "args":["self","enable","peer_id"]
                }],
              "desc":"Specify whose voices you want to hear in the room that the specified client is connected to."
            },
            "broken_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient"],
                  "rets":["boolean"],
                  "args":["self"]
                }],
              "desc":"Indicates whether or not the connection to the host from the specified client has failed."
            },
            "room_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient"],
                  "rets":["string"],
                  "args":["self"]
                }],
              "desc":"Returns the ID of the room the specified client is connected to."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SteamVoipClient"],
                  "rets":["string[]"],
                  "args":["self"]
                }],
              "desc":"Returns a table that lists the IDs of all members in the room."
            }
          },
          "desc":""
        },
        "CommandWindow":{
          "type":"object",
          "members":{
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Closes an open command window."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"This function fetches the key presses in the console."
            },
            "print":{
              "type":"function",
              "signatures":[{
                  "types":["any+"],
                  "rets":["nil"],
                  "args":["parameters"]
                }],
              "desc":"Prints all the parameters to the command window after converting them to strings."
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["title"]
                }],
              "desc":"Opens a new command window for output."
            },
            "read_line":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Reads a line of text that is typed into the console window."
            }
          },
          "desc":""
        },
        "GwNavSmartObjectInterval":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavSmartObjectInterval"],
                  "rets":["nil"],
                  "args":["interval"]
                }],
              "desc":"Destroys a [GwNavSmartObjectInterval]."
            },
            "exit_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavSmartObjectInterval"],
                  "rets":["stingray.Vector3","boolean"],
                  "args":["interval"]
                }],
              "desc":"Returns the entrance position of a [GwNavSmartObjectInterval]."
            },
            "smartobject_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavSmartObjectInterval"],
                  "rets":["integer"],
                  "args":["interval"]
                }],
              "desc":"Returns the SmartObject id of a [GwNavSmartObjectInterval]."
            },
            "entrance_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavSmartObjectInterval"],
                  "rets":["stingray.Vector3","boolean"],
                  "args":["interval"]
                }],
              "desc":"Returns the entrance position of a [GwNavSmartObjectInterval]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld"],
                  "rets":["stingray.GwNavSmartObjectInterval"],
                  "args":["navworld"]
                }],
              "desc":"Creates a [GwNavSmartObjectInterval]."
            },
            "can_traverse_smartobject":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavSmartObjectInterval"],
                  "rets":["boolean"],
                  "args":["interval"]
                }],
              "desc":"Returns if the [GwNavSmartObjectInterval] can be traversed."
            }
          },
          "desc":""
        },
        "ScatterSystem":{
          "type":"object",
          "members":{
            "destroy_brush":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","integer"],
                  "rets":["nil"],
                  "args":["scatter_system","brush_id"]
                }],
              "desc":"Destroys the specified brush and all units spawned by it."
            },
            "destroy_all_brushes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem"],
                  "rets":["nil"],
                  "args":["scatter_system"]
                }],
              "desc":"Destroys all brushes in the scatter system."
            },
            "make_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["integer"],
                  "args":["scatter_system","position","rotation"]
                }],
              "desc":"Creates a new observer for the brush system."
            },
            "move_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","integer","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["nil"],
                  "args":["scatter_system","observer_id","position","rotation"]
                }],
              "desc":"Moves the observer to the specified position and rotation, and updates unit visibility accordingly."
            },
            "destroy_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","integer"],
                  "rets":["nil"],
                  "args":["scatter_system","observer_id"]
                }],
              "desc":"Destroys the observer with the specified index."
            },
            "unspawn":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","integer"],
                  "rets":["nil"],
                  "args":["scatter_system","unit_id"]
                }],
              "desc":"Unspawns the unit with the specified id."
            },
            "make_brush":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","scatter_system_brush"],
                  "rets":["integer"],
                  "args":["scatter_system","settings"]
                }],
              "desc":"Creates a new brush that spawns a particular kind of unit."
            },
            "spawn":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ScatterSystem","integer","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["integer"],
                  "args":["scatter_system","brush_id","position","rotation"]
                }],
              "desc":"Spawns a unit using the specified brush at the specified position and rotation, and returns an index that you can use\n\t\tin a call to [unspawn()]."
            }
          },
          "desc":""
        },
        "Oculus":{
          "type":"object",
          "members":{
            "create_device":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["lightuserdata"],
                  "args":["index"]
                }],
              "desc":"Creates an Oculus device from the specified index."
            },
            "detect_devices":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the number of Oculus devices that are currently connected."
            },
            "eye_poses":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata"],
                  "rets":["stingray.Vector3","stingray.Quaternion","stingray.Vector3","stingray.Quaternion"],
                  "args":["device"]
                }],
              "desc":"Returns the current poses for each eye."
            },
            "destroy_device":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata"],
                  "rets":["nil"],
                  "args":["device"]
                }],
              "desc":"Destroys and frees the specified device."
            },
            "enable_device":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata","boolean"],
                  "rets":["nil"],
                  "args":["device","enabled"]
                }],
              "desc":"Enables or disables the specified device."
            },
            "create_debug_device":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["lightuserdata"],
                  "args":[]
                }],
              "desc":"Creates a virtual Oculus device which can be used for debugging if no physical ones are detected."
            },
            "init":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata","integer","integer","integer","string","string","number","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["device","hmd_caps","distortion_caps","tracking_caps","left_eye_rt","right_eye_rt","left_eye_fov_left","left_eye_fov_right","left_eye_fov_down","left_eye_fov_up","right_eye_fov_left","right_eye_fov_right","right_eye_fov_down","right_eye_fov_up"]
                }],
              "desc":"Initializes the device based on specified parameters."
            },
            "recenter_pose":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata"],
                  "rets":["nil"],
                  "args":["device"]
                }],
              "desc":"Recenters the sensor orientation."
            },
            "eye_info":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata","integer"],
                  "rets":["table"],
                  "args":["device","eye"]
                }],
              "desc":"Returns a table containing information on the specified eye for a given device."
            },
            "device_info":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata"],
                  "rets":["table"],
                  "args":["device"]
                }],
              "desc":"Returns a table containing information on the specified device."
            },
            "dismiss_warning":{
              "type":"function",
              "signatures":[{
                  "types":["lightuserdata"],
                  "rets":["nil"],
                  "args":["device"]
                }],
              "desc":"Dismisses the HMD warning displayed on screen."
            }
          },
          "desc":""
        },
        "PsnClient":{
          "type":"object",
          "members":{
            "room_browser":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnClient"],
                  "rets":["stingray.PsnRoomBrowser"],
                  "args":["client"]
                }],
              "desc":"Returns the room browser, which can be used to browse the PSN for games that the player can join."
            },
            "lost_context":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnClient"],
                  "rets":["boolean"],
                  "args":["client"]
                }],
              "desc":"Indicates whether or not the network context for the client has been lost."
            },
            "ready":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanClient"],
                  "rets":["boolean"],
                  "args":["client"]
                }],
              "desc":"Indicates whether or not the client has completed its handshake with the PSN system and is ready to create\n\t\tand/or search for rooms."
            }
          },
          "desc":""
        },
        "ResourcePackage":{
          "type":"object",
          "members":{
            "can_unload":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["boolean"],
                  "args":["package"]
                }],
              "desc":"Indicates whether or not the package can be unloaded."
            },
            "has_loaded":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["boolean"],
                  "args":["package"]
                }],
              "desc":"Indicates whether or not the background thread has completed loading the package."
            },
            "unload":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["nil"],
                  "args":["package"]
                }],
              "desc":"Unloads the resources in the specified package."
            },
            "get_locked_resources":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage","string[]"],
                  "rets":["nil"],
                  "args":["package","results"]
                }],
              "desc":""
            },
            "flush":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["nil"],
                  "args":["package"]
                }],
              "desc":"Brings the resources in the package online."
            },
            "load":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["nil"],
                  "args":["package"]
                }],
              "desc":"Starts loading the specified package in the background."
            }
          },
          "desc":""
        },
        "SoundStreamSource":{
          "desc":"",
          "type":"object"
        },
        "Vector2":{
          "type":"function",
          "signatures":[{
              "types":["number","number"],
              "rets":["vector2"],
              "args":["x","y"]
            }],
          "desc":"Creates a vector with two components for specifying 2D positions and sizes."
        },
        "Cloth":{
          "type":"object",
          "members":{
            "destroy_collision":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Cloth","number"],
                  "rets":["nil"],
                  "args":["cloth","id"]
                }],
              "desc":"Destroys a collision plane previously created with [create_collision_plane()]."
            },
            "move_collision_plane":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Cloth","number","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["cloth","id","point","normal"]
                }],
              "desc":"Moves the specified collision plane to a new position and/or orientation."
            },
            "create_collision_plane":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Cloth","stingray.Vector3","stingray.Vector3"],
                  "rets":["number"],
                  "args":["cloth","point","normal"]
                }],
              "desc":"Creates a collision plane that the cloth actor will collide with."
            }
          },
          "desc":""
        },
        "UnitSynchronizer":{
          "type":"object",
          "members":{
            "game_object_id_to_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UnitSynchronizer","integer"],
                  "rets":["stingray.Unit"],
                  "args":["unit_sync","id"]
                }],
              "desc":"Retrieves the [Unit] object that corresponds to the game object with the specified game object ID."
            },
            "unit_to_game_object_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UnitSynchronizer","stingray.Unit"],
                  "rets":["integer"],
                  "args":["unit_sync","unit"]
                }],
              "desc":"Retrieves the game object ID that corresponds to the specified [Unit]."
            },
            "set_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UnitSynchronizer","stingray.World"],
                  "rets":["nil"],
                  "args":["unit_sync","world"]
                }],
              "desc":"Sets the game world in which the unit synchronizer should create and destroy units."
            },
            "spawn_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UnitSynchronizer","string","string","stingray.Vector3?","stingray.Quaternion?"],
                  "rets":["stingray.Unit"],
                  "args":["unit_sync","type","unit_name","position","rotation"]
                }],
              "desc":"Spawns a new unit through the [UnitSynchronizer]."
            },
            "destroy_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.UnitSynchronizer","stingray.Unit"],
                  "rets":["nil"],
                  "args":["unit_sync","unit"]
                }],
              "desc":"Destroys the specified unit through the [UnitSynchronizer]."
            }
          },
          "desc":""
        },
        "ExtendedReplay":{
          "type":"object",
          "members":{
            "moving_units":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":"Returns information about all moving units in the replay world."
            },
            "set_frame":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["frame"]
                }],
              "desc":"Sets the current playback frame."
            },
            "frame":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the current playback frame."
            },
            "num_frames":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the number of frames of data have been recorded by the replay system."
            },
            "render_objects":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table?"],
                  "args":[]
                }],
              "desc":"Returns information needed for the [World."
            },
            "set_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["nil"],
                  "args":["world"]
                }],
              "desc":"Sets the world to replay events in."
            },
            "packages_to_load":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":"Gets a list of resource packages to load."
            },
            "delta_time":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":"Gets the seconds passed in the replay file since last update."
            }
          },
          "desc":""
        },
        "MultiplayerSessionGroup":{
          "type":"object",
          "members":{
            "all_sessions_have_status":{
              "type":"function",
              "signatures":[{
                  "types":["integer","number"],
                  "rets":["boolean"],
                  "args":["session_group_id","session_status"]
                }],
              "desc":""
            },
            "master_session":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer?"],
                  "args":["session_group_id"]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "Trophies":{
          "type":"object",
          "members":{
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred during the operation.",
              "type":"constant"
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has successfully completed.",
              "type":"constant"
            },
            "free":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Frees all data that the trophies system keeps track of for the operation with the specified\n\t\tID."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns the status of the operation with the specified ID."
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operation has started, but not yet finished.",
              "type":"constant"
            },
            "unlock":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["integer"],
                  "args":["user_id","trophy_id"]
                }],
              "desc":"Unlocks the trophy with the *trophy_id* for the player with the *user_id*."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nEither the ID was never created, or it has already been freed.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "XboxOne":{
          "type":"object",
          "members":{
            "OFFLINE":{
              "desc":"integer = <internal>\nThe console is not connected to Xbox Live.",
              "type":"constant"
            },
            "ONLINE":{
              "desc":"integer = <internal>\nThe console is connected to Xbox Live",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nThe console Xbox Live connection is unknown.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Raycast":{
          "type":"object",
          "members":{
            "cast":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Raycast","stingray.Vector3","stingray.Vector3","number?"],
                  "rets":["any(boolean,collision_hit[])","stingray.Vector3?","number?","stingray.Vector3?","stingray.Actor?"],
                  "args":["raycast","start","dir","length"]
                }],
              "desc":"Tests for collisions with the physics objects that live in the same [PhysicsWorld] as the specified [Raycast] object by casting\n\t\ta ray in a given direction from a given starting point."
            }
          },
          "desc":""
        },
        "XboxLive":{
          "type":"object",
          "members":{
            "show_gamercard":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string"],
                  "rets":["nil"],
                  "args":["user_id","xbox_user_id"]
                }],
              "desc":"Shows the gamercard for the specified user."
            },
            "user_info_changed":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "num_users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":""
            },
            "locale":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":""
            },
            "last_game_invite":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["map(string,string)?"],
                  "args":[]
                }],
              "desc":"Returns the arguments from the game invite accepted event."
            },
            "users":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["user_cached_info*"],
                  "args":[]
                }],
              "desc":"Fetches the information from the user cache for all local users."
            },
            "show_account_picker":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_index"]
                },{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["user_index"]
                }],
              "desc":"Shows the account picker for the specified user."
            },
            "show_marketplace":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "marketplace_inventory_release":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"This function releases the async token for the XboxLive."
            },
            "user_cache_changed":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "region":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":""
            },
            "title_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":""
            },
            "user_info":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["user_cached_info"],
                  "args":["user_id"]
                }],
              "desc":"Gets the information from the user cache for the supplied user."
            },
            "get_marketplace_inventory":{
              "type":"function",
              "signatures":[{
                  "types":["number","table"],
                  "rets":["number"],
                  "args":["user_id","product_ids"]
                }],
              "desc":""
            },
            "online_state":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":""
            },
            "marketplace_inventory_status":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["boolean","boolean","boolean","table?"],
                  "args":["token"]
                }],
              "desc":"This function checks whether the XboxLive."
            },
            "has_new_game_invite":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "CtlState":{
          "type":"object",
          "members":{
            "IPOBTAINING":{
              "desc":"integer = <internal>\nThe connection state is 'IP obtaining'.",
              "type":"constant"
            },
            "IPOBTAINED":{
              "desc":"integer = <internal>\nThe connection state is 'IP obtained'.",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the current status."
            },
            "CONNECTING":{
              "desc":"integer = <internal>\nThe connection state is 'connecting'.",
              "type":"constant"
            },
            "DISCONNECTED":{
              "desc":"integer = <internal>\nThe connection state is 'disconnected'.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nThe connection state is 'unknown' due to an error.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "NpCommerceDialog":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nThe NpCommerceDialog is not initialized or has already beed terminated.",
              "type":"constant"
            },
            "INITIALIZED":{
              "desc":"integer = <internal>\nThe NpCommerceDialog is initialized but not opened.",
              "type":"constant"
            },
            "RESULT_USER_CANCELED":{
              "desc":"integer = <internal>\nIndicates that the user canceled the purchase.",
              "type":"constant"
            },
            "terminate":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Terminates the [NpCommerceDialog[ system and frees related resources."
            },
            "RUNNING":{
              "desc":"integer = <internal>\nThe NpCommerceDialog is open.",
              "type":"constant"
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer+"],
                  "rets":["nil"],
                  "args":["user_id","features"]
                }],
              "desc":"Opens the [NpCommerceDialog] for the user with the specified ID, with the Playstation Plus features specified."
            },
            "RESULT_USER_PURCHASED":{
              "desc":"integer = <internal>\nIndicates that the user authorized the purchase.",
              "type":"constant"
            },
            "RESULT_OK":{
              "desc":"integer = <internal>\nOK.",
              "type":"constant"
            },
            "FINISHED":{
              "desc":"integer = <internal>\nThe NpCommerceDialog is closed and finished.",
              "type":"constant"
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes the [NpCommerceDialog] system."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the last updated status of the dialog."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Updates and returns the status of the [NpCommerceDialog]."
            },
            "result":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer","boolean"],
                  "args":[]
                }],
              "desc":"Retrieves the result of the dialog."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Aborts the [NpCommerceDialog] and closes it."
            }
          },
          "desc":""
        },
        "NpCheck":{
          "type":"object",
          "members":{
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred during the operation.",
              "type":"constant"
            },
            "free":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Frees all data that the NpCheck system keeps track of for the operation with the specified ID."
            },
            "notify_plus":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer+"],
                  "rets":["nil"],
                  "args":["user_id","features"]
                }],
              "desc":"Use this function to send a notification to the system each time a PlayStation Plus feature is used."
            },
            "ASYNC_MULTIPLAY":{
              "desc":"integer = <internal>\nTo check access to the asynchronous multiplayer feature.",
              "type":"constant"
            },
            "REALTIME_MULTIPLAY":{
              "desc":"integer = <internal>\nTo check access to the real-time multiplayer feature.",
              "type":"constant"
            },
            "error_code":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer?"],
                  "args":["id"]
                }],
              "desc":"Returns the last error code encountered by the operation, if any."
            },
            "check_plus":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer+"],
                  "rets":["integer"],
                  "args":["user_id","features"]
                }],
              "desc":"Checks whether or not the player has access to the specified Playstation Plus features."
            },
            "set_content_restriction":{
              "type":"function",
              "signatures":[{
                  "types":["integer","ps4_npcheck_country_age_restriction[]"],
                  "rets":["nil"],
                  "args":["default_age_restriction","t"]
                }],
              "desc":"Sets the content age restriction."
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operation has started, but not yet finished.",
              "type":"constant"
            },
            "check_availability":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["user_id"]
                }],
              "desc":"Checks whether or not the user has access to network features."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns the status of the operation with the specified ID."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nEither the ID was never created, or it has already been freed.",
              "type":"constant"
            },
            "result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["boolean"],
                  "args":["id"]
                }],
              "desc":"Indicates whether or not the user has access to the specified features."
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has successfully completed.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "Synergy":{
          "type":"object",
          "members":{
            "clipboard":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the content of the Synergy clipboard."
            },
            "connect":{
              "type":"function",
              "signatures":[{
                  "types":["string","string","integer","integer"],
                  "rets":["nil"],
                  "args":["ip","client_name","client_width","client_height"]
                }],
              "desc":"Connects the engine to a Synergy server."
            }
          },
          "desc":""
        },
        "DataComponent":{
          "desc":"",
          "type":"object"
        },
        "SimulatedTouchPanel":{
          "desc":"",
          "type":"object"
        },
        "SessionInvitation":{
          "type":"object",
          "members":{
            "play_together_list":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table?"],
                  "args":[]
                }],
              "desc":"Returns a list of account IDs for players who are waiting for invites to your game."
            }
          },
          "desc":""
        },
        "VectorField":{
          "type":"object",
          "members":{
            "evaluate":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VectorField","stingray.Vector3[]"],
                  "rets":["stingray.Vector3[]"],
                  "args":["vector_field","points"]
                },{
                  "types":["stingray.VectorField","stingray.Vector3"],
                  "rets":["stingray.Vector3"],
                  "args":["vector_field","point"]
                }],
              "desc":"Applies the vector field to the specified input positions, and returns a list of the transformed positions."
            },
            "change":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VectorField","integer","string","table","table"],
                  "rets":["nil"],
                  "args":["vector_field","id","effect","parameters","settings"]
                }],
              "desc":"Changes the effect with the specified ID to use the specified parameters."
            },
            "remove":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VectorField","integer"],
                  "rets":["nil"],
                  "args":["vector_field","id"]
                }],
              "desc":"Removes the effect with the specified ID."
            },
            "add":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.VectorField","string","table","table"],
                  "rets":["integer"],
                  "args":["vector_field","effect","parameters","settings"]
                }],
              "desc":"Adds a new effect to the vector field."
            }
          },
          "desc":""
        },
        "Renderer":{
          "type":"object",
          "members":{
            "create_resource":{
              "type":"function",
              "signatures":[{
                  "types":["string","string","integer","integer"],
                  "rets":["stingray.RenderResource"],
                  "args":["type","format","width","height"]
                }],
              "desc":"Creates a GPU resource."
            },
            "set_automatic_streaming":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["on_off"]
                }],
              "desc":"Toggles automatic texture streaming."
            },
            "immediate_streaming":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["on_off"]
                }],
              "desc":"Toggles immediate streaming mode."
            },
            "request_to_stream_all_mips_for_unit":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Requests the texture streaming system to load all mip levels for all textures used by a unit."
            },
            "destroy_resource":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.RenderResource"],
                  "rets":["nil"],
                  "args":["resource"]
                }],
              "desc":"Destroys a GPU resource."
            },
            "get_automatic_streaming":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Get the current automatic texture streaming status."
            },
            "flush_streamed_textures":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Requests the texture streaming system to unload all texture data from its shared pool."
            },
            "request_textures_to_highest_mip_level":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Requests the texture streaming system to load all mip levels for all visible textures."
            },
            "set_texture_requested_mip_level":{
              "type":"function",
              "signatures":[{
                  "types":["string","integer"],
                  "rets":["nil"],
                  "args":["texture_resource","mip_level"]
                }],
              "desc":"Requests the texture streaming system to load a specific mip level for the specified texture."
            },
            "run_resource_generator":{
              "type":"function",
              "signatures":[{
                  "types":["string","table"],
                  "rets":["nil"],
                  "args":["generator","resource_mapping"]
                }],
              "desc":"Runs an arbitrary resource generator wihtin the render_config file."
            },
            "override_texture_pool_size":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["on_off"]
                }],
              "desc":"Determines whether or not the texture streaming system is permitted to increase the size of its\nshared memory pool above the limit set by the `streaming_texture_pool_size` setting in the project's\n*settings."
            },
            "flush_intermediate_streaming_buffer":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Requests the texture streaming system to unload all texture data from its intermediate buffer."
            },
            "is_all_mips_loaded_for_unit":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"returns true if all mips have been loaded for all textures used by the unit."
            }
          },
          "desc":""
        },
        "Score":{
          "type":"object",
          "members":{
            "ranking_result":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["ps4_score_ranking_results"],
                  "args":["id"]
                }],
              "desc":"Returns the result of a ranking operation."
            },
            "free":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["id"]
                }],
              "desc":"Frees all data that the score system keeps track of for the operation with the specified ID."
            },
            "get_ranking_by_np_id":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer[]"],
                  "rets":["integer"],
                  "args":["user_id","board","account_ids"]
                }],
              "desc":"Same as [stingray."
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nEither the ID was never created, or it has already been freed.",
              "type":"constant"
            },
            "get_ranking_by_range":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","integer","integer"],
                  "rets":["integer"],
                  "args":["user_id","board","start","size"]
                }],
              "desc":"Requests a sequence of rankings from the server."
            },
            "ERROR":{
              "desc":"integer = <internal>\nAn error occurred during the operation.",
              "type":"constant"
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["integer"],
                  "args":["id"]
                }],
              "desc":"Returns the status of the operation with the specified id."
            },
            "record":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer","number"],
                  "rets":["integer"],
                  "args":["user_id","board","score"]
                }],
              "desc":"Records the score for the specified user on the board."
            },
            "STARTED":{
              "desc":"integer = <internal>\nThe operation has started, but not yet finished.",
              "type":"constant"
            },
            "COMPLETED":{
              "desc":"integer = <internal>\nThe operation has successfully completed.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "SessionJobStatus":{
          "type":"object",
          "members":{
            "WORKING":{
              "desc":"integer = <internal>\nThe job is in progress.",
              "type":"constant"
            },
            "FAILED":{
              "desc":"integer = <internal>\nThe job have failed",
              "type":"constant"
            },
            "NOT_RUNNING":{
              "desc":"integer = <internal>\nThe job has either never been started or it has already been freed.",
              "type":"constant"
            },
            "COMPLETE":{
              "desc":"integer = <internal>\nThe job has finished",
              "type":"constant"
            }
          },
          "desc":""
        },
        "WwiseWorld":{
          "type":"object",
          "members":{
            "add_soundscape_listener":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","listener_id"]
                }],
              "desc":"Adds the specified listener to the WwiseWorld's soundscape."
            },
            "has_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["boolean"],
                  "args":["self","source_id"]
                }],
              "desc":"Indicates whether or not the given source exists (i."
            },
            "remove_soundscape_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","ss_source_id"]
                }],
              "desc":"Removes a soundscape source from the the world."
            },
            "add_default_listeners":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","listener_id"]
                }],
              "desc":"Adds the given listener to the list of default listeners."
            },
            "remove_source_listeners":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","integer"],
                  "rets":["nil"],
                  "args":["self","source_id","listener_id"]
                }],
              "desc":"Removes the specified listener from the specified source."
            },
            "set_obstruction_and_occlusion_for_soundscape_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","number","number"],
                  "rets":["nil"],
                  "args":["self","ss_source","obstruction","occlusion"]
                }],
              "desc":"Sets the obstruction and occlusion values for given soundscape source."
            },
            "trigger_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string"],
                  "rets":["integer","integer"],
                  "args":["self","event_name"]
                },{
                  "types":["stingray.WwiseWorld","string","integer"],
                  "rets":["integer","integer"],
                  "args":["self","event_name","source_id"]
                },{
                  "types":["stingray.WwiseWorld","string","stingray.Matrix4x4"],
                  "rets":["integer","integer"],
                  "args":["self","event_name","pose"]
                },{
                  "types":["stingray.WwiseWorld","string","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["integer","integer"],
                  "args":["self","event_name","position","rotation"]
                },{
                  "types":["stingray.WwiseWorld","string","stingray.Unit","integer?"],
                  "rets":["integer","integer"],
                  "args":["self","event_name","unit","unit_object"]
                }],
              "desc":"Triggers a new event and returns the ID of the global unpositioned source for the given WwiseWorld."
            },
            "set_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string","number"],
                  "rets":["nil"],
                  "args":["self","name","value"]
                }],
              "desc":"Sets the given environment bus to the control output volume given for *all* sources in this world."
            },
            "pause_all":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Pauses all currently playing events in the Wwise world."
            },
            "reset_aux_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Disables all aux environment buses by sending a 0 control output value for them."
            },
            "get_playing_elapsed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["number"],
                  "args":["self","playing_id"]
                }],
              "desc":"Returns time, in milliseconds, since the given event began playing."
            },
            "make_auto_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","stingray.Matrix4x4"],
                  "rets":["integer"],
                  "args":["self","pose"]
                },{
                  "types":["stingray.WwiseWorld","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["integer"],
                  "args":["self","position","rotation"]
                },{
                  "types":["stingray.WwiseWorld","stingray.Unit","integer?"],
                  "rets":["integer"],
                  "args":["self","unit","object"]
                }],
              "desc":"Creates a new Wwise object source for the given game source and returns the ID of the source."
            },
            "resume_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","playing_id"]
                }],
              "desc":"Resumes playing an event previously paused by a call to [pause_event()] or [pause_all()]."
            },
            "add_source_listeners":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","integer"],
                  "rets":["nil"],
                  "args":["self","source_id","listener_id"]
                }],
              "desc":"Adds the specified listener to the specified source."
            },
            "is_playing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["boolean"],
                  "args":["self","event_id"]
                }],
              "desc":"Indicates whether or not the given playing event is active."
            },
            "set_source_parameter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","string","number"],
                  "rets":["nil"],
                  "args":["self","source_id","name","value"]
                }],
              "desc":"Routes the given parameter name and value to the corresponding Wwise object parameter of the specified source."
            },
            "stop_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","playing_id"]
                }],
              "desc":"Stops a currently playing event whose numeric ID matches the specified ID."
            },
            "post_trigger":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","string"],
                  "rets":["nil"],
                  "args":["self","source_id","name"]
                }],
              "desc":"Triggers the given trigger for the given source."
            },
            "stop_all":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Stops all currently playing events in the Wwise world."
            },
            "set_listener":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["self","listener_id","transform"]
                }],
              "desc":"Sets the listener to the specified position."
            },
            "pause_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","playing_id"]
                }],
              "desc":"Temporarily pauses a currently playing event whose numeric ID matches the specified ID."
            },
            "stop_voip_output":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","playing_id"]
                }],
              "desc":"Stop playing voip event and free resources."
            },
            "set_dry_environment":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","number"],
                  "rets":["nil"],
                  "args":["self","value"]
                }],
              "desc":"Sets the dry bus value for *all* sources in this world."
            },
            "start_voip_output":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string","integer"],
                  "rets":["integer"],
                  "args":["self","event_name","source_id"]
                }],
              "desc":"Uses the Wwise Audio Input Plugin to play an event to be fed data from a VoIP client."
            },
            "destroy_manual_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","source_id"]
                }],
              "desc":"Destroys the given source."
            },
            "set_obstruction_and_occlusion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","integer","number","number"],
                  "rets":["nil"],
                  "args":["self","listener","source","obstruction","occlusion"]
                }],
              "desc":"Sets the obstruction and occlusion values for given source and listener."
            },
            "make_manual_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","stingray.Matrix4x4"],
                  "rets":["integer"],
                  "args":["self","pose"]
                },{
                  "types":["stingray.WwiseWorld","stingray.Vector3","stingray.Quaternion?"],
                  "rets":["integer"],
                  "args":["self","position","rotation"]
                },{
                  "types":["stingray.WwiseWorld","stingray.Unit","integer?"],
                  "rets":["integer"],
                  "args":["self","unit","object"]
                }],
              "desc":"Creates a new Wwise object source for the given game source, and returns the ID of the source."
            },
            "remove_default_listeners":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","listener_id"]
                }],
              "desc":"Removes the given listener from the default listeners list."
            },
            "set_dry_environment_for_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","number"],
                  "rets":["nil"],
                  "args":["self","source","value"]
                }],
              "desc":"Sets the given environment bus dry value for the given source."
            },
            "set_switch":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string","string","integer"],
                  "rets":["nil"],
                  "args":["self","group","state","source_id"]
                }],
              "desc":"Sets the state of a switch group Wwise object."
            },
            "set_global_parameter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string","number"],
                  "rets":["nil"],
                  "args":["self","name","value"]
                }],
              "desc":"Routes the given parameter name and value to the corresponding Wwise global parameter."
            },
            "remove_soundscape_listener":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer"],
                  "rets":["nil"],
                  "args":["self","listener_id"]
                }],
              "desc":"Removes the specified listener from the WwiseWorld's soundscape."
            },
            "reset_environment_for_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Disables all aux environment buses on the given source by sending a 0 control output value for them."
            },
            "add_soundscape_unit_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","string","stingray.Unit","integer","integer","any(number,stingray.Vector3)","integer","number","number","number?"],
                  "rets":["integer"],
                  "args":["self","event_name","unit","unit_object","shape_type","shape_scale","positioning","min_distance","max_distance","trigger_range"]
                }],
              "desc":"Adds a Soundscape source to the world."
            },
            "set_environment_for_source":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","string","number"],
                  "rets":["nil"],
                  "args":["self","source","name","value"]
                }],
              "desc":"Sets the given bus to the control output volume given for the given source."
            },
            "set_source_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["self","source_id","position"]
                }],
              "desc":"Moves the specified source to the specified position."
            },
            "resume_all":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld"],
                  "rets":["nil"],
                  "args":["self"]
                }],
              "desc":"Resumes playing all events in the Wwise world that were previously paused by a call to [pause_event()] or [pause_all()]."
            },
            "set_source_pose":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.WwiseWorld","integer","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["self","source_id","transform"]
                }],
              "desc":"Moves the specified source to the specified position and rotation."
            }
          },
          "desc":""
        },
        "HumanIK":{
          "type":"object",
          "members":{
            "character_get_constraint_index_from_constraint_id":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_id"]
                }],
              "desc":"Retrieve the index of a Constraint int a Character evaluation context that is associated to a specific Constraint ID."
            },
            "creature_section_motion_get_amplitude":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the amplitude for the specified Section Motion Constraint."
            },
            "character_set_blend_alpha":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","alpha"]
                }],
              "desc":"Sets the alpha value for a specific Constraint in a Character evaluation context."
            },
            "character_offset_position_set_vector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","delta"]
                }],
              "desc":"This is a tuning operation for an offset position Constraint."
            },
            "character_fingers_set_left":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","left"]
                }],
              "desc":"This is a tuning operation for a fingers control Constraint."
            },
            "character_plant_get_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_section_motion_get_frequency":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the frequency for the specified Section Motion Constraint."
            },
            "character_dump":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Dump all Character evaluation contexts information in the log."
            },
            "creature_stats_get_section_last_section_err_q_reach":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3","number"],
                  "args":["context_index","section_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "character_push_reach_orientation":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","euler_orientation","world_space","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a reach orientation Constraint on a Character context IK Constraint stack."
            },
            "creature_chain_properties_get_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index for the specified Chain Properties Constraint."
            },
            "creature_push_chain_pin":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain"]
                }],
              "desc":"Push a Chain pin Constraint on a Creature context IK Constraint stack\n\t\t The 'Chain pin' Constraint enables you to pin a Chain effector to its current FK transform."
            },
            "creature_get_section_effector_transform":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Quaternion"],
                  "args":["context_index","section_index"]
                }],
              "desc":"Retrieve the transformation (both position and orientation) of a Section Effector for a Creature evaluation context."
            },
            "creature_num_contexts":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":"Returns the number of evaluation contexts for Creatures HumanIK currently manages."
            },
            "creature_get_chain_node_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","chain_index","node_index","fk"]
                }],
              "desc":"Retrieve the position of a node in a Chain for a Creature evaluation context."
            },
            "character_look_at_get_chest_contribution":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the chest contribution factor for a look at constraint."
            },
            "enable_x_rays":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["do_enable"]
                }],
              "desc":"Enable or disable X-rays mode."
            },
            "creature_get_marker_color":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Quaternion"],
                  "args":["context_index","marker_index"]
                }],
              "desc":"Retrieve the color of a specific marker for a Creature evaluation context."
            },
            "character_offset_rotation_set_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","world_space"]
                }],
              "desc":"This is a tuning operation for an offset rotation Constraint."
            },
            "character_pop":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Remove the latest Constraint pushed into the Character IK Constraints stack."
            },
            "character_declare_context":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","resource_name"]
                }],
              "desc":"Declare a Character context."
            },
            "character_get_draw_rigs_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["boolean","boolean","boolean"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve flags indicateing whether FK and IK rigs should be drawn in the editor viewports."
            },
            "character_push_invert":{
              "type":"function",
              "signatures":[{
                  "types":["number","string"],
                  "rets":["nil"],
                  "args":["context_index","limb_name"]
                }],
              "desc":"Push an invert Constraint on a Character context IK Constraint stack."
            },
            "character_offset_rotation_is_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Asks whether a specific offset rotation Constraint is working in World Space\n\t\t (as opposed to Character Space) in the IK stack of a Character evaluation context."
            },
            "character_plant_set_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","smoothing"]
                }],
              "desc":"Set the smoothing intensity for a plant constraint."
            },
            "creature_chain_pin_is_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Returns whether a specific Chain Pin Constraint is working in World Space\n\t\t (as opposed to Local Space (from latest evaluated pose)) for a specific Chain Pin Constraint."
            },
            "character_push_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a pull Constraint on a Character context IK Constraint stack."
            },
            "creature_chain_num_nodes":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Retrieve the number of nodes of a Chain for a Creature evaluation context."
            },
            "character_floor_get_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray down length for a floor constraint."
            },
            "character_get_unit_context_from_unit_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["number"],
                  "args":["unit"]
                }],
              "desc":"Retrieve the index of the Character evaluation context associated to a specific UnitObject."
            },
            "creature_plant_set_front_right_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","front_right_leg_chain_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "character_offset_position_set_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","world_space"]
                }],
              "desc":"This is a tuning operation for an offset position Constraint."
            },
            "character_look_at_is_xy_only":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Asks whether a look at Constraint only operates on the horizontal (XY) plan."
            },
            "creature_push_section_motion":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","section","motion_type","amplitude","frequency","phase","pull","reach_t","reach_r","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a motion Constraint on a Creature section effector."
            },
            "character_reach_position_set_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","position"]
                }],
              "desc":"This is a tuning operation for reach position Constraint."
            },
            "character_floor_get_feet_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Asks whether feet are evaluated on a specific floor contact Constraint in the IK stack of a Character evaluation context."
            },
            "character_plant_get_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve smoothing intensity for a plant constraint."
            },
            "character_get_node_child_id":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["number"],
                  "args":["context_index","node_id","child_index"]
                }],
              "desc":"Retrieve the index of a child node/joint."
            },
            "character_plant_get_depth":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve planting depth for a plant constraint."
            },
            "creature_stats_get_section_last_section_weights":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["number"],
                  "args":["context_index","section_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "creature_plant_get_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_stats_get_chain_last_chain_weights_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Stat function."
            },
            "character_offset_rotation_set_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","effector"]
                }],
              "desc":"This is a tuning operation for an offset rotation Constraint."
            },
            "character_get_node_transform":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3","stingray.Quaternion"],
                  "args":["context_index","node_id","fk"]
                }],
              "desc":"Retrieve the transformation (both position and orientation) of a node/bone for a Character evaluation context."
            },
            "character_get_line_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Vector3"],
                  "args":["context_index","line_index"]
                }],
              "desc":"Retrieve the position of the end points of a line in a Character evaluation context."
            },
            "character_plant_get_hands_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_stats_get_section_last_section_err_weight_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["number"],
                  "args":["context_index","section_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "creature_num_constraints":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of Constraints currently in the IK Constraints stack for a Creature evaluation context."
            },
            "creature_stats_get_chain_last_chain_err_q":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3","number"],
                  "args":["context_index","chain_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "character_node_get_limits_draw_info":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Returns the number of lines to draw the limits info (and get ready for queries)."
            },
            "character_get_node_children_count":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Retrieve the number of children nodes/joints of a node/joint."
            },
            "creature_section_motion_set_frequency":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","frequency"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "creature_stats_get_chain_last_chain_pull_dir":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","chain_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "creature_section_motion_set_phase":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","phase"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "character_aim_set_target_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","position"]
                }],
              "desc":"This is a tuning operation for aim Constraint."
            },
            "character_get_node_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Retrieve the position of an Node for a Character evaluation context."
            },
            "character_plant_set_depth":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","depth"]
                }],
              "desc":""
            },
            "character_dump_effectors":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Dump critical effectors information for a Character in the log."
            },
            "character_get_marker_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","marker_index"]
                }],
              "desc":"Retrieve the position of a marker in a Character evaluation context."
            },
            "creature_section_motion_get_reach_r":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the orientation reach blending factor for the specified Section Motion Constraint."
            },
            "creature_chain_properties_set_compression_resistance":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","compression_resistance"]
                }],
              "desc":"This is a tuning operation for a Chain Properties Constraint."
            },
            "character_look_at_set_target_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","target_position"]
                }],
              "desc":"This is a tuning operation for look at Constraint."
            },
            "creature_num_markers":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of markers associated to a Creature evaluation context."
            },
            "creature_get_constraint_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the type of a Constraint in the IK Constraints stack for a specific Creature evaluation context."
            },
            "creature_chain_pin_set_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","world_space"]
                }],
              "desc":"This is a tuning operation for a Chain Pin Constraint."
            },
            "creature_push_floor":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","distance_up","distance_down","pull","height"]
                }],
              "desc":"Push a floor contact Constraint on a Creature context IK Constraint stack\n\t\t The floor contact has to be called per Chain for the Creature solver."
            },
            "creature_chain_pin_get_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index for the specified Chain Pin Constraint."
            },
            "creature_num_lines":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of lines associated to a Creature evaluation context."
            },
            "creature_section_motion_set_reach_r":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","reach_r"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "creature_section_motion_set_reach_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","reach_t"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "character_num_lines":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of lines associated to a Character evaluation context."
            },
            "creature_section_motion_set_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","pull"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "character_floor_get_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "character_get_node_parent_id":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Retrieve the index of a parent node/joint."
            },
            "character_set_solve_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean"],
                  "rets":["nil"],
                  "args":["context_index","disable_ik","disable_fk"]
                }],
              "desc":"This enables to switch off the IK solving and/or the FK update for a specific Character evaluation context."
            },
            "creature_chain_motion_set_reach_r":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","reach_r"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "creature_section_get_name":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["string"],
                  "args":["context_index","section_index"]
                }],
              "desc":"Retrieve the debug name for a Section in a Creature evaluation context."
            },
            "creature_section_properties_get_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Section index for the specified Section Properties Constraint."
            },
            "creature_section_motion_set_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","motion_type"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "creature_section_motion_set_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","section_index"]
                }],
              "desc":"This is a tuning operation for a Section Pin Constraint."
            },
            "character_floor_set_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_up_length"]
                }],
              "desc":"Set the ray up length for a floor constraint."
            },
            "creature_section_motion_get_reach_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the translation reach blending factor for the specified Section Motion Constraint."
            },
            "creature_get_chain_effector_transform":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Quaternion"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Retrieve the transformation (both position and orientation) of a Chain Effector for a Creature evaluation context."
            },
            "creature_section_motion_get_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the pull strength for the specified Section Motion Constraint."
            },
            "creature_section_motion_get_phase":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the phase for the specified Section Motion Constraint."
            },
            "creature_section_motion_get_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the type for the specified Section Motion Constraint."
            },
            "character_floor_set_hands_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","enable_hands"]
                }],
              "desc":"This is a tuning operation for a floor contact Constraint."
            },
            "creature_plant_set_chest_rotation_preserve":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chest_rotation_preserve"]
                }],
              "desc":""
            },
            "creature_chain_motion_set_reach_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","reach_t"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "creature_chain_motion_set_amplitude":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","amplitude"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "character_get_debug_name":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["string"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the debug name for a Character evaluation context."
            },
            "character_node_has_limits":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Retrieve whether a node is equipped with limits for a Character evaluation context."
            },
            "creature_chain_motion_set_phase":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","phase"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "character_pin_set_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","world_space"]
                }],
              "desc":"This is a tuning operation for a pin Constraint."
            },
            "character_push_offset_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","delta","world_space","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push an offset position Constraint on a Character context IK Constraint stack."
            },
            "creature_stats_get_section_last_sum_err":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","section_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "character_get_effector_transform":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Quaternion"],
                  "args":["context_index","effector_id"]
                }],
              "desc":"Retrieve the transformation (both position and orientation) of an Effector for a Character evaluation context."
            },
            "creature_chain_motion_set_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chain_index"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "creature_chain_motion_get_reach_r":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the orientation reach blending factor for the specified Chain Motion Constraint."
            },
            "creature_chain_motion_get_reach_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the translation reach blending factor for the specified Chain Motion Constraint."
            },
            "character_look_at_set_xy_only":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","restrain_to_xy_plan"]
                }],
              "desc":"Restrain or not whether a look at Constraint only operates on the horizontal (XY) plan."
            },
            "character_get_source":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the source Character evaluation context a Character evaluation context is retargeting from."
            },
            "character_plant_set_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_up_length"]
                }],
              "desc":"Set the ray up length for a plant constraint."
            },
            "character_offset_position_get_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Effector ID for a specific offset position Constraint in the IK stack of a Character evaluation context."
            },
            "character_plant_get_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray up length for a plant constraint."
            },
            "character_push_reach_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","position","world_space","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a reach position Constraint on a Character context IK Constraint stack."
            },
            "creature_get_marker_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","marker_index"]
                }],
              "desc":"Retrieve the position of a marker in a Creature evaluation context."
            },
            "creature_chain_motion_get_phase":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the phase for the specified Chain Motion Constraint."
            },
            "character_plant_set_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","nb_rays"]
                }],
              "desc":""
            },
            "creature_chain_motion_get_amplitude":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the amplitude for the specified Chain Motion Constraint."
            },
            "creature_plant_get_hips_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Section index representing the hips for the specified Plant Constraint."
            },
            "creature_chain_motion_get_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index for the specified Chain Motion Constraint."
            },
            "character_num_contexts":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":"Returns the number of evaluation contexts for Characters HumanIK currently manages."
            },
            "character_push_pin":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","world_space","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a pin Constraint on a Character context IK Constraint stack."
            },
            "creature_get_debug_name":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["string"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the debug name for a Creature evaluation context."
            },
            "character_push_fingers_control":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","all","left","hand_factor","factor_1","factor_2","factor_3","factor_4","factor_5","spread","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a fingers control Constraint on a Character context IK Constraint stack."
            },
            "creature_get_chain_effector_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Retrieve the position of the Chain Effector for a Creature evaluation context."
            },
            "creature_set_draw_rigs_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean","boolean"],
                  "rets":["nil"],
                  "args":["context_index","draw_fk","draw_ik","draw_always"]
                }],
              "desc":"This enables to switch off FK and IK rig rendering in the editor viewports."
            },
            "creature_get_line_color":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Quaternion"],
                  "args":["context_index","line_index"]
                }],
              "desc":"Retrieve the color of a specific line for a Creature evaluation context."
            },
            "creature_get_line_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Vector3"],
                  "args":["context_index","line_index"]
                }],
              "desc":"Retrieve the position of the end points of a line in a Creature evaluation context."
            },
            "creature_chain_motion_get_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the pull strength for the specified Chain Motion Constraint."
            },
            "creature_pop":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Remove the latest Constraint pushed into the Creature IK Constraints stack."
            },
            "creature_plant_set_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_up_length"]
                }],
              "desc":"Set the ray up length for a plant constraint."
            },
            "character_push_relative_pin":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Unit","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","unit","unit_object","translation","rotation","pull","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a relative pin Constraint on a Character context IK Constraint stack."
            },
            "creature_push_section_properties":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","extra_pull"]
                }],
              "desc":"Push a Section Properties Constraint on a Creature context IK Constraint stack\n\t\t The 'Section properties' Constraint enables you to set various Sections properties."
            },
            "creature_push_chain_motion":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","motion_type","amplitude","frequency","phase","pull","reach_t","reach_r","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a motion Constraint on a Creature chain effector."
            },
            "creature_get_draw_rigs_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["boolean","boolean","boolean"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve flags indicating whether FK and IK rigs should be drawn in the editor viewports."
            },
            "character_floor_set_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","smoothing"]
                }],
              "desc":"Set the smoothing intensity for a plant constraint."
            },
            "character_pin_set_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","effector_id"]
                }],
              "desc":"This is a tuning operation for a pin Constraint."
            },
            "creature_get_section_effector_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","section_index"]
                }],
              "desc":"Retrieve the position of the Section node for a Creature evaluation context."
            },
            "creature_plant_get_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve smoothing intensity for a plant constraint."
            },
            "creature_chain_parent_section":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Retrieve the index of the parent Section for a specific Chain for a Creature evaluation context."
            },
            "character_push_resist":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a resist Constraint on a Character context IK Constraint stack."
            },
            "creature_num_sections":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of Sections implemented by a Creature evaluation context."
            },
            "character_plant_set_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_down_length"]
                }],
              "desc":"Set the ray down length for a plant constraint."
            },
            "creature_plant_set_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_down_length"]
                }],
              "desc":"Set the ray down length for a plant constraint."
            },
            "character_push_property_value":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","property_id","value"]
                }],
              "desc":"Push a property value change on a Character context IK Constraint stack\n\t\t This allow fine tuning on both solving and retargeting."
            },
            "character_node_get_limits_draw_line":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Vector3","number","number","number"],
                  "args":["context_index","element_index"]
                }],
              "desc":""
            },
            "character_floor_set_feet_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","enable_feet"]
                }],
              "desc":"This is a tuning operation for a floor contact Constraint."
            },
            "creature_chain_get_name":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["string"],
                  "args":["context_index","chain_index"]
                }],
              "desc":"Retrieve the debug name for a Chain in a Creature evaluation context."
            },
            "creature_plant_set_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","smoothing"]
                }],
              "desc":"Set the smoothing intensity for a plant constraint."
            },
            "creature_push_set_chain_reach_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","reach_t"]
                }],
              "desc":"Push a Chain ReachT Constraint on a Creature context IK Constraint stack\n\t\t The 'Chain ReachT' Constraint enables you to set the translation reach value for a specific Chain effector to get reached."
            },
            "creature_push_plant":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","hips_section_index","chest_section_index","front_left_leg_chain_index","front_right_leg_chain_index","back_left_leg_chain_index","back_right_leg_chain_index","nb_rays","ray_up_length","ray_down_length","smoothing","chest_rotation_preserve"]
                }],
              "desc":"Push a plant Constraint on a Creature context IK Constraint stack\n\t\t A plant Constraint only works on quadruped Creatures."
            },
            "creature_plant_get_chest_rotation_preserve":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "character_push_lod":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean"],
                  "rets":["nil"],
                  "args":["context_index","low_definition_retarget","low_definition_solve"]
                }],
              "desc":"Push a LOD Constraint on a Character context IK Constraint stack."
            },
            "character_pin_is_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Returns whether a specific pin Constraint is working in\n\t\t World Space (as opposed to Character Space) in the IK stack of a Character evaluation context."
            },
            "character_fingers_is_left":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_chain_properties_set_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chain_index"]
                }],
              "desc":"This is a tuning operation for a Chain Properties Constraint."
            },
            "creature_chain_motion_set_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","pull"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "character_plant_get_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray down length for a plant constraint."
            },
            "character_plant_get_feet_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_dump":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Dump all Creature evaluation contexts information in the log."
            },
            "character_push_look_at":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","stingray.Vector3","boolean","boolean","number","number","boolean","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","target_unit","target_effector","target_position","look_at_position","restrain_to_xy_plan","chest_contribution","max_angular_speed","enable_limits","max_horizontal_angle","max_vertical_angle","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a look at Constraint on a Character context IK Constraint stack."
            },
            "creature_push_chain_properties":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","stiffness","compression_resistance"]
                }],
              "desc":"Push a Chain Properties Constraint on a Creature context IK Constraint stack\n\t\t The 'Chain properties' Constraint enables you to set various Chains properties."
            },
            "creature_section_properties_set_extra_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","extra_pull"]
                }],
              "desc":"This is a tuning operation for a Section Properties Constraint."
            },
            "character_reach_orientation_set_orientation":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","euler_orientation"]
                }],
              "desc":"This is a tuning operation for reach orientation Constraint."
            },
            "creature_section_properties_get_extra_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_section_motion_set_amplitude":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","amplitude"]
                }],
              "desc":"This is a tuning operation for a Section Motion Constraint."
            },
            "character_set_source":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["nil"],
                  "args":["target_context_index","source_context_index"]
                }],
              "desc":"This is the main function for enabling/disabling retargeting between units."
            },
            "character_offset_rotation_set_axis":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","axis"]
                }],
              "desc":"This is a tuning operation for an offset rotation Constraint."
            },
            "character_num_constraints":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of Constraints currently in the IK Constraints stack for a Character evaluation context."
            },
            "character_offset_rotation_get_angle":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the rotation angle for a specific offset rotation Constraint in the IK stack of a Character evaluation context."
            },
            "creature_plant_get_back_right_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index representing the back right leg Chain for the specified Plant Constraint."
            },
            "character_fingers_get_factor":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index","factor_id"]
                }],
              "desc":""
            },
            "creature_plant_get_front_right_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index representing the front right leg Chain for the specified Plant Constraint."
            },
            "creature_plant_get_front_left_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index representing the front left leg Chain for the specified Plant Constraint."
            },
            "creature_plant_get_chest_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Section index representing the chest for the specified Plant Constraint."
            },
            "creature_chain_motion_get_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the motion type for the specified Chain Motion Constraint."
            },
            "creature_chain_properties_set_stiffness":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","stiffness"]
                }],
              "desc":"This is a tuning operation for a Chain Properties Constraint."
            },
            "creature_chain_motion_get_frequency":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the frequency for the specified Chain Motion Constraint."
            },
            "creature_push_chain_reach_position":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","position","world_space"]
                }],
              "desc":"Push a Chain reach position Constraint on a Creature context IK Constraint stack\n\t\t The 'Chain reach position' Constraint enables you to set a target position for a specific Chain effector to get reached."
            },
            "creature_section_motion_get_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Section index for the specified Section Motion Constraint."
            },
            "character_offset_rotation_get_axis":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the axis for a specific Offset Rotation Constraint in the IK stack of a Character evaluation context."
            },
            "creature_push_chain_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","chain","pull"]
                }],
              "desc":"Push a Chain pull Constraint on a Creature context IK Constraint stack\n\t\t The 'Chain pull' Constraint enables you to set the pull value (to enable full body IK) for a specific Chain effector to get reached."
            },
            "character_push_floor":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","enable_feet","enable_hands","constraint_id","smoothing","nb_rays","ray_up_length","ray_down_length"]
                }],
              "desc":"Push a floor contact Constraint on a Character context IK Constraint stack."
            },
            "character_relative_pin_refresh":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Refreshes the relative transform between the external unit and the pinned effector."
            },
            "creature_plant_set_back_right_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","back_right_leg_chain_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "creature_plant_set_back_left_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","back_left_leg_chain_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "character_push_plant":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean","number","number","number","number","boolean","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","enable_feet","enable_hands","constraint_id","nb_rays","ray_up_length","ray_down_length","relative","smoothing","depth","affect_chest_rotation","affect_hips_rotation"]
                }],
              "desc":"Push a plant Constraint on a Character context IK Constraint stack."
            },
            "creature_plant_set_front_left_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","front_left_leg_chain_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "character_plant_set_relative":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","hands"]
                }],
              "desc":""
            },
            "character_node_get_limits":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3","stingray.Vector3","stingray.Quaternion"],
                  "args":["context_index","node_id"]
                }],
              "desc":"Returns limits information for a Node for a Character evaluation context."
            },
            "creature_plant_set_chest_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chest_section_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "creature_push_solve":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":""
            },
            "character_pin_get_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Effector ID for a specific pin Constraint in the IK stack of a Character evaluation context."
            },
            "creature_plant_get_back_left_leg_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Chain index representing the back left leg Chain for the specified Plant Constraint."
            },
            "character_floor_get_smoothing":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve smoothing intensity for a floor constraint."
            },
            "character_num_markers":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of markers associated to a Character evaluation context."
            },
            "character_push_test_biped":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push a test biped Constraint on a Character context IK Constraint stack."
            },
            "character_offset_position_get_vector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["stingray.Vector3"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the delta vector for a specific offset position Constraint in the IK stack of a Character evaluation context."
            },
            "creature_chain_pin_set_chain_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chain_index"]
                }],
              "desc":"This is a tuning operation for a Chain Pin Constraint."
            },
            "creature_declare_context":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["unit","resource_name"]
                }],
              "desc":"Declare a Creature context."
            },
            "character_push_partial_solving":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean","boolean","boolean","boolean","boolean","boolean","boolean","boolean","boolean","boolean","boolean"],
                  "rets":["nil"],
                  "args":["context_index","solve_left_arm","solve_right_arm","solve_left_leg","solve_right_leg","solve_left_shoulder","solve_right_shoulder","solve_left_hand","solve_right_hand","solve_left_foot","solve_right_foot","solve_head","solve_spine"]
                }],
              "desc":"Push a Partial Solving Settings Constraint on a Character context IK Constraint stack."
            },
            "creature_stats_get_section_last_section_err_q_pull":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["stingray.Vector3","number"],
                  "args":["context_index","section_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "creature_pop_all":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Remove all constraints pushed into the Creature IK Constraints stack."
            },
            "character_floor_get_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray up length for a floor constraint."
            },
            "character_plant_is_relative":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "creature_chain_properties_get_compression_resistance":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the pull strength for the specified Chain Motion Constraint."
            },
            "creature_chain_motion_set_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","motion_type"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "character_get_solve_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["boolean","boolean"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve flags indicating whether IK solve and FK updates are disabled for a specific Character evaluation context."
            },
            "character_offset_rotation_set_angle":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","angle"]
                }],
              "desc":"This is a tuning operation for an offset rotation Constraint."
            },
            "character_floor_set_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","ray_down_length"]
                }],
              "desc":"Set the ray down length for a floor constraint."
            },
            "creature_chain_properties_get_stiffness":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the pull strength for the specified Chain Motion Constraint."
            },
            "creature_get_unit_context_from_unit_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Unit"],
                  "rets":["number"],
                  "args":["unit"]
                }],
              "desc":"Retrieve the index of the Creature evaluation context associated to a specific UnitObject."
            },
            "creature_plant_set_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","nb_rays"]
                }],
              "desc":""
            },
            "character_push_aim":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number","number","number","number","boolean","number","number","stingray.Vector3","boolean","number","boolean","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","attachment_effectorID","hips_contribution","chest_contribution","shoulder_contribution","elbow_contribution","reference_target_bone","pin_other_hand","target_unit","target_effector","target_position","aim_at_position","max_angular_speed","contact","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push an aim Constraint on a Character context IK Constraint stack."
            },
            "character_fingers_set_factor":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","factor_id","factor"]
                }],
              "desc":""
            },
            "character_floor_get_hands_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Asks whether feet are evaluated on a specific floor contact Constraint in the IK stack of a Character evaluation context."
            },
            "enable":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["do_enable"]
                }],
              "desc":"Enable or disable HumanIK."
            },
            "character_plant_set_feet_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","feet"]
                }],
              "desc":""
            },
            "character_offset_position_is_world_space":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Returns whether a specific offset position Constraint is working in\n\t\t World Space (as opposed to Local Space (latest evaluated pose)) in the IK stack of a Character evaluation context."
            },
            "character_fingers_set_all":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","all"]
                }],
              "desc":"This is a tuning operation for a fingers control Constraint."
            },
            "creature_plant_get_ray_down_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray down length for a plant constraint."
            },
            "creature_section_properties_set_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","section_index"]
                }],
              "desc":"This is a tuning operation for a Section Properties Constraint."
            },
            "character_plant_set_hands_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","boolean"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","hands"]
                }],
              "desc":""
            },
            "character_push_solve":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Push a test solve request on a Character context IK Constraint stack\n\t\t By default, an IK Constraint stack automatically gets solved after all IK Constraints have been applied."
            },
            "character_floor_set_nb_rays":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","nb_rays"]
                }],
              "desc":""
            },
            "character_push_offset_rotation":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Vector3","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","effector_id","axis","angle","world_space","alpha","blend_in_time","constraint_id"]
                }],
              "desc":"Push an offset rotation Constraint on a Character context IK Constraint stack."
            },
            "creature_chain_motion_set_frequency":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","frequency"]
                }],
              "desc":"This is a tuning operation for a Chain Motion Constraint."
            },
            "creature_num_chains":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["number"],
                  "args":["context_index"]
                }],
              "desc":"Retrieve the number of Chains implemented by a Creature evaluation context."
            },
            "character_look_at_set_chest_contribution":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","chest_contribution"]
                }],
              "desc":"Set the chest contribution factor for a look at constraint."
            },
            "character_get_constraint_type":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the type of a constraint in the IK Constraints stack for a specific Character evaluation context."
            },
            "character_offset_rotation_get_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve the Effector ID for a specific Offset Rotation Constraint in the IK stack of a Character evaluation context."
            },
            "creature_plant_get_ray_up_length":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["number"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":"Retrieve ray up length for a plant constraint."
            },
            "character_pop_all":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Remove all constraints pushed into the Character IK Constraints stack."
            },
            "creature_stats_get_chain_last_chain_err_t":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["number"],
                  "args":["context_index","chain_index","iteration"]
                }],
              "desc":"Stat function."
            },
            "reveal_all":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["do_reveal"]
                }],
              "desc":"Mostly used at edition time to display FK rigs and IK rigs as well as markers for understanding/debugging IK (only in the editor viewport)."
            },
            "creature_plant_set_hips_section_index":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","hips_section_index"]
                }],
              "desc":"This is a tuning operation for a Creature Plant Constraint."
            },
            "character_set_draw_rigs_flags":{
              "type":"function",
              "signatures":[{
                  "types":["number","boolean","boolean","boolean"],
                  "rets":["nil"],
                  "args":["context_index","draw_fk","draw_ik","draw_always"]
                }],
              "desc":"This enables to switch off FK and IK rig rendering in the editor viewports."
            },
            "is_enabled":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Returns whether HumanIK is enabled or not."
            },
            "character_dump_in_file":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Dump all HumanIK structures Character evaluation contexts information into binary files on the hard drive\n\t\t Files are dumped in the current directory."
            },
            "character_look_at_set_target_unit":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Unit","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","target_unit","target_effector"]
                }],
              "desc":"This is a tuning operation for look at Constraint."
            },
            "character_push_test_quadruped":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["context_index"]
                }],
              "desc":"Push a test quadruped Constraint on a Character context IK Constraint stack."
            },
            "character_fingers_is_all":{
              "type":"function",
              "signatures":[{
                  "types":["number","number"],
                  "rets":["boolean"],
                  "args":["context_index","constraint_index"]
                }],
              "desc":""
            },
            "character_aim_set_target_unit":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","stingray.Unit","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","target_unit","target_effector"]
                }],
              "desc":"This is a tuning operation for aim Constraint."
            },
            "character_offset_position_set_effector":{
              "type":"function",
              "signatures":[{
                  "types":["number","number","number"],
                  "rets":["nil"],
                  "args":["context_index","constraint_index","effector_id"]
                }],
              "desc":"This is a tuning operation for an offset position Constraint."
            }
          },
          "desc":""
        },
        "Pad2":{
          "desc":"",
          "type":"object"
        },
        "GwNavGraph":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavGraph"],
                  "rets":["nil"],
                  "args":["nav_graph"]
                }],
              "desc":"Destroys the specified [GwNavGraph]."
            },
            "add_to_database":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavGraph"],
                  "rets":["nil"],
                  "args":["nav_graph"]
                }],
              "desc":"Adds the specified [GwNavGraph]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","boolean","table","stingray.Quaternion","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_world","bidirectional","points","color","layer_id","smartobject_id","user_data_id"]
                }],
              "desc":"Creates a [GwNavGraph]."
            },
            "remove_from_database":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavGraph"],
                  "rets":["nil"],
                  "args":["nav_graph"]
                }],
              "desc":"Removes the specifed [GwNavGraph] from the database."
            }
          },
          "desc":""
        },
        "SingleInstanceComponent":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity","integer?"],
                  "rets":["nil"],
                  "args":["dc","entity","id"]
                }],
              "desc":"Destroys the component instance for the entity."
            },
            "get_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity","integer","any(string,string[])"],
                  "rets":["any*"],
                  "args":["dc","entity","id","key"]
                },{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity","any(string,string[])"],
                  "rets":["any*"],
                  "args":["dc","entity","key"]
                }],
              "desc":"Gets the value of a property key."
            },
            "instances":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity"],
                  "rets":["integer*"],
                  "args":["dc","entity"]
                }],
              "desc":"Either returns `0` if an instance exists for the entity else `nil`."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity"],
                  "rets":["integer"],
                  "args":["dc","entity"]
                }],
              "desc":"Creates the component for the specified entity if it doesn't exist."
            },
            "set_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity","integer","any(string,string[])","any"],
                  "rets":["nil"],
                  "args":["dc","entity","id","key","value"]
                },{
                  "types":["stingray.SingleInstanceComponent","stingray.Entity","any(string,string[])","any"],
                  "rets":["nil"],
                  "args":["dc","entity","key","value"]
                }],
              "desc":"Sets the value for a property key."
            }
          },
          "desc":""
        },
        "GwNavBot":{
          "type":"object",
          "members":{
            "is_path_recomputation_needed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["boolean"],
                  "args":["nav_bot"]
                }],
              "desc":"Returns true if the bot needs to re-path because the path has been invalidated."
            },
            "move_on_spline":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number"],
                  "rets":["stingray.Vector3?","stingray.Vector3?"],
                  "args":["nav_bot","distance"]
                }],
              "desc":"If the specified [GwNavBot] has a spline, moves from the current position by distance along the spline."
            },
            "traverse_logic_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["stingray.GwNavTraverseLogic"],
                  "args":["nav_bot"]
                }],
              "desc":"Retrieves the [GwNavTraverseLogic] for this bot."
            },
            "update_logic_for_crowd_dispersion":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["integer"],
                  "args":["nav_bot"]
                }],
              "desc":""
            },
            "velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["stingray.Vector3"],
                  "args":["nav_bot"]
                }],
              "desc":"If the specified [GwNavBot] moved since the last frame, this is the velocity it moved at."
            },
            "allow_layer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagLayerCostTable","number"],
                  "rets":["nil"],
                  "args":["navtag_layer_cost_table","layer_id"]
                },{
                  "types":["stingray.GwNavTagLayerCostTable","number"],
                  "rets":["nil"],
                  "args":["navtag_layer_cost_table","layer_id"]
                }],
              "desc":"This functions allows us to specify which layers this bot can traverse."
            },
            "compute_new_path":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["nav_bot","destination"]
                }],
              "desc":"The specified [GwNavBot] will calculate a path to the specified position."
            },
            "set_propagation_box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number"],
                  "rets":["nil"],
                  "args":["nav_bot","propagation_box_extent"]
                }],
              "desc":"Set the pathfinder configuration for the specified bot."
            },
            "enter_manual_control":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.GwNavSmartObjectInterval"],
                  "rets":["boolean"],
                  "args":["nav_bot","interval"]
                }],
              "desc":"Request to enter manual control for the specified [GwNavSmartObjectInterval]."
            },
            "set_spline_trajectory_configuration":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","boolean","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","animation_driven","max_distance_to_spline_position","spline_length","spline_distance_to_borders","spline_recomputation_ratio","target_on_spline_distance"]
                }],
              "desc":"Set the spline trajectory configuration for the specified bot."
            },
            "set_outside_navmesh_distance":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","from_outside_navmesh_distance","to_outside_navmesh_distance"]
                }],
              "desc":"Set the pathfinder configuration for the specified bot."
            },
            "use_avoidance":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","boolean"],
                  "rets":["nil"],
                  "args":["nav_bot","use_avoidance"]
                }],
              "desc":"If this is set to *false*, the bot will ignore all other bots and obstacles and will not try to avoid them."
            },
            "set_avoidance_collider_collector_configuration":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","half_height","radius","frame_delay"]
                }],
              "desc":"Set the avoidance collider collector configuration for the specified bot."
            },
            "on_logic_need_recomputing_to_similar_destination":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["nil"],
                  "args":["nav_bot"]
                }],
              "desc":""
            },
            "set_avoidance_behavior":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","boolean","boolean","boolean","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","enable_slowing","enable_forcing","enable_stop","stop_wait_time_s","forcing_time_s","forcing_wait_time_s"]
                }],
              "desc":"Set the avoidance behavior configuration for the specified bot."
            },
            "set_avoidance_computer_configuration":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","angle_span","time_to_collision","sample_count"]
                }],
              "desc":"Set the avoidance computer configuration for the specified bot."
            },
            "set_navtag_layer_cost_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.GwNavTagLayerCostTable"],
                  "rets":["nil"],
                  "args":["nav_bot","cost_table"]
                }],
              "desc":"Sets the [GwNavTagLayerCostTable] for this bot."
            },
            "is_following_path":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["boolean"],
                  "args":["nav_bot"]
                }],
              "desc":"Returns true is the specified bot has a path."
            },
            "on_logic_compute_path_to_brand_new_destination":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["nil"],
                  "args":["nav_bot"]
                }],
              "desc":"Must be called before recomputing a Path to a new destination, typically when a new Target is selected by your own Bot logic."
            },
            "compute_move_on_navmesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number"],
                  "rets":["stingray.Vector3"],
                  "args":["nav_bot","delta_time"]
                }],
              "desc":"Outputs a valid position for the given GwNavBot where it can be safely placed on the NavMesh."
            },
            "update_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["nav_bot","position","delta_time"]
                }],
              "desc":""
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","number","number","number","stingray.Vector3","stingray.NavCostMapTagCostTableObject"],
                  "rets":["stingray.GwNavBot"],
                  "args":["nav_world","height","radius","max_speed","position","cost_table"]
                }],
              "desc":"Creates a [GwNavBot]."
            },
            "get_remaining_distance_from_progress_to_end_of_path":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["number"],
                  "args":["self"]
                }],
              "desc":"Returns the remaining distance from bot progress on path to end of path."
            },
            "current_or_next_smartobject_interval":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.GwNavSmartObjectInterval","number"],
                  "rets":["boolean"],
                  "args":["nav_bot","interval","max_distance"]
                }],
              "desc":"Returns the current or next [GwNavSmartObjectInterval] if there is one."
            },
            "navtag_layer_cost_table":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["stingray.GwNavTagLayerCostTable"],
                  "args":["nav_bot"]
                }],
              "desc":"Retrieves the [GwNavTagLayerCostTable] for this bot if any."
            },
            "exit_manual_control":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","stingray.GwNavSmartObjectInterval"],
                  "rets":["boolean"],
                  "args":["nav_bot","interval"]
                }],
              "desc":"Request to exit manual control for the specified [GwNavSmartObjectInterval]."
            },
            "is_computing_new_path":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["boolean"],
                  "args":["nav_bot"]
                }],
              "desc":"Path computation is not a synchronous operation (it may complete in one frame or it may not)."
            },
            "output_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot"],
                  "rets":["stingray.Vector3"],
                  "args":["nav_bot"]
                }],
              "desc":"If the specified [GwNavBot] has calculated a path, this function will return the desired velocity for this frame in order to follow this path."
            },
            "set_channel_computer_configuration":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number","number","number","number","number"],
                  "rets":["nil"],
                  "args":["nav_bot","channel_radius","turn_sampling_angle","channel_smoothing_angle","min_distance_between_gates","max_distance_between_gates"]
                }],
              "desc":"Set the channel configuration for the specified bot."
            },
            "set_max_desired_linear_speed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","number"],
                  "rets":["nil"],
                  "args":["nav_bot","max_linear_speed"]
                }],
              "desc":"The specified bot will not exceed the specified speed when moving."
            },
            "set_use_channel":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBot","boolean"],
                  "rets":["nil"],
                  "args":["nav_bot","use_channel"]
                }],
              "desc":"If we set the bot to use the channel, it will use a more expensive, but more visually pleasing pathfollowing."
            }
          },
          "desc":""
        },
        "GwNavCylinderObstacle":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle"]
                }],
              "desc":"Destroys a cylinder obstacle."
            },
            "set_position":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle","position"]
                }],
              "desc":"Sets the current position of the specified obstacle, so that this might be taken into account during the next update."
            },
            "add_to_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle"]
                }],
              "desc":"Adds the given [GwNavCylinderObstacle] to the world that was specified when it was created."
            },
            "set_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle","velocity"]
                }],
              "desc":"Sets the current velocity of the specified obstacle, so that this might be taken into account during the next update."
            },
            "remove_from_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle"]
                }],
              "desc":"Removes the given [GwNavCylinderObstacle] from the world that was specified when it was created."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","number","number","boolean","stingray.Quaternion","number","number","number"],
                  "rets":["stingray.GwNavCylinderObstacle"],
                  "args":["nav_world","position","height","radius","is_exclusive","color","layer_id","smartobject_id","user_data_id"]
                },{
                  "types":["stingray.GwNavWorld","stingray.Vector3","number","number"],
                  "rets":["stingray.GwNavCylinderObstacle"],
                  "args":["nav_world","position","height","radius"]
                }],
              "desc":"Creates a cylinder obstacle."
            },
            "set_does_trigger_tagvolume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavCylinderObstacle","boolean"],
                  "rets":["nil"],
                  "args":["cylinder_obstacle","does_trigger"]
                }],
              "desc":"If false, this obstacle will only be avoided by bots."
            }
          },
          "desc":""
        },
        "PhysicsWorld":{
          "type":"object",
          "members":{
            "raycast":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","string*","number?"],
                  "rets":["any(boolean,collision_hit[])","stingray.Vector3?","number?","stingray.Vector3?","stingray.Actor?"],
                  "args":["world","start","dir","params","length"]
                }],
              "desc":"Tests for collisions with the physics objects that live in the same [PhysicsWorld]."
            },
            "linear_capsule_sweep":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","stingray.Quaternion","number","number","integer","string+"],
                  "rets":["collision_hit[]"],
                  "args":["world","from","to","rotation","radius","half_height","max_hits","sweep_params"]
                }],
              "desc":"Performs a linear sweep through space with an oriented capsule."
            },
            "make_raycast":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","fun(any(boolean,collision_hit[]),stingray.Vector3?,number?,stingray.Vector3?,stingray.Actor?:nil)?","string*"],
                  "rets":["stingray.Raycast"],
                  "args":["world","callback","params"]
                }],
              "desc":"Creates a [Raycast] object that can be used to make collision tests against physics objects."
            },
            "set_observer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["world","mat"]
                }],
              "desc":"Sets the observer for the physics world."
            },
            "immediate_raycast":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","number?","string*"],
                  "rets":["any(boolean,collision_hit[])","stingray.Vector3?","number?","stingray.Vector3?","stingray.Actor?"],
                  "args":["world","start","dir","ray_length","params"]
                }],
              "desc":"Tests for collisions with the physics objects that live in the same [PhysicsWorld]."
            },
            "spawn_box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","number","string?","string?","string?"],
                  "rets":["stingray.Actor"],
                  "args":["world","pos","radius","actor","shape","material"]
                }],
              "desc":"Spawns an improvised box at the specified position."
            },
            "spawn_plane":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","string?","string?","string?"],
                  "rets":["stingray.Actor"],
                  "args":["world","pos","normal","actor","shape","material"]
                }],
              "desc":"Spawns a static plane with specified position and normal."
            },
            "spawn_sphere":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","number","string?","string?","string?"],
                  "rets":["stingray.Actor"],
                  "args":["world","pos","radius","actor","shape","material"]
                }],
              "desc":"Spawns an improvised sphere at specified position."
            },
            "linear_sphere_sweep":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","number","integer","string+"],
                  "rets":["collision_hit[]"],
                  "args":["world","from","to","radius","max_hits","sweep_params"]
                }],
              "desc":"Performs a linear sweep through space with a sphere."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Actor"],
                  "rets":["nil"],
                  "args":["world","actor"]
                }],
              "desc":"Destroys a dynamic actor that was created with [spawn_sphere()], [spawn_box()] or [spawn_plane()]."
            },
            "apply_wind":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.VectorField","string"],
                  "rets":["nil"],
                  "args":["world","vf","id"]
                }],
              "desc":"Applies the wind from the VectorField to the actors in the world that collide with the specified collision filter."
            },
            "set_gravity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["world","gravity"]
                }],
              "desc":"Sets the gravity in the specified PhysicsWworld, expressed as a [Vector3]."
            },
            "out_of_world_units":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld"],
                  "rets":["stingray.Unit[]"],
                  "args":["world"]
                }],
              "desc":"Poll this function frequently and properly destroy all units that have left world boundaries."
            },
            "set_debug_draw":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","boolean"],
                  "rets":["nil"],
                  "args":["world","enable"]
                }],
              "desc":"Enables or disables debug drawing for this world."
            },
            "commit_actor_proximity_shape_from_unit":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Unit","number","number"],
                  "rets":["nil"],
                  "args":["world","unit","radius_sq","angle_rad"]
                },{
                  "types":["stingray.PhysicsWorld","stingray.Unit","number"],
                  "rets":["nil"],
                  "args":["world","unit","radius_sq"]
                }],
              "desc":""
            },
            "commit_actor_proximity_shape":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","number","number"],
                  "rets":["nil"],
                  "args":["world","position","direction","radius_sq","angle_rad"]
                },{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","number"],
                  "rets":["nil"],
                  "args":["world","position","direction","radius_sq"]
                }],
              "desc":""
            },
            "wake_actors":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","string","stingray.Vector3","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["world","filter_id","min","max"]
                }],
              "desc":"Wakes all physics actors that collide with the specified collision filter and that intersect the axis-oriented bounding box\n\t\tdefined by the specified minima and maxima."
            },
            "linear_obb_sweep":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","stingray.Vector3","stingray.Quaternion","integer","string+"],
                  "rets":["collision_hit[]"],
                  "args":["world","from","to","extents","rotation","max_hits","sweep_params"]
                }],
              "desc":"Performs a linear sweep through space with an oriented bounding box."
            },
            "break_joints":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Actor","stingray.Actor"],
                  "rets":["nil"],
                  "args":["world","ac1","ac2"]
                },{
                  "types":["stingray.PhysicsWorld","stingray.Unit","string","stingray.Unit","string"],
                  "rets":["nil"],
                  "args":["world","u1","ac1","u2","ac2"]
                }],
              "desc":"Breaks the joints between the two specified actors."
            },
            "find_best_unit_in_cone":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","stingray.Vector3","stingray.Vector3","number","number","number","number"],
                  "rets":["stingray.Unit"],
                  "args":["world","position","direction","max_dist_sq","spread_angle","distance_weight","angle_weight"]
                }],
              "desc":""
            },
            "overlap":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PhysicsWorld","fun(stingray.Actor[]:nil)","any+"],
                  "rets":["table"],
                  "args":["world","callback","params"]
                }],
              "desc":"Performs an overlap test in the physics world: a collision test that finds all the actors in the world that are within a specified\n\t\tshape."
            }
          },
          "desc":""
        },
        "Cloud":{
          "type":"object",
          "members":{
            "enabled":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the Steam cloud is enabled for the game."
            },
            "delete":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.CloudToken"],
                  "args":["filename"]
                }],
              "desc":"Deletes the specified filename from the cloud."
            },
            "auto_save":{
              "type":"function",
              "signatures":[{
                  "types":["string","any"],
                  "rets":["stingray.CloudToken"],
                  "args":["filename","data"]
                }],
              "desc":"Saves the specified data to the specified file on the cloud, and returns a token that can be queried for progress."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.CloudToken"],
                  "rets":["table"],
                  "args":["token"]
                }],
              "desc":"Retrieves information about the current state of the save or load operation identified by the specified token."
            },
            "auto_load":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.CloudToken"],
                  "args":["filename"]
                }],
              "desc":"Loads data previously saved to the specified file on the cloud, and returns a token that can be queried for\n\tprogress and results."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.CloudToken"],
                  "rets":["nil"],
                  "args":["token"]
                }],
              "desc":"Frees the memory used by the engine to monitor the cloud operation request that corresponds to the\n\tspecified token."
            },
            "forget":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.CloudToken"],
                  "args":["filename"]
                }],
              "desc":"Forgets the specified filename."
            }
          },
          "desc":""
        },
        "MsgDialog":{
          "type":"object",
          "members":{
            "NONE":{
              "desc":"integer = <internal>\nEither the message dialog is not initialized, or it has already been terminated.",
              "type":"constant"
            },
            "INITIALIZED":{
              "desc":"integer = <internal>\nThe message dialog is initialized, but not opened.",
              "type":"constant"
            },
            "terminate":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Terminates the message dialog system and frees the related resources."
            },
            "RUNNING":{
              "desc":"integer = <internal>\nThe message dialog is open.",
              "type":"constant"
            },
            "open":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer?"],
                  "rets":["nil"],
                  "args":["message_type","user_id"]
                }],
              "desc":"Opens the message dialog for the specified message type."
            },
            "initialize":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes the message dialog system."
            },
            "status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Same as [stingray."
            },
            "FINISHED":{
              "desc":"integer = <internal>\nThe message dialog is closed and finished.",
              "type":"constant"
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Updates the status of the message dialog and returns it."
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Aborts the message dialog and closes it."
            }
          },
          "desc":""
        },
        "CloudToken":{
          "desc":"",
          "type":"object"
        },
        "GwNavTagVolume":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagVolume"],
                  "rets":["nil"],
                  "args":["tagvolume"]
                }],
              "desc":"Destroys a [GwNavTagVolume]."
            },
            "add_to_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagVolume"],
                  "rets":["nil"],
                  "args":["tagvolume"]
                }],
              "desc":"Adds a [GwNavTagVolume] to its world."
            },
            "navtag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagVolume"],
                  "rets":["boolean","stingray.Quaternion","integer","integer","integer"],
                  "args":["tagvolume"]
                }],
              "desc":"Retrieves information about the NavTag associated with the specified [GwNavTagVolume]."
            },
            "remove_from_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagVolume"],
                  "rets":["nil"],
                  "args":["tagvolume"]
                }],
              "desc":"Removes a [GwNavTagVolume] from its world."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","table","number","number","boolean","stingray.Quaternion","number","number","number"],
                  "rets":["stingray.GwNavTagVolume"],
                  "args":["nav_world","polyline","min_altitude","max_altitude","is_exclusive","color","layer_id","smartobject_id","user_data_id"]
                }],
              "desc":"Creates a [GwNavTagVolume]."
            }
          },
          "desc":""
        },
        "GwNavAStar":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["nil"],
                  "args":["astar"]
                }],
              "desc":"Destroys the specified [GwNavAStar]."
            },
            "cancel":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["nil"],
                  "args":["astar"]
                }],
              "desc":"If the specified [GwNavAStar] has not yet finished it will be cancelled and no computation will take place."
            },
            "path_distance":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["number"],
                  "args":["astar"]
                }],
              "desc":"Returns the distance in meters of the path of the specified [GwNavAStar]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.GwNavAStar"],
                  "args":[]
                }],
              "desc":"Creates a [GwNavAStar] object."
            },
            "node_at_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["stingray.Vector3?"],
                  "args":["astar"]
                }],
              "desc":"Returns the position of the node at the given index for the specified [GwNavAStar]."
            },
            "node_count":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["number"],
                  "args":["astar"]
                }],
              "desc":"Returns the number of ndoes in the path of the specified [GwNavAStar]."
            },
            "path_cost":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["number"],
                  "args":["astar"]
                }],
              "desc":"Returns the cost of the path of the specified [GwNavAStar]."
            },
            "start":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar","stingray.Vector3","stingray.Vector3","stingray.GwNavTraverseLogic?"],
                  "rets":["nil"],
                  "args":["astar","start","dest","logic"]
                }],
              "desc":"Launches processing to compute a path from start to dest."
            },
            "start_with_propagation_box":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar","stingray.Vector3","stingray.Vector3","number","stingray.GwNavTraverseLogic?"],
                  "rets":["nil"],
                  "args":["astar","start","dest","box_extent","logic"]
                }],
              "desc":"Launches processing to compute a path from start to dest."
            },
            "processing_finished":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["boolean"],
                  "args":["astar"]
                }],
              "desc":"Returns whether or not processing has finished for the specified [GwNavAStar]."
            },
            "path_found":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavAStar"],
                  "rets":["boolean"],
                  "args":["astar"]
                }],
              "desc":"Returns whether or not the specified [GwNavAStar] was able to find a path."
            }
          },
          "desc":""
        },
        "PreserveSessionMode":{
          "type":"object",
          "members":{
            "NEVER":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            },
            "ALWAYS":{
              "desc":"integer = <internal>\nSee XDK documentation for details.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "GwNavQueryDynamicOutput":{
          "desc":"",
          "type":"object"
        },
        "Matrix4x4Box":{
          "signatures":[{
              "types":[],
              "rets":["stingray.Matrix4x4Box"],
              "args":[]
            }],
          "type":"object",
          "members":{
            "store":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["m"]
                }],
              "desc":"Stores the specified matrix values in the box."
            },
            "unbox":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Matrix4x4Box"],
                  "rets":["stingray.Matrix4x4"],
                  "args":["box"]
                }],
              "desc":"Retrieves the matrix last stored in the specified box."
            }
          },
          "desc":""
        },
        "DynamicData":{
          "type":"object",
          "members":{
            "get":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.DynamicData","any(integer,string)+"],
                  "rets":["any"],
                  "args":["dynamic_data","i"]
                }],
              "desc":"Retrieves script data from a dynamic data object."
            }
          },
          "desc":""
        },
        "Localizer":{
          "signatures":[{
              "types":["string"],
              "rets":["stingray.Localizer"],
              "args":["strings"]
            }],
          "type":"object",
          "members":{
            "lookup":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Localizer","string"],
                  "rets":["string?"],
                  "args":["localizer","key"]
                }],
              "desc":"Retrieves the requested key from the set of strings understood by the localizer, respecting the\n\t\tresource property preference order that was set when you last loaded the *."
            }
          },
          "desc":""
        },
        "Mouse":{
          "desc":"",
          "type":"object"
        },
        "Script":{
          "type":"object",
          "members":{
            "ACCEPTABLE_GARBAGE":{
              "desc":"integer = <internal>\nSpecifies the acceptable percentage of available memory that can be spent on garbage, as a number between `0` and `1`.",
              "type":"constant"
            },
            "MAXIMUM_COLLECT_TIME_MS":{
              "desc":"integer = <internal>\nThe amount of time to spend in garbage collection, in milliseconds, when the maximum garbage value is reached.\n\n\t\tThe default value is `10`.",
              "type":"constant"
            },
            "type_name":{
              "type":"function",
              "signatures":[{
                  "types":["any"],
                  "rets":["string"],
                  "args":["obj"]
                }],
              "desc":"Retrieves the type name of the specified object."
            },
            "FORCE_FULL_COLLECT_GARBAGE_LEVEL":{
              "desc":"integer = <internal>\nWhen this much of the available memory is occupied by garbage, you can force a full stop to garbage collection.",
              "type":"constant"
            },
            "temp_count":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Deprecated: use temp_byte_count() instead."
            },
            "new_map":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["table"],
                  "args":["num_keys"]
                }],
              "desc":"Creates a new table as a map with preallocated space for a number of keys."
            },
            "new_table":{
              "type":"function",
              "signatures":[{
                  "types":["integer","integer"],
                  "rets":["table"],
                  "args":["num_numeric_keys","num_non_numeric_keys"]
                }],
              "desc":"Creates a new table with preallocated space for a number of numeric and non-numeric keys."
            },
            "configure_garbage_collection":{
              "type":"function",
              "signatures":[{
                  "types":["any(string,number)+"],
                  "rets":["nil"],
                  "args":["parameters"]
                }],
              "desc":"Configures the garbage collector."
            },
            "temp_byte_count":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the size currently in use in the memory buffer containing temporary objects."
            },
            "serialize":{
              "type":"function",
              "signatures":[{
                  "types":["any(string,number,boolean,table,stingray.Vector3,stingray.Vector3Box,stingray.Matrix4x4,stingray.Matrix4x4Box)"],
                  "rets":["string"],
                  "args":["data"]
                }],
              "desc":"Serializes Lua data to an opaque string representation."
            },
            "set_temp_byte_count":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["s"]
                }],
              "desc":"Sets how much of the buffer for temporary objects created and maintained by the engine is considered in use."
            },
            "new_array":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["table"],
                  "args":["num_numeric_keys"]
                }],
              "desc":"Creates a new table as an array with preallocated space for a number of consecutive numeric keys."
            },
            "callstack":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the current script call stack."
            },
            "MINIMUM_COLLECT_TIME_MS":{
              "desc":"integer = <internal>\nThe minimum time, in milliseconds, spent for garbage collection in each frame (when garbage pressure is low).\n\n\t\tThe default value is `0.5`.",
              "type":"constant"
            },
            "MAXIMUM_GARBAGE":{
              "desc":"integer = <internal>\nSpecifies the maximum percentage of available memory that can be spent on garbage, as a number between `0` and `1`.",
              "type":"constant"
            },
            "set_index_offset":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["offset"]
                }],
              "desc":"Set the offset to 0 for 0-based indexing or 1 for 1-based indexing (the default)."
            },
            "index_offset":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"The offset is 0 for 0-based indexing or 1 for 1-based indexing (the default)."
            },
            "set_temp_count":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["s"]
                }],
              "desc":"Deprecated: use set_temp_byte_count instead."
            },
            "load":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["fun(nil:any*)?"],
                  "args":["resource"]
                }],
              "desc":"Similar to the standard lua function `loadstring()`, but loads the script from a Lua script resource instead."
            },
            "deserialize":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["any(string,number,boolean,table,stingray.Vector3,stingray.Vector3Box,stingray.Matrix4x4,stingray.Matrix4x4Box)"],
                  "args":["string_rep"]
                }],
              "desc":"Deserializes an opaque string representation of a Lua object back to data."
            }
          },
          "desc":""
        },
        "ActorBox":{
          "signatures":[{
              "types":[],
              "rets":["stingray.ActorBox"],
              "args":[]
            },{
              "types":["stingray.Actor"],
              "rets":["stingray.ActorBox"],
              "args":["actor"]
            }],
          "type":"object",
          "members":{
            "store":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ActorBox","stingray.Actor[]"],
                  "rets":["nil"],
                  "args":["box","actor"]
                }],
              "desc":"Stores the specified actor in the specified box."
            },
            "unbox":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ActorBox"],
                  "rets":["nil","stingray.Actor"],
                  "args":["box"]
                }],
              "desc":"Retrieves the stored actor from the box, if any."
            }
          },
          "desc":""
        },
        "GwNavTagLayerCostTable":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagLayerCostTable"],
                  "rets":["nil"],
                  "args":["navtag_layer_cost_table"]
                }],
              "desc":"Destroys a [GwNavTagLayerCostTable]."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.GwNavTagLayerCostTable"],
                  "args":[]
                }],
              "desc":"Creates a [GwNavTagLayerCostTable]."
            },
            "set_layer_cost_multiplier":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavTagLayerCostTable","number","number"],
                  "rets":["nil"],
                  "args":["navtag_layer_cost_table","layer_id","layer_cost_multiplier"]
                }],
              "desc":"This functions allows us to specify which cost multiplier must be used when traversing a given NavTag layer."
            }
          },
          "desc":""
        },
        "SaveToken":{
          "desc":"",
          "type":"object"
        },
        "MeshComponent":{
          "type":"object",
          "members":{
            "set_material":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MeshComponent","stingray.Entity","integer","string","string","string"],
                  "rets":["nil"],
                  "args":["mc","entity","id","material_key","material_resource","material"]
                }],
              "desc":"Sets the material that the mesh should use for drawing its geometry."
            },
            "create_with_mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MeshComponent","stingray.Entity","string","string"],
                  "rets":["integer"],
                  "args":["mc","entity","scene_resource","mesh_name"]
                }],
              "desc":"Creates a mesh component for the entity."
            }
          },
          "desc":""
        },
        "LanClient":{
          "type":"object",
          "members":{
            "lobby_browser":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanClient"],
                  "rets":["stingray.LanLobbyBrowser"],
                  "args":["client"]
                }],
              "desc":"Returns the lobby browser, which can be used to browse the LAN for games that the player can join."
            }
          },
          "desc":""
        },
        "Viewport":{
          "type":"object",
          "members":{
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Viewport","any(integer,string)+"],
                  "rets":["boolean"],
                  "args":["viewport","indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the viewport's\n\t\tscript data object."
            },
            "set_rect":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Viewport","number","number","number","number"],
                  "rets":["nil"],
                  "args":["viewport","x","y","width","height"]
                }],
              "desc":"Sets the position and dimension of the viewport."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Viewport","any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["viewport","indices","indices","indices","value"]
                },{
                  "types":["stingray.Viewport","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["viewport","indices","indices","value"]
                },{
                  "types":["stingray.Viewport","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["viewport","indices","value"]
                }],
              "desc":"Stores the specified value in the viewport's script data object, at a location determined\n\t\tby the specified indices."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Viewport","any(integer,string)+"],
                  "rets":["any"],
                  "args":["viewport","indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the viewport's script data object."
            }
          },
          "desc":""
        },
        "SmartMatchStatus":{
          "type":"object",
          "members":{
            "SEARCHING":{
              "desc":"integer = <internal>\nSearching in progress",
              "type":"constant"
            },
            "FOUND":{
              "desc":"integer = <internal>\nMatchmaking has found a matching session.",
              "type":"constant"
            },
            "EXPIRED":{
              "desc":"integer = <internal>\nMatchmaking timed out without finding a match.",
              "type":"constant"
            },
            "UNKNOWN":{
              "desc":"integer = <internal>\nThe matchmaking has not started.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "PS4ImeDialog":{
          "type":"object",
          "members":{
            "OPTION_PASSWORD":{
              "desc":"integer = <internal>\nHides characters.",
              "type":"constant"
            },
            "close":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer","string"],
                  "args":[]
                }],
              "desc":"Closes the keyboard window."
            },
            "ENTER_LABEL_SEARCH":{
              "desc":"integer = <internal>\n`Search`.",
              "type":"constant"
            },
            "LANGUAGE_NORWEGIAN":{
              "desc":"integer = <internal>\nNorwegian.",
              "type":"constant"
            },
            "OPTION_DISABLE_COPY_PASTE":{
              "desc":"integer = <internal>\nDisable copy and paste.",
              "type":"constant"
            },
            "LANGUAGE_GERMAN":{
              "desc":"integer = <internal>\nGerman.",
              "type":"constant"
            },
            "END_STATUS_ABORTED":{
              "desc":"integer = <internal>\nAborted.",
              "type":"constant"
            },
            "VALIGN_CENTER":{
              "desc":"integer = <internal>\nCenter alignment.",
              "type":"constant"
            },
            "TYPE_DEFAULT":{
              "desc":"integer = <internal>\nDefault type.",
              "type":"constant"
            },
            "ENTER_LABEL_DEFAULT":{
              "desc":"integer = <internal>\nDefault label.",
              "type":"constant"
            },
            "LANGUAGE_SPANISH_LA":{
              "desc":"integer = <internal>\nLA Spanish.",
              "type":"constant"
            },
            "LANGUAGE_TRADITIONAL_CHINESE":{
              "desc":"integer = <internal>\nChinese (traditional).",
              "type":"constant"
            },
            "LANGUAGE_TURKISH":{
              "desc":"integer = <internal>\nTurkish.",
              "type":"constant"
            },
            "OPTION_NO_LEARNING":{
              "desc":"integer = <internal>\nNo learning.",
              "type":"constant"
            },
            "OPTION_NO_AUTO_CAPITALIZATION":{
              "desc":"integer = <internal>\nNo auto-capitalization.",
              "type":"constant"
            },
            "ENTER_LABEL_SEND":{
              "desc":"integer = <internal>\n`Send`.",
              "type":"constant"
            },
            "END_STATUS_OK":{
              "desc":"integer = <internal>\nStatus OK.",
              "type":"constant"
            },
            "HALIGN_CENTER":{
              "desc":"integer = <internal>\nCenter alignment.",
              "type":"constant"
            },
            "VALIGN_BOTTOM":{
              "desc":"integer = <internal>\nBottom alignment.",
              "type":"constant"
            },
            "LANGUAGE_PORTUGUESE_BR":{
              "desc":"integer = <internal>\nBrazilian Portuguese.",
              "type":"constant"
            },
            "VALIGN_TOP":{
              "desc":"integer = <internal>\nTop alignment.",
              "type":"constant"
            },
            "is_finished":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the user has finished entering data into the ImeDialog."
            },
            "HALIGN_RIGHT":{
              "desc":"integer = <internal>\nRight alignment.",
              "type":"constant"
            },
            "abort":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Aborts keyboard editing."
            },
            "OPTION_FIXED_POSITION":{
              "desc":"integer = <internal>\nFixed position.",
              "type":"constant"
            },
            "LANGUAGE_KOREAN":{
              "desc":"integer = <internal>\nKorean.",
              "type":"constant"
            },
            "LANGUAGE_DUTCH":{
              "desc":"integer = <internal>\nDutch.",
              "type":"constant"
            },
            "HALIGN_LEFT":{
              "desc":"integer = <internal>\nLeft alignment.",
              "type":"constant"
            },
            "LANGUAGE_FINNISH":{
              "desc":"integer = <internal>\nFinnish.",
              "type":"constant"
            },
            "LANGUAGE_RUSSIAN":{
              "desc":"integer = <internal>\nRussian.",
              "type":"constant"
            },
            "OPTION_EXT_KEYBOARD":{
              "desc":"integer = <internal>\nExternal keyboard.",
              "type":"constant"
            },
            "TYPE_BASIC_LATIN":{
              "desc":"integer = <internal>\nBasic Latin keyboard type.",
              "type":"constant"
            },
            "END_STATUS_USER_CANCELED":{
              "desc":"integer = <internal>\nCanceled by the user.",
              "type":"constant"
            },
            "LANGUAGE_ITALIAN":{
              "desc":"integer = <internal>\nItalian.",
              "type":"constant"
            },
            "LANGUAGE_JAPANESE":{
              "desc":"integer = <internal>\nJapanese.",
              "type":"constant"
            },
            "LANGUAGE_FRENCH":{
              "desc":"integer = <internal>\nFrench.",
              "type":"constant"
            },
            "OPTION_MULTILINE":{
              "desc":"integer = <internal>\nMulti-line keyboard.",
              "type":"constant"
            },
            "LANGUAGE_SPANISH":{
              "desc":"integer = <internal>\nSpanish.",
              "type":"constant"
            },
            "LANGUAGE_SWEDISH":{
              "desc":"integer = <internal>\nSwedish.",
              "type":"constant"
            },
            "LANGUAGE_ENGLISH_GB":{
              "desc":"integer = <internal>\nUK English.",
              "type":"constant"
            },
            "OPTION_LANGUAGES_FORCED":{
              "desc":"integer = <internal>\nForces language.",
              "type":"constant"
            },
            "TYPE_MAIL":{
              "desc":"integer = <internal>\nMail address keyboard type.",
              "type":"constant"
            },
            "LANGUAGE_DANISH":{
              "desc":"integer = <internal>\nDanish.",
              "type":"constant"
            },
            "LANGUAGE_ENGLISH_US":{
              "desc":"integer = <internal>\nUS English.",
              "type":"constant"
            },
            "show":{
              "type":"function",
              "signatures":[{
                  "types":["ps4_keyboard_options"],
                  "rets":["nil"],
                  "args":["options"]
                }],
              "desc":"Shows the PlayStation 4 keyboard input dialog."
            },
            "is_showing":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not the ImeDialog box is showing."
            },
            "LANGUAGE_POLISH":{
              "desc":"integer = <internal>\nPolish.",
              "type":"constant"
            },
            "LANGUAGE_SIMPLIFIED_CHINESE":{
              "desc":"integer = <internal>\nChinese (simplified).",
              "type":"constant"
            },
            "LANGUAGE_PORTUGUESE_PT":{
              "desc":"integer = <internal>\nPortuguese.",
              "type":"constant"
            },
            "TYPE_URL":{
              "desc":"integer = <internal>\nURL keyboard type.",
              "type":"constant"
            },
            "ENTER_LABEL_GO":{
              "desc":"integer = <internal>\n`Go`.",
              "type":"constant"
            },
            "TYPE_NUMBER":{
              "desc":"integer = <internal>\nNumber keyboard type.",
              "type":"constant"
            }
          },
          "desc":""
        },
        "NavigationMesh":{
          "type":"object",
          "members":{
            "visualize_last_search":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.LineObject"],
                  "rets":["nil"],
                  "args":["mesh","lines"]
                }],
              "desc":"Visualizes the last search using the specified LineObject for debugging purposes."
            },
            "is_obstructed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","integer"],
                  "rets":["boolean"],
                  "args":["mesh","poly"]
                }],
              "desc":"Indicates whether or not the node at the specified index in the mesh is obstructed."
            },
            "set_obstructed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","integer","boolean"],
                  "rets":["nil"],
                  "args":["mesh","poly","is_obstructed"]
                }],
              "desc":"Sets the obstruction state for the polygon at the specified index in the mesh."
            },
            "find_nearest_polygon":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.Vector3"],
                  "rets":["integer"],
                  "args":["mesh","p"]
                }],
              "desc":"Finds the polygon in the mesh that is closest to the point *p* and returns its index."
            },
            "num_polygons":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Retrieves the number of polygons in the mesh."
            },
            "funnel":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","table"],
                  "rets":["integer[]","integer[]"],
                  "args":["mesh","path"]
                }],
              "desc":"Given a polygon path, this function returns two lists with the left and right edge vertices for that path."
            },
            "polygon_vertices":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","integer"],
                  "rets":["integer+"],
                  "args":["mesh","poly"]
                }],
              "desc":"Retrieves the indices of the vertices in the polygon with the specified index."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.NavigationMesh"],
                  "rets":["nil"],
                  "args":["world","mesh"]
                }],
              "desc":"Destroys the mesh."
            },
            "merge":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.NavigationMesh[]","number"],
                  "rets":["stingray.NavigationMesh"],
                  "args":["world","meshes","merge_tolerance"]
                }],
              "desc":"Creates a new NavigationMesh by merging all the navigation meshes provided in the *meshes* table."
            },
            "num_vertices":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Retrieves the number of vertices in the mesh."
            },
            "update_polygon":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.Vector3","integer"],
                  "rets":["stingray.Vector3","stingray.Vector3","integer","boolean"],
                  "args":["mesh","p","poly"]
                }],
              "desc":"Used to move a character on the navigation mesh."
            },
            "partial_search":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","any(number,stingray.Vector3)","stingray.Vector3","number","integer","number"],
                  "rets":["integer[]"],
                  "args":["mesh","start","end","focus","max_search_nodes","max_distance"]
                }],
              "desc":"Performs an A* search to find the closest path from a starting point or polygon to an ending point, similar to [NavigationMesh."
            },
            "vertex":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["mesh","v"]
                }],
              "desc":"Retrieves the position of the vertex with the specified index."
            },
            "find_polygon":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.Vector3"],
                  "rets":["integer?"],
                  "args":["mesh","p"]
                }],
              "desc":"Finds the polygon in the mesh that is closest to the point *p* and returns its index."
            },
            "search":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","number","number","number","integer","number"],
                  "rets":["integer[]"],
                  "args":["mesh","start","end","focus","max_search_nodes","max_distance"]
                },{
                  "types":["stingray.NavigationMesh","number","stingray.Vector3","number","stingray.Vector3","number","integer","number"],
                  "rets":["integer[]"],
                  "args":["mesh","start","start_pos","end","end_pos","focus","max_search_nodes","max_distance"]
                },{
                  "types":["stingray.NavigationMesh","stingray.Vector3","stingray.Vector3","number","integer","number"],
                  "rets":["integer[]"],
                  "args":["mesh","start","end","focus","max_search_nodes","max_distance"]
                }],
              "desc":"Performs an A* search to find the closest path from a starting point or polygon to an ending point or polygon, and returns the path found."
            },
            "constrain_to_polygon":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.Vector3","integer"],
                  "rets":["stingray.Vector3","boolean"],
                  "args":["mesh","p","poly"]
                }],
              "desc":"Constrains the point *p* to the specified polygon, and returns the resulting position."
            },
            "project_to_polygon":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","stingray.Vector3","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["mesh","p","poly"]
                }],
              "desc":"Projects the starting point *p* to the plane of the specified polygon."
            },
            "polygon_neighbors":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.NavigationMesh","integer"],
                  "rets":["any(integer,nil)+"],
                  "args":["mesh","poly"]
                }],
              "desc":"Retrieves the indices of the polygons that are neighbours to the polygon with the specified index."
            }
          },
          "desc":""
        },
        "PS4":{
          "type":"object",
          "members":{
            "signed_in":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["boolean"],
                  "args":["user_id"]
                }],
              "desc":"Indicates whether or not the specified player is signed in."
            },
            "is_pro":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "initial_user_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the user ID of the user who launched the application."
            },
            "title_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns the applications title id."
            },
            "user_country":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["string"],
                  "args":["user_id"]
                }],
              "desc":"Returns the country code specified when the account was created."
            },
            "system_service_status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean","boolean"],
                  "args":[]
                }],
              "desc":"Retrieves information about the current status of the application."
            },
            "account_id":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["integer"],
                  "args":["user_id"]
                }],
              "desc":"Indicates whether or not the specified player is signed in."
            },
            "np_id":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["string"],
                  "args":["user_id"]
                },{
                  "types":["integer?"],
                  "rets":["string"],
                  "args":["user_id"]
                }],
              "desc":"Returns the *SceNpId* of the specified player."
            },
            "hide_splash_screen":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            }
          },
          "desc":""
        },
        "PsnRoomBrowser":{
          "type":"object",
          "members":{
            "clear_filters":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser"],
                  "rets":["nil"],
                  "args":["browser"]
                }],
              "desc":"Clears all added filters."
            },
            "room":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser","integer"],
                  "rets":["network_psn_room_info"],
                  "args":["browser","index"]
                }],
              "desc":"Returns details about the specified room, including the ID that you must use\n\t\tto connect to the room."
            },
            "room_owner_np_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser","integer"],
                  "rets":["string"],
                  "args":["browser","index"]
                }],
              "desc":"Returns the *SceNpId* of the room owner."
            },
            "refresh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser"],
                  "rets":["nil"],
                  "args":["browser"]
                }],
              "desc":"Refreshes the list of available game rooms on the PlayStation Network."
            },
            "num_rooms":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser"],
                  "rets":["integer"],
                  "args":["browser"]
                }],
              "desc":"Returns the number of available rooms found on the PlayStation Network."
            },
            "is_refreshing":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser"],
                  "rets":["boolean"],
                  "args":["browser"]
                }],
              "desc":"Indicates whether or not the room browser is currently refreshing its internal list of available rooms\n\t\ton the PlayStation Network."
            },
            "add_filter":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoomBrowser","integer","integer","integer"],
                  "rets":["nil"],
                  "args":["browser","attribute_index","value","comparison"]
                }],
              "desc":"Adds a filter to the room browser, used to sort out unwanted rooms when matchmaking."
            }
          },
          "desc":""
        },
        "GameSession":{
          "type":"object",
          "members":{
            "other_peers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string[]"],
                  "args":["session"]
                }],
              "desc":"Retrieves a list of the IDs of all peers connected to the session, **not** including the peer\n\t\tcalling this function."
            },
            "create_game_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","string","table"],
                  "rets":["integer"],
                  "args":["session","type","fields"]
                }],
              "desc":"Creates a new game object of the specified type."
            },
            "synchronized_peers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string[]"],
                  "args":["session"]
                }],
              "desc":"Retrieves a list of all peers that have completed their initial synchronization of game objects."
            },
            "set_interpolation_lag_compensation":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","number"],
                  "rets":["nil"],
                  "args":["session","time"]
                }],
              "desc":"Sets how far in advance interpolations will be, in order to look smooth when updates for game objects\n\t\tdo not occur frequently."
            },
            "set_perfhud_pie_update_interval":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","number"],
                  "rets":["nil"],
                  "args":["session","time"]
                }],
              "desc":"Sets the interval between updates of the upload and download pies in the network performance HUD."
            },
            "unit_synchronizer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["stingray.UnitSynchronizer"],
                  "args":["session"]
                }],
              "desc":"Retrieves the unit synchronizer for the specified session."
            },
            "leave":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["nil"],
                  "args":["session"]
                }],
              "desc":"Called by a peer to tell the session host that it wants to leave the session."
            },
            "migrate_game_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer","string","table"],
                  "rets":["nil"],
                  "args":["session","object_id","new_peer_id","callback_object"]
                }],
              "desc":"Changes ownership of the specified game object to the specified peer."
            },
            "remove_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","string","table"],
                  "rets":["nil"],
                  "args":["session","peer_id","callback_object"]
                }],
              "desc":"Removes the peer with the specified ID from the session."
            },
            "game_object_is_type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer","string"],
                  "rets":["boolean"],
                  "args":["session","object_id","object_type"]
                }],
              "desc":"Indicates whether or not the specified game object is an instance of a specified game object type."
            },
            "game_object_owner":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer"],
                  "rets":["string"],
                  "args":["session","object_id"]
                }],
              "desc":"Retrieves the peer that owns the specified game object."
            },
            "host_error":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["boolean"],
                  "args":["session"]
                }],
              "desc":"Indicates whether or not an error has occurred communicating with the game session host."
            },
            "broken_connection":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string?"],
                  "args":["session"]
                }],
              "desc":"Detects broken connections to other peers in the game session."
            },
            "objects_owned_by":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","string"],
                  "rets":["integer[]"],
                  "args":["session","peer_id"]
                }],
              "desc":"Retrieves a list of all game objects owned by the specified peer."
            },
            "game_object_exists":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer"],
                  "rets":["boolean"],
                  "args":["session","object_id"]
                }],
              "desc":"Indicates whether or not a game object exists with the specified ID."
            },
            "set_game_object_priority":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer","string","number"],
                  "rets":["nil"],
                  "args":["session","object_id","peer_id","priority"]
                }],
              "desc":"Sets the priority of the specified game object for the specified peer."
            },
            "in_session":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["boolean"],
                  "args":["session"]
                }],
              "desc":"Indicates whether or not this peer is currently connected to the specified game session."
            },
            "destroy_game_object":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer"],
                  "rets":["nil"],
                  "args":["session","object_id"]
                }],
              "desc":"Destroys the specified game object."
            },
            "game_object_owned":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer"],
                  "rets":["boolean"],
                  "args":["session","object_id"]
                }],
              "desc":"Indicates whether or not the peer calling this function is the owner of the specified game object."
            },
            "game_object_field":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer","string"],
                  "rets":["any"],
                  "args":["session","object_id","field"]
                }],
              "desc":"Returns the data maintained by the specified game object in the specified data field."
            },
            "shutdown_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["nil"],
                  "args":["session"]
                }],
              "desc":"Called by the game session host to shut down the session and notify the peers."
            },
            "wants_to_leave":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string?"],
                  "args":["session"]
                }],
              "desc":"Detects peers in the game session that have requested to leave the session."
            },
            "synchronizing_peers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string[]"],
                  "args":["session"]
                }],
              "desc":"Retrieves a list of all peers that are still synchronizing initial game objects."
            },
            "disconnect_from_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["nil"],
                  "args":["session"]
                }],
              "desc":"Disconnects this peer from the session host, if a communication error has occurred."
            },
            "set_game_object_field":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","integer","string","any"],
                  "rets":["nil"],
                  "args":["session","object_id","field","value"]
                }],
              "desc":"Stores the specified value in the specified data field of the specified game object."
            },
            "game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string"],
                  "args":["session"]
                }],
              "desc":"Retrieves the ID of the peer that is currently acting as the host for the game session."
            },
            "add_peer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession","string"],
                  "rets":["nil"],
                  "args":["session","peer_id"]
                }],
              "desc":"Adds the peer with the specified peer ID to the session."
            },
            "peers":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["string[]"],
                  "args":["session"]
                }],
              "desc":"Retrieves a list of the IDs of all peers connected to the session, including the peer\n\t\tcalling this function."
            },
            "migrate_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["nil"],
                  "args":["session"]
                }],
              "desc":"Makes the peer calling this function take over the role of host for the specified game session."
            },
            "make_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GameSession"],
                  "rets":["nil"],
                  "args":["session"]
                }],
              "desc":"Makes this game instance the session host for the game session."
            }
          },
          "desc":""
        },
        "DebugNameComponent":{
          "desc":"",
          "type":"object"
        },
        "PackageTransferWatcher":{
          "type":"object",
          "members":{
            "completed":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["boolean"],
                  "args":["watch_id"]
                }],
              "desc":"Use this function to monitor chunk install completion."
            },
            "watch_specific_chunks":{
              "type":"function",
              "signatures":[{
                  "types":["integer+"],
                  "rets":["integer"],
                  "args":["chunks"]
                }],
              "desc":"Use this to monitor progress and completion of a group of chunks."
            },
            "last_completed_chunks":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer*"],
                  "args":[]
                }],
              "desc":"Returns chunks that have finished their install since last time this function was called."
            },
            "init":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Initializes  the PackageTransferWatcher."
            },
            "progress":{
              "type":"function",
              "signatures":[{
                  "types":["integer?"],
                  "rets":["integer"],
                  "args":["watch_id"]
                }],
              "desc":"Use this function to monitor progress of the streaming install."
            },
            "transfer_status":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Call this to get the transfer status of the streaming install."
            },
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"This destroys the PackageTransferWatcher, freeing up system resources."
            },
            "stop_watching_chunks":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["watch_id"]
                }],
              "desc":"Call this function when finished watching specific chunks."
            }
          },
          "desc":""
        },
        "MultiInstanceComponent":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MultiInstanceComponent","stingray.Entity","integer"],
                  "rets":["nil"],
                  "args":["dc","entity","id"]
                }],
              "desc":"Destroys a particular component instance for an entity."
            },
            "get_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MultiInstanceComponent","stingray.Entity","integer","any(string,string[])"],
                  "rets":["any*"],
                  "args":["dc","entity","id","key"]
                }],
              "desc":"Gets the value of a property key."
            },
            "instances":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MultiInstanceComponent","stingray.Entity"],
                  "rets":["integer*"],
                  "args":["dc","entity"]
                }],
              "desc":"Returns the IDs for all the entity's components."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MultiInstanceComponent","stingray.Entity"],
                  "rets":["integer"],
                  "args":["dc","entity"]
                }],
              "desc":"Creates a component for the specified entity and returns an ID uniquely\n\t\t\t\tidentifying it."
            },
            "set_property":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.MultiInstanceComponent","stingray.Entity","integer","any(string,string[])","any"],
                  "rets":["nil"],
                  "args":["dc","entity","id","key","value"]
                }],
              "desc":"Sets the value for a property key."
            }
          },
          "desc":""
        },
        "TagComponent":{
          "type":"object",
          "members":{
            "remove_tag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TagComponent","stingray.Entity","string"],
                  "rets":["nil"],
                  "args":["tc","e","tag"]
                }],
              "desc":"Removes the specified tag from the entity."
            },
            "has_tag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TagComponent","stingray.Entity","string"],
                  "rets":["boolean"],
                  "args":["tc","e","tag"]
                }],
              "desc":"Checks if an entity has a specific tag."
            },
            "get_entities":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TagComponent","string"],
                  "rets":["stingray.Entity[]"],
                  "args":["tc","tag"]
                }],
              "desc":"Returns a table with all entities that have the specified tag."
            },
            "add_tag":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TagComponent","stingray.Entity","string"],
                  "rets":["nil"],
                  "args":["tc","e","tag"]
                }],
              "desc":"Adds the specified tag to the entity."
            }
          },
          "desc":""
        },
        "RPC":{
          "desc":"",
          "type":"object"
        },
        "AnimationCurves":{
          "signatures":[{
              "types":["string"],
              "rets":["stingray.AnimationCurves"],
              "args":["resource"]
            }],
          "type":"object",
          "members":{
            "sample":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.AnimationCurves","string","string","number","boolean?"],
                  "rets":["number+"],
                  "args":["animation","object","parameter","time","step_sampling"]
                }],
              "desc":"Samples a curve at the specified time."
            }
          },
          "desc":""
        },
        "Entity":{
          "desc":"",
          "type":"object"
        },
        "Vector3Box":{
          "signatures":[{
              "types":[],
              "rets":["stingray.Vector3Box"],
              "args":[]
            },{
              "types":["stingray.Vector3"],
              "rets":["stingray.Vector3Box"],
              "args":["vector"]
            },{
              "types":["number","number","number"],
              "rets":["stingray.Vector3Box"],
              "args":["x","y","z"]
            }],
          "type":"object",
          "members":{
            "store":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3Box","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["box","vector"]
                },{
                  "types":["stingray.Vector3Box","number","number","number"],
                  "rets":["nil"],
                  "args":["box","x","y","z"]
                }],
              "desc":"Stores the specified vector values in the box."
            },
            "unbox":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Vector3Box"],
                  "rets":["stingray.Vector3"],
                  "args":["box"]
                }],
              "desc":"Retrieves the vector last stored in the specified box."
            }
          },
          "desc":""
        },
        "Application":{
          "type":"object",
          "members":{
            "new_world":{
              "type":"function",
              "signatures":[{
                  "types":["integer*"],
                  "rets":["stingray.World"],
                  "args":["flags"]
                }],
              "desc":"Creates and returns a new game [World]."
            },
            "guid":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Returns a globally unique identifier, which can be useful for identifying particular objects."
            },
            "DISABLE_SOUND":{
              "desc":"integer = <internal>\nDisables sound playback in a world.",
              "type":"constant"
            },
            "restart_file_log":{
              "type":"function",
              "signatures":[{
                  "types":["string?","string?"],
                  "rets":["nil"],
                  "args":["local_filename","remote_filename"]
                }],
              "desc":"Closes the current file log, copies the remote log, and then restarts logging."
            },
            "flow_callback_context_level":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Level"],
                  "args":[]
                }],
              "desc":"Returns the Level which owns the currently executing flow node, or nil\n\t\tif this node is not owned by a Level."
            },
            "source_platform":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Identifies the platform of the source data being used in the game."
            },
            "set_exit_code":{
              "type":"function",
              "signatures":[{
                  "types":["integer","boolean?","boolean?"],
                  "rets":["nil"],
                  "args":["value","display_to_user","triggered_callstack"]
                }],
              "desc":""
            },
            "time_since_launch":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["number"],
                  "args":[]
                }],
              "desc":"Returns the elapsed time, in seconds, since the application was launched."
            },
            "set_user_setting":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","indices","indices","value"]
                },{
                  "types":["any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","indices","value"]
                },{
                  "types":["any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","value"]
                }],
              "desc":"Stores the specified value in the user settings data object, at a location determined\n\t\t\tby the specified indices."
            },
            "set_time_step_policy":{
              "type":"function",
              "signatures":[{
                  "types":["any+"],
                  "rets":["nil"],
                  "args":["params"]
                }],
              "desc":"Controls how the application's time step is advanced."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","indices","indices","value"]
                },{
                  "types":["any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","indices","value"]
                },{
                  "types":["any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["indices","value"]
                }],
              "desc":"Stores the specified value in a global script data object, at a location determined\n\t\tby the specified indices."
            },
            "DISABLE_RENDERING":{
              "desc":"integer = <internal>\nDisables rendering in a world.",
              "type":"constant"
            },
            "render_caps":{
              "type":"function",
              "signatures":[{
                  "types":["string+"],
                  "rets":["boolean+"],
                  "args":["caps"]
                }],
              "desc":"Returns the status of the specified render caps."
            },
            "machine_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Fetch a unique identifier for this machine."
            },
            "is_constrained":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":""
            },
            "all_plugin_names":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string[]"],
                  "args":[]
                }],
              "desc":"Return the names of all plugins that specify a name."
            },
            "build_identifier":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Identifies the build version number of the engine."
            },
            "create_viewport":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","string"],
                  "rets":["stingray.Viewport"],
                  "args":["world","viewport_template"]
                }],
              "desc":"Creates a viewport that will be used when rendering the specified world using the named\n\t\tviewport template, which must be set up in the render config file."
            },
            "console_command":{
              "type":"function",
              "signatures":[{
                  "types":["string","string*"],
                  "rets":["nil"],
                  "args":["command","parameters"]
                }],
              "desc":"Simulates sending a command from the console directly to the game."
            },
            "hex64_to_dec":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["value"]
                }],
              "desc":"Returns a new string with the decimal value encoded as a string or nil if the value cannot be converted."
            },
            "apply_user_settings":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Reloads the render config file, and reboots the renderer using the new settings read from the file."
            },
            "set_show_cursor":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["val"]
                }],
              "desc":""
            },
            "is_fullscreen":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window"],
                  "rets":["boolean"],
                  "args":["window"]
                },{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Returns fullscreen state for the specified window."
            },
            "user_setting":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string)+"],
                  "rets":["nil"],
                  "args":["indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the user settings data object."
            },
            "set_max_frame_stacking":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["frames"]
                }],
              "desc":"Sets the maximum number of frames that are permitted to be stacked in the driver and the GPU."
            },
            "release_resource_package":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.ResourcePackage"],
                  "rets":["nil"],
                  "args":["package"]
                }],
              "desc":"Frees a resource package that was previously created by a call to [resource_package()]."
            },
            "set_autoload_enabled":{
              "type":"function",
              "signatures":[{
                  "types":["boolean"],
                  "rets":["nil"],
                  "args":["isEnabled"]
                }],
              "desc":"Determines whether or not the auto-loading mechanism is enabled."
            },
            "open_url_in_browser":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["url"]
                }],
              "desc":"Opens the specified URL in the default browser."
            },
            "enum_display_modes":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":"Returns detailed information about all available display modes on all screens."
            },
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string)+"],
                  "rets":["nil"],
                  "args":["indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the global\n\t\tscript data object."
            },
            "WIN32":{
              "desc":"string = \"win32\"\nThe string used internally to represent Windows platforms.",
              "type":"constant"
            },
            "console_port":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Indicates the number of the port that the console is listening on."
            },
            "set_resource_property_preference_order":{
              "type":"function",
              "signatures":[{
                  "types":["string+"],
                  "rets":["nil"],
                  "args":["names"]
                }],
              "desc":"Sets the property preference order for loading resources."
            },
            "ENABLE_UMBRA":{
              "desc":"integer = <internal>\nEnables the use of UMBRA to cull this world.",
              "type":"constant"
            },
            "XB1":{
              "desc":"string = \"xb1\"\nThe string used internally to represent the Xbox One platform.",
              "type":"constant"
            },
            "console_send":{
              "type":"function",
              "signatures":[{
                  "types":["console_commands"],
                  "rets":["nil"],
                  "args":["command"]
                }],
              "desc":"Sends the specified command to the Stingray console, the same as if it had been sent from an external editor."
            },
            "export_to_umbra":{
              "type":"function",
              "signatures":[{
                  "types":["string","table","boolean","boolean"],
                  "rets":["boolean"],
                  "args":["filename","units","bake","debug"]
                }],
              "desc":"Exports (meshes of) units to an umbra scene."
            },
            "release_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World"],
                  "rets":["nil"],
                  "args":["world"]
                }],
              "desc":"Destroys the specified [World]."
            },
            "ENABLE_REPLAY":{
              "desc":"integer = <internal>\nEnables [Replay] for a world. Only available in development builds.",
              "type":"constant"
            },
            "main_world":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.World"],
                  "args":[]
                }],
              "desc":"Debug helper function that returns the \"most important\" game world."
            },
            "add_crash_property":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["nil"],
                  "args":["property","text"]
                }],
              "desc":"Adds text to inject in the log when the game crashes as a key-value pair."
            },
            "sleep":{
              "type":"function",
              "signatures":[{
                  "types":["number"],
                  "rets":["nil"],
                  "args":["milliseconds"]
                }],
              "desc":"Sleeps for the specified amount of time."
            },
            "autoload_resource_package":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["name"]
                }],
              "desc":"When autoload is enabled, automatically loads all the resources from the specified resource package."
            },
            "APEX_LOD_RESOURCE_BUDGET":{
              "desc":"integer = <internal>\nSets the apex_lod_resource_budget to a specified value.",
              "type":"constant"
            },
            "sysinfo":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Indicates the hardware that the game runs on."
            },
            "DISABLE_APEX_CLOTH":{
              "desc":"integer = <internal>\nDisables Apex cloth simulation in a world.",
              "type":"constant"
            },
            "dec64_to_hex":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["string?"],
                  "args":["value"]
                }],
              "desc":"Returns a new string with the hexadecimal value encoded as a string or nil if the value cannot be converted."
            },
            "make_hash":{
              "type":"function",
              "signatures":[{
                  "types":["any+"],
                  "rets":["string"],
                  "args":["values"]
                }],
              "desc":"Creates a combined hash out of the arguments."
            },
            "DISABLE_PHYSICS":{
              "desc":"integer = <internal>\nDisables physics in a world.",
              "type":"constant"
            },
            "quit":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Quits the application."
            },
            "can_get":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["boolean"],
                  "args":["type","name"]
                }],
              "desc":"Indicates whether or not the specified resource is available."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["any(integer,string)+"],
                  "rets":["any"],
                  "args":["indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the global script data object."
            },
            "set_process_priority":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["prio"]
                }],
              "desc":"Sets the process priority."
            },
            "PS4":{
              "desc":"string = \"ps4\"\nThe string used internally to represent the PlayStation 4 platform.",
              "type":"constant"
            },
            "scan_for_windows_ps4_controllers":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Detects and setups all PS4 controllers connected to the PC."
            },
            "bundled":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":""
            },
            "build":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Identifies the build mode of the engine."
            },
            "user_settings_load_error":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"Indicates whether or not an error occurred when loading the user settings data file."
            },
            "platform":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string"],
                  "args":[]
                }],
              "desc":"Identifies the platform the application is currently running on."
            },
            "debug_world":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.World?"],
                  "args":[]
                }],
              "desc":"Debug helper function that retrieves the debug world that Stingray is using for debug drawing."
            },
            "flow_callback_context_world":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.World"],
                  "args":[]
                }],
              "desc":"Returns the World which owns the currently executing flow node, or nil\n\t\tif this node is not owned by a World."
            },
            "destroy_viewport":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Viewport"],
                  "rets":["nil"],
                  "args":["world","viewport"]
                }],
              "desc":"Destroys a viewport that was previously created by a call to [create_viewport()]."
            },
            "is_dedicated_server":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["boolean"],
                  "args":[]
                }],
              "desc":"The engine can be compiled in dedicated mode or be instructed to behave like that."
            },
            "resource_package":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["stingray.ResourcePackage"],
                  "args":["name"]
                }],
              "desc":"Creates a resource package from the *."
            },
            "argv":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["string*"],
                  "args":[]
                }],
              "desc":"Returns the command-line arguments that were supplied to the engine when it was executed, if any."
            },
            "back_buffer_size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Window?"],
                  "rets":["number"],
                  "args":["window"]
                }],
              "desc":"Returns the back buffer resolution."
            },
            "process_id":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer"],
                  "args":[]
                }],
              "desc":"Returns the process ID assigned to the application by the operating system."
            },
            "flow_callback_context_unit":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.Unit"],
                  "args":[]
                }],
              "desc":"Returns the Unit which owns the currently executing flow node, or nil\n\t\tif this node is not owned by a Unit."
            },
            "settings":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["table"],
                  "args":[]
                }],
              "desc":"Returns an object that contains the script settings specified in the `settings.ini` file:\n\t\ti.e. whatever is found in the `settings.ini` file under the `script_data` setting."
            },
            "save_user_settings":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["integer","string"],
                  "args":[]
                }],
              "desc":"Saves the contents of the current user settings data object to a file on disk."
            },
            "crash":{
              "type":"function",
              "signatures":[{
                  "types":["string"],
                  "rets":["nil"],
                  "args":["value"]
                }],
              "desc":""
            },
            "worlds":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["stingray.World[]"],
                  "args":[]
                }],
              "desc":"Returns all the game worlds you have created."
            },
            "render_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.World","stingray.Camera","stingray.Viewport","stingray.ShadingEnvironment","stingray.Window?"],
                  "rets":["nil"],
                  "args":["world","camera","viewport","shading_environment","window"]
                }],
              "desc":"Renders the specified world, with the specified shading environment, using the specified camera,\n\t\tin the specified viewport."
            }
          },
          "desc":""
        },
        "GwNavBoxObstacle":{
          "type":"object",
          "members":{
            "destroy":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle"],
                  "rets":["nil"],
                  "args":["box_obstacle"]
                }],
              "desc":"Destroys a box obstacle."
            },
            "set_linear_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["box_obstacle","linear_velocity"]
                }],
              "desc":"Sets the current linear velocity of the specified obstacle."
            },
            "set_does_trigger_tagvolume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle","boolean"],
                  "rets":["nil"],
                  "args":["box_obstacle","does_trigger"]
                }],
              "desc":"If false, this obstacle will only be avoided by bots."
            },
            "create":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","stingray.Vector3","boolean","stingray.Quaternion","number","number","number"],
                  "rets":["stingray.GwNavBoxObstacle"],
                  "args":["nav_world","position","local_center","half_extents","is_exclusive","color","layer_id","smartobject_id","user_data_id"]
                }],
              "desc":"Creates a box obstacle."
            },
            "set_angular_velocity":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle","stingray.Vector3"],
                  "rets":["nil"],
                  "args":["box_obstacle","angular_velocity"]
                }],
              "desc":"Sets the current angular velocity of the specified obstacle."
            },
            "set_transform":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle","stingray.Matrix4x4"],
                  "rets":["nil"],
                  "args":["box_obstacle","transform"]
                }],
              "desc":"Sets the current transform of the specified obstacle."
            },
            "create_exclusive":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavWorld","stingray.Vector3","stingray.Vector3","stingray.Vector3"],
                  "rets":["stingray.GwNavBoxObstacle"],
                  "args":["nav_world","position","local_center","half_extents"]
                }],
              "desc":"Creates a box obstacle with exclusive NavTag."
            },
            "remove_from_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle"],
                  "rets":["nil"],
                  "args":["box_obstacle"]
                }],
              "desc":"Removes the given [GwNavBoxObstacle] from the world that was specified when it was created."
            },
            "set_rotation_mode_around_yaw_only":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle","boolean"],
                  "rets":["nil"],
                  "args":["box_obstacle","rotates_around_yaw"]
                }],
              "desc":"Sets the rotation mode of the obstacle - either it will rotate around yaw, or it will rotate freely."
            },
            "add_to_world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.GwNavBoxObstacle"],
                  "rets":["nil"],
                  "args":["box_obstacle"]
                }],
              "desc":"Adds the given [GwNavBoxObstacle] to the world that was specified when it was created."
            }
          },
          "desc":""
        },
        "Level":{
          "type":"object",
          "members":{
            "flow_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string"],
                  "rets":["string"],
                  "args":["level","name"]
                }],
              "desc":"Returns the value of the external flow variable with the specified name."
            },
            "trigger_level_shutdown":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["nil"],
                  "args":["level"]
                }],
              "desc":"Triggers the \"level shutdown\" event in the level's flow graph."
            },
            "has_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","any(integer,string)+"],
                  "rets":["boolean"],
                  "args":["level","indices"]
                }],
              "desc":"Indicates whether or not any data has been saved at the specified indices in the level's\n\t\tscript data object."
            },
            "get_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","any(integer,string)+"],
                  "rets":["any"],
                  "args":["level","indices"]
                }],
              "desc":"Retrieves the data set at the specified indices within the level's script data object."
            },
            "nested_levels":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["stingray.Level[]"],
                  "args":["level"]
                }],
              "desc":"Returns a list of the levels that are nested directly below the specified level."
            },
            "world":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["stingray.World"],
                  "args":["level"]
                }],
              "desc":"Returns the [World] that the [Level] has been spawned in."
            },
            "unit_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","stingray.Unit"],
                  "rets":["integer?"],
                  "args":["level","unit"]
                }],
              "desc":"Returns the index of the unit in the level."
            },
            "unit_by_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","integer"],
                  "rets":["stingray.Unit"],
                  "args":["level","index"]
                }],
              "desc":"Retrieves the unit with the specified *index* in the level."
            },
            "trigger_event":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string"],
                  "rets":["nil"],
                  "args":["level","event"]
                }],
              "desc":"Triggers the external event in the level flow script."
            },
            "units":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["table"],
                  "args":["level"]
                }],
              "desc":"Returns a list of all the still remaining units that were spawned when the level was loaded."
            },
            "is_point_inside_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string","stingray.Vector3"],
                  "rets":["boolean"],
                  "args":["level","volume_name","point"]
                }],
              "desc":"Indicates whether or not the point is inside the named volume in the level."
            },
            "num_nested_levels":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["integer"],
                  "args":["level"]
                }],
              "desc":"Returns the number of nested levels inside the level."
            },
            "navigation_mesh":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["stingray.NavigationMesh"],
                  "args":["level"]
                }],
              "desc":"Returns the navigation mesh for the level."
            },
            "next_random_point_inside_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string","integer"],
                  "rets":["integer","stingray.Vector3"],
                  "args":["level","volume_name","seed"]
                }],
              "desc":"A pure random point function."
            },
            "random_point_inside_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string"],
                  "rets":["stingray.Vector3"],
                  "args":["level","volume_name"]
                }],
              "desc":"Returns the world-space position of a random point inside the named volume."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","any(integer,string)","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["level","indices","indices","indices","value"]
                },{
                  "types":["stingray.Level","any(integer,string)","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["level","indices","indices","value"]
                },{
                  "types":["stingray.Level","any(integer,string)","any"],
                  "rets":["nil"],
                  "args":["level","indices","value"]
                }],
              "desc":"Stores the specified value in a global script data object, at a location determined\n\t\tby the specified indices."
            },
            "num_splines":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["integer"],
                  "args":["level"]
                }],
              "desc":"Returns the number of splines in the level."
            },
            "spawn_background":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["nil"],
                  "args":["level"]
                }],
              "desc":"Spawns all background elements in the level."
            },
            "trigger_level_update":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["nil"],
                  "args":["level"]
                }],
              "desc":"Triggers the \"level updated\" event in the level's flow graph."
            },
            "trigger_level_loaded":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["nil"],
                  "args":["level"]
                }],
              "desc":"Triggers the \"level loaded\" event in the level's flow graph."
            },
            "set_flow_variable":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string","string"],
                  "rets":["nil"],
                  "args":["level","name","value"]
                }],
              "desc":"Sets the value of the specified external flow variable."
            },
            "has_volume":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string"],
                  "rets":["boolean"],
                  "args":["level","volume_name"]
                }],
              "desc":"Indicates whether or not the level has a volume with the specified name."
            },
            "entities":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level"],
                  "rets":["stingray.Entity[]"],
                  "args":["level"]
                }],
              "desc":"Returns a table with all the entities in the level."
            },
            "spline_by_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","integer"],
                  "rets":["stingray.Vector3[]"],
                  "args":["level","index"]
                }],
              "desc":"Returns the control points for the bezier spline with the specified index."
            },
            "spline":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Level","string"],
                  "rets":["stingray.Vector3[]"],
                  "args":["level","name"]
                }],
              "desc":"Returns the control points for the bezier spline with the specified name."
            }
          },
          "desc":""
        },
        "Pad1":{
          "desc":"",
          "type":"object"
        },
        "TouchInputController":{
          "type":"object",
          "members":{
            "is_touch_down":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Indicates whether or not the contact with the specified id was initiated in this frame."
            },
            "accelerator_resolution":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController"],
                  "rets":["stingray.Vector3"],
                  "args":["controller"]
                }],
              "desc":"Retrieves the accelerator resolution for the controller."
            },
            "num_contacts":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController"],
                  "rets":["integer"],
                  "args":["controller"]
                }],
              "desc":"Retrieves the number of touch contacts that are currently active on the controller."
            },
            "contacts":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController"],
                  "rets":["integer*"],
                  "args":["controller"]
                }],
              "desc":"Retrieves all contacts that are currently active on the controller."
            },
            "location_delta":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the difference between the location of the contact in the previous frame and the current\n\t\tlocation of the contact in the current frame."
            },
            "is_primary":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Indicates whether or not the contact with the specified id is considered the primary contact point."
            },
            "resolution":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController"],
                  "rets":["stingray.Vector3"],
                  "args":["controller"]
                }],
              "desc":"Retrieves the resolution of the input coordinates for the controller."
            },
            "has_contact":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Indicates whether or not a contact exists with the specified id."
            },
            "pressure":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["number"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the pressure of the specified contact on the surface of the touch panel."
            },
            "major_axis_size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["number"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the size of the specified contact along the major axis."
            },
            "edge":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["string?"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Indicates the edge that this contact originates from, if any."
            },
            "location":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["stingray.Vector3"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the location of the specified contact on the touch panel."
            },
            "size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["number"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the size of the specified contact."
            },
            "minor_axis_size":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["number"],
                  "args":["controller","contact_id"]
                }],
              "desc":"Retrieves the size of the specified contact along the minor axis."
            },
            "is_touch_up":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.TouchInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","contact"]
                }],
              "desc":"Indicates whether or not the contact with the specified id was released in this frame."
            }
          },
          "desc":""
        },
        "QuaternionBox":{
          "signatures":[{
              "types":[],
              "rets":["stingray.QuaternionBox"],
              "args":[]
            },{
              "types":["stingray.Quaternion"],
              "rets":["stingray.QuaternionBox"],
              "args":["quat"]
            },{
              "types":["number","number","number","number"],
              "rets":["stingray.QuaternionBox"],
              "args":["x","y","z","w"]
            }],
          "type":"object",
          "members":{
            "store":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.Quaternion"],
                  "rets":["nil"],
                  "args":["quat"]
                },{
                  "types":["number","number","number","number"],
                  "rets":["nil"],
                  "args":["x","y","z","w"]
                }],
              "desc":"Stores the specified quaternion values in the box."
            },
            "unbox":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.QuaternionBox"],
                  "rets":["stingray.Quaternion"],
                  "args":["box"]
                }],
              "desc":"Retrieves the quaternion last stored in the specified box."
            }
          },
          "desc":""
        },
        "PsnRoom":{
          "type":"object",
          "members":{
            "set_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","string?"],
                  "rets":["nil"],
                  "args":["room","peer_id"]
                }],
              "desc":"Sets the host of the game session to the specified peer."
            },
            "WAITING_TO_CREATE":{
              "desc":"integer = <internal>\nIndicates that the room is queued to be created, but [PsnClient.ready()] does not yet return *true*. This is the\n\t\tstate of the room after it has been created with [Network.create_psn_room()]. When [PsnClient.ready()] returns *true*,\n\t\tthe state changes to [PsnRoom.CREATING].",
              "type":"constant"
            },
            "JOINED":{
              "desc":"integer = <internal>\nIndicates that the player is in the room.",
              "type":"constant"
            },
            "FAILED":{
              "desc":"integer = <internal>\nThis state indicates that this peer has been rejected by the room host, or has dropped out of the room due\n\t\tto a problem such as a bad connection..",
              "type":"constant"
            },
            "JOINING":{
              "desc":"integer = <internal>\nThe state of the room after it has been joined by a call to [Network.join_psn_room()].\n\t\tThis state means the room is waiting for the room owner to accept this peer as a room member. When this peer is\n\t\taccepted, the state changes to [PsnRoom.JOINED]. If this peer is not accepted, the state changes to [PsnRoom.FAILED].",
              "type":"constant"
            },
            "member":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","integer"],
                  "rets":["network_psn_room_member"],
                  "args":["room","index"]
                }],
              "desc":"Retrieves detailed information about the room member at the specified index."
            },
            "num_members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["integer"],
                  "args":["room"]
                }],
              "desc":"Returns the number of members currently in the room."
            },
            "user_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","integer"],
                  "rets":["integer"],
                  "args":["room","index"]
                }],
              "desc":"Retrieves the room members user_id at the specified index."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["integer"],
                  "args":["room"]
                }],
              "desc":"Indicates the current state of the room, and whether or not this peer has joined successfully."
            },
            "sce_np_room_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["string"],
                  "args":["room"]
                }],
              "desc":"Retrieves the SceNpMatching2RoomId of the PSN room."
            },
            "game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["string?"],
                  "args":["room"]
                }],
              "desc":"Returns the game session host for the room."
            },
            "CREATING":{
              "desc":"integer = <internal>\nIndicates that the creation of the room has started. If the room is successfully created, the state\n\t\tchanges to [PsnRoom.JOINED]. If the creation fails, the state changes to [PsnRoom.FAILED].",
              "type":"constant"
            },
            "set_searchable_attribute_integer":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","integer","integer"],
                  "rets":["nil"],
                  "args":["room","id","value"]
                }],
              "desc":"Stores an integer in a specific location in the searchable attribute integer list."
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","string"],
                  "rets":["nil"],
                  "args":["room","value"]
                }],
              "desc":"Stores a single opaque data value for the room."
            },
            "set_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom","string"],
                  "rets":["nil"],
                  "args":["room","name"]
                }],
              "desc":"Stores a name for the room."
            },
            "owner":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.PsnRoom"],
                  "rets":["string"],
                  "args":["room"]
                }],
              "desc":"Retrieves the current owner of the PSN room."
            }
          },
          "desc":""
        },
        "BaseInputController":{
          "type":"object",
          "members":{
            "active":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["boolean"],
                  "args":["controller"]
                }],
              "desc":"Indicates whether or not the controller is *active*: i."
            },
            "released":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","id"]
                }],
              "desc":"Indicates whether or not the player released the button with the specified id during this frame."
            },
            "axis":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer","integer?","number?"],
                  "rets":["stingray.Vector3"],
                  "args":["controller","id","dead_zone_mode","dead_zone_size"]
                }],
              "desc":"Returns the input value for a single axis of the controller."
            },
            "axis_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","string"],
                  "rets":["integer"],
                  "args":["controller","name"]
                }],
              "desc":"Deprecated; Axes are referenced by IDs not indices, please use stingray."
            },
            "button_index":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","string"],
                  "rets":["integer"],
                  "args":["controller","name"]
                }],
              "desc":"Deprecated; Buttons are referenced by IDs not indices, please use stingray."
            },
            "button":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer"],
                  "rets":["number"],
                  "args":["controller","id"]
                }],
              "desc":"Returns the current input value of the button with the specified id."
            },
            "any_pressed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["integer?"],
                  "args":["controller"]
                }],
              "desc":"Indicates whether or not the player pressed any buttons at all in the current frame."
            },
            "pressed":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer"],
                  "rets":["boolean"],
                  "args":["controller","id"]
                }],
              "desc":"Indicates whether or not the player pressed the button with the specified id during this frame."
            },
            "type":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["string"],
                  "args":["controller"]
                }],
              "desc":"Returns a description of the hardware device used for this controller."
            },
            "any_released":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["integer?"],
                  "args":["controller"]
                }],
              "desc":"Indicates whether or not the player released any buttons at all in the current frame."
            },
            "axis_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","string"],
                  "rets":["integer"],
                  "args":["controller","name"]
                }],
              "desc":"Retrieves the id of the axis with the specified name in the controller, if any."
            },
            "button_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer"],
                  "rets":["string"],
                  "args":["controller","id"]
                }],
              "desc":"Retrieves the name of the button with the specified id in the controller."
            },
            "axis_name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","integer"],
                  "rets":["string"],
                  "args":["controller","id"]
                }],
              "desc":"Retrieves the name of the axis with the specified id in the controller."
            },
            "name":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["string"],
                  "args":["controller"]
                }],
              "desc":"Returns a unique name for the controller: e."
            },
            "disconnected":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["boolean"],
                  "args":["controller"]
                }],
              "desc":"Indicates whether or not the controller has been disconnected this frame."
            },
            "num_axes":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["integer"],
                  "args":["controller"]
                }],
              "desc":"Returns the number of axes on the controller."
            },
            "connected":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["boolean"],
                  "args":["controller"]
                }],
              "desc":"Indicates whether or not the controller has been attached this frame."
            },
            "button_id":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController","string"],
                  "rets":["integer"],
                  "args":["controller","name"]
                }],
              "desc":"Retrieves the id of the button with the specified name in the controller, if any."
            },
            "num_buttons":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.BaseInputController"],
                  "rets":["integer"],
                  "args":["controller"]
                }],
              "desc":"Returns the number of buttons on the controller."
            }
          },
          "desc":""
        },
        "LanLobby":{
          "type":"object",
          "members":{
            "set_game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string?"],
                  "rets":["nil"],
                  "args":["lobby","peer_id"]
                }],
              "desc":"Sets the host of the game session to the specified peer."
            },
            "lobby_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby"],
                  "rets":["string"],
                  "args":["lobby"]
                }],
              "desc":"Returns the ID of the peer that is acting as the host for the lobby."
            },
            "FAILED":{
              "desc":"integer = <internal>\nThis state indicates that this peer has been rejected by the lobby host, or has dropped out of the lobby due\n\t\tto a problem such as a bad connection.",
              "type":"constant"
            },
            "JOINING":{
              "desc":"integer = <internal>\nThis state means the lobby is waiting for the lobby host to accept this peer as a lobby member. When this\n\t\tpeer has been accepted, the state changes to [LanLobby.JOINED]. If this peer is not accepted, the state\n\t\tchanges to [LanLobby.FAILED].",
              "type":"constant"
            },
            "JOINED":{
              "desc":"integer = <internal>\nThis state indicates that this peer has been accepted into the lobby.",
              "type":"constant"
            },
            "set_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string","string"],
                  "rets":["nil"],
                  "args":["lobby","key","value"]
                }],
              "desc":"Stores a particular data value for the lobby."
            },
            "set_member_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string","string"],
                  "rets":["nil"],
                  "args":["lobby","key","value"]
                }],
              "desc":"Stores a particular data value for the member of the lobby calling this function."
            },
            "state":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby"],
                  "rets":["integer"],
                  "args":["lobby"]
                }],
              "desc":"Indicates the current state of the lobby, and whether or not this peer has joined successfully."
            },
            "member_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string","string"],
                  "rets":["string"],
                  "args":["lobby","peer_id","key"]
                }],
              "desc":"Retrieves the specified data stored for the specified peer in the lobby."
            },
            "game_session_host":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby"],
                  "rets":["string?"],
                  "args":["lobby"]
                }],
              "desc":"Returns the game session host for the lobby."
            },
            "CREATING":{
              "desc":"integer = <internal>\nThis is the state of the lobby after it has been created with [Network.create_lan_lobby()].\n\t\tIf the lobby is successfully created, the state will change to [LanLobby.JOINED]. If the creation fails,\n\t\tthe state will be [LanLobby.FAILED].",
              "type":"constant"
            },
            "kick":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","any(string,integer)"],
                  "rets":["nil"],
                  "args":["lobby","peer"]
                }],
              "desc":"Removes the specified peer from the lobby."
            },
            "own_data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string"],
                  "rets":["string"],
                  "args":["lobby","key"]
                }],
              "desc":"Retrieves the specified data stored for the peer calling this function."
            },
            "members":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby"],
                  "rets":["string[]"],
                  "args":["lobby"]
                }],
              "desc":"Retrieves a list of all peers currently connected to the lobby."
            },
            "data":{
              "type":"function",
              "signatures":[{
                  "types":["stingray.LanLobby","string"],
                  "rets":["string"],
                  "args":["lobby","key"]
                }],
              "desc":"Retrieves a particular data value previously stored for the lobby by a call to [set_data()]."
            }
          },
          "desc":""
        }
      },
      "desc":""
    },
    "scaleform":{
      "type":"namespace",
      "members":{
        "Rtt":{
          "type":"namespace",
          "members":{
            "send_message":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","any*"],
                  "rets":["nil"],
                  "args":["rtt_handle","msgName","args"]
                }],
              "desc":"Sends a message to all of the loaded Scaleform Studio projects."
            },
            "load_project":{
              "type":"function",
              "signatures":[{
                  "types":["integer","string","string","string","integer","integer"],
                  "rets":["boolean"],
                  "args":["rtt_handle","project_name","bundle_name","scene_name","width","height"]
                }],
              "desc":"Loads a Scaleform Studio project."
            },
            "unload_project":{
              "type":"function",
              "signatures":[{
                  "types":["integer"],
                  "rets":["nil"],
                  "args":["rtt_handle"]
                }],
              "desc":"Unloads a Scaleform Studio project from a given Rtt."
            }
          },
          "desc":""
        },
        "Stingray":{
          "type":"namespace",
          "members":{
            "load_project":{
              "type":"function",
              "signatures":[{
                  "types":["string","string"],
                  "rets":["boolean"],
                  "args":["project_name","bundle_name"]
                }],
              "desc":"Loads a Scaleform Studio project."
            },
            "unload_project":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Unloads a Scaleform Studio project."
            },
            "send_message":{
              "type":"function",
              "signatures":[{
                  "types":["string","any*"],
                  "rets":["nil"],
                  "args":["msgName","args"]
                }],
              "desc":"Sends a message to all of the loaded Scaleform Studio projects."
            },
            "update":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Update all loaded Scaleform Studio projects by a time step."
            },
            "memory_report":{
              "type":"function",
              "signatures":[{
                  "types":[],
                  "rets":["nil"],
                  "args":[]
                }],
              "desc":"Logs the current Scaleform Studio memory usage."
            }
          },
          "desc":""
        }
      },
      "desc":""
    }
  }
}